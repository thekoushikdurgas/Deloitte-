{
  "declarations": {
    "variables": [
      {
        "name": "V_KEY_CONTACTS_LIST",
        "data_type": "IRTT_MULTIROW_REC_C",
        "default_value": null
      },
      {
        "name": "L_ERROR_COUNTER",
        "data_type": "PLS_INTEGER",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "ERR_EVENT_ID_REQUIRED",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_DATE_FROM_AFTER_DATE_UNTIL",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_DATE_RANGE_OVERLAP",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_DO_NOT_MODIFY_PAST_DATA",
        "type": "EXCEPTION"
      }
    ]
  },
  "main": {
    "type": "begin_end",
    "begin_line_no": 10,
    "begin_indent": 0,
    "begin_end_statements": [
      {
        "condition": " (INSERTING) ",
        "type": "if_else",
        "if_line_no": 11,
        "then_line_no": 11,
        "if_indent": 4,
        "end_if_line_no": 196,
        "then_statements": [
          {
            "indent": 8,
            "line": "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>INSERTING not supported!');",
            "line_no": 14,
            "filename": "zzz.sql"
          }
        ],
        "if_elses": [
          {
            "type": "elif_statement",
            "elif_line_no": 15,
            "elif_indent": 4,
            "condition": "(UPDATING)",
            "then_line_no": 15,
            "then_statements": [
              {
                "condition": " :NEW.EVENT_ID IS NULL ",
                "type": "if_else",
                "if_line_no": 18,
                "then_line_no": 18,
                "if_indent": 8,
                "end_if_line_no": 20,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_EVENT_ID_REQUIRED;",
                    "statement_line_no": 19,
                    "statement_indent": 12
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "select_statement",
                "sql_statement": "SELECT IRTT_MULTIROW_REC_T( UPPER(XT.USERID), TO_DATE(XT.VALID_FROM, MDM_UTIL_IRTT.CO_DD_MM_YYYY), TO_DATE(XT.VALID_TO, MDM_UTIL_IRTT.CO_DD_MM_YYYY)) BULK COLLECT INTO V_KEY_CONTACTS_LIST FROM XMLTABLE ('/rows/row' PASSING XMLTYPE (:NEW.KEY_CONTACTS_LIST) COLUMNS USERID VARCHAR2 (20) PATH 'field[1]', VALID_FROM VARCHAR2 (20) PATH 'field[2]', VALID_TO VARCHAR2 (20) PATH 'field[3]' ) XT;",
                "statement_line_no": 25,
                "statement_indent": 8
              },
              {
                "type": "assignment",
                "variable_name": "L_ERROR_COUNTER",
                "assignment_operator": ":=",
                "expression": "0;",
                "assignment_line_no": 40,
                "assignment_indent": 8
              },
              {
                "for_expression": "( FOR R1 IN ( SELECT B.VALUE_CD AS USER_ID, B.DATE_FROM AS VALID_FROM, B.DATE_UNTIL AS VALID_UNTIL, E.USERID, E.TERMINATIONDAY FROM TABLE(V_KEY_CONTACTS_LIST) B LEFT OUTER JOIN V_ROCHE_EMPLOYEES_ALL E ON E.USERID = B. VALUE_CD )",
                "type": "for_loop",
                "for_line_no": 41,
                "for_indent": 8,
                "end_for_line_no": 80,
                "loop_variable": "R1",
                "for_statements": []
              },
              {
                "condition": " (L_ERROR_COUNTER > 0) ",
                "type": "if_else",
                "if_line_no": 84,
                "then_line_no": 84,
                "if_indent": 8,
                "end_if_line_no": 86,
                "then_statements": [
                  {
                    "type": "function_calling",
                    "function_name": "RAISE_APPLICATION_ERROR",
                    "parameters": {
                      "parameter_type": "positional",
                      "positional_params": [
                        "-20000",
                        "'Correct your input, please.'"
                      ],
                      "named_params": {},
                      "raw_text": "-20000, 'Correct your input, please.'"
                    }
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "select_statement",
                "sql_statement": "SELECT COUNT(1) INTO L_ERROR_COUNTER FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.DATE_FROM > NVL(XT.DATE_UNTIL, XT.DATE_FROM);",
                "statement_line_no": 91,
                "statement_indent": 8
              },
              {
                "condition": " L_ERROR_COUNTER > 0 ",
                "type": "if_else",
                "if_line_no": 99,
                "then_line_no": 99,
                "if_indent": 8,
                "end_if_line_no": 101,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_DATE_FROM_AFTER_DATE_UNTIL;",
                    "statement_line_no": 100,
                    "statement_indent": 12
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "select_statement",
                "sql_statement": "SELECT COUNT(CHK) INTO L_ERROR_COUNTER FROM ( SELECT XT.DATE_FROM, XT.DATE_UNTIL, WHEN XT.DATE_FROM <= LAG(NVL(XT.DATE_UNTIL, XT.DATE_FROM + 1)) OVER (ORDER BY XT.DATE_FROM) THEN 1 END CHK FROM TABLE(V_KEY_CONTACTS_LIST) XT );",
                "statement_line_no": 106,
                "statement_indent": 8
              },
              {
                "condition": " L_ERROR_COUNTER > 0 ",
                "type": "if_else",
                "if_line_no": 123,
                "then_line_no": 123,
                "if_indent": 8,
                "end_if_line_no": 125,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_DATE_RANGE_OVERLAP;",
                    "statement_line_no": 124,
                    "statement_indent": 12
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "select_statement",
                "sql_statement": "SELECT COUNT(1) INTO L_ERROR_COUNTER FROM CFG.CFG_IRTT_EVENT_CONTACTS C LEFT JOIN TABLE(V_KEY_CONTACTS_LIST) XT ON C.USERID = XT.VALUE_CD AND C.VALID_FROM = XT.DATE_FROM WHERE C.EVENT_ID = :NEW.EVENT_ID AND C.VALID_FROM < TRUNC(SYSDATE) AND XT.DATE_FROM IS NULL;",
                "statement_line_no": 130,
                "statement_indent": 8
              },
              {
                "condition": " L_ERROR_COUNTER > 0 ",
                "type": "if_else",
                "if_line_no": 143,
                "then_line_no": 143,
                "if_indent": 8,
                "end_if_line_no": 145,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_DO_NOT_MODIFY_PAST_DATA;",
                    "statement_line_no": 144,
                    "statement_indent": 12
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "delete_statement",
                "sql_statement": "DELETE FROM CFG.CFG_IRTT_EVENT_CONTACTS A WHERE A.EVENT_ID = :NEW.EVENT_ID AND NOT EXISTS ( SELECT 1 FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE A.USERID = XT.VALUE_CD AND A.VALID_FROM = XT.DATE_FROM );",
                "statement_line_no": 149,
                "statement_indent": 8
              },
              {
                "type": "merge_statement",
                "sql_statement": "MERGE INTO CFG.CFG_IRTT_EVENT_CONTACTS A USING ( SELECT XT.VALUE_CD USERID, XT.DATE_FROM VALID_FROM, XT.DATE_UNTIL VALID_TO FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.VALUE_CD IS NOT NULL ) B ON (A.EVENT_ID = :NEW.EVENT_ID AND A.USERID = B.USERID AND A.VALID_FROM = B.VALID_FROM) WHEN MATCHED THEN UPDATE SET A.VALID_TO = B.VALID_TO WHEN NOT MATCHED THEN INSERT( EVENT_ID, USERID, VALID_FROM, VALID_TO ) VALUES( :NEW.EVENT_ID, B.USERID, B.VALID_FROM, B.VALID_TO );",
                "statement_line_no": 163,
                "statement_indent": 8
              },
              {
                "indent": 12,
                "line": "MDM_UTIL_IRTT.MAINTAIN_IRTT_ROLES ();",
                "line_no": 191,
                "filename": "zzz.sql"
              }
            ]
          },
          {
            "type": "elif_statement",
            "elif_line_no": 192,
            "elif_indent": 4,
            "condition": "(DELETING)",
            "then_line_no": 192,
            "then_statements": [
              {
                "indent": 12,
                "line": "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>DELETING not supported!');",
                "line_no": 195,
                "filename": "zzz.sql"
              }
            ]
          }
        ],
        "else_statements": []
      }
    ],
    "exception_handlers": [
      {
        "type": "exception_handler",
        "exception_name": "ERR_EVENT_ID_REQUIRED",
        "when_line_no": 198,
        "when_indent": 4,
        "then_line_no": 198,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20101",
                "'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
              ],
              "named_params": {},
              "raw_text": "-20101, 'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_DATE_FROM_AFTER_DATE_UNTIL",
        "when_line_no": 200,
        "when_indent": 4,
        "then_line_no": 200,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20103",
                "'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
              ],
              "named_params": {},
              "raw_text": "-20103, 'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_DATE_RANGE_OVERLAP",
        "when_line_no": 202,
        "when_indent": 4,
        "then_line_no": 202,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20105",
                "'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
              ],
              "named_params": {},
              "raw_text": "-20105, 'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_DO_NOT_MODIFY_PAST_DATA",
        "when_line_no": 204,
        "when_indent": 4,
        "then_line_no": 204,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20108",
                "'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
              ],
              "named_params": {},
              "raw_text": "-20108, 'MDM_V_IRTT_EVENTS_KEY_CONT_MTN'"
            }
          }
        ]
      }
    ],
    "exception_line_no": 197,
    "end_line_no": 206
  },
  "sql_comments": [
    "-- Not supported!",
    "-- Check that event exists.",
    "--",
    "-- Extract key acounts from XML row set.",
    "--rowno      VARCHAR2(4)  PATH 'empno',",
    "--",
    "-- Check if user is not a Roche employee any more then valid_until must be defined!",
    "-- mdm_util_web.return_feedback_div (p_status => 'WARNING', p_message => 'r1.user_id:'||r1.user_id||', r1.userid:'||r1.userid||', r1.valid_from:'||r1.valid_from||', r1.valid_until:'||r1.valid_until);",
    "-- Is a valid Roche employee.",
    "-- Roche employee terminated for this user?",
    "--",
    "--",
    "-- raise error if date_from > date_until",
    "--",
    "--",
    "-- check records do not overlap",
    "--",
    "--",
    "-- don't allow modification of records from the past.",
    "--",
    "--",
    "--",
    "--",
    "-- Maintain role for IRTT key contacts.",
    "-- Not supported!"
  ],
  "rest_string_list": [
    {
      "indent": 8,
      "line": "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>INSERTING not supported!');",
      "line_no": 14,
      "filename": "zzz.sql"
    },
    {
      "indent": 12,
      "line": "MDM_UTIL_IRTT.MAINTAIN_IRTT_ROLES ();",
      "line_no": 191,
      "filename": "zzz.sql"
    },
    {
      "indent": 12,
      "line": "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>DELETING not supported!');",
      "line_no": 195,
      "filename": "zzz.sql"
    }
  ],
  "conversion_stats": {
    "declaration_count": 6,
    "comment_count": 25,
    "sql_convert_count": {
      "select_statement": 4,
      "insert_statement": 0,
      "update_statement": 0,
      "delete_statement": 1,
      "raise_statement": 4,
      "assignment": 1,
      "for_loop": 1,
      "if_else": 6,
      "case_when": 0,
      "begin_end": 1,
      "exception_handler": 4,
      "function_calling": 5,
      "when_statement": 0,
      "elif_statement": 2,
      "fetch_statement": 0,
      "open_statement": 0,
      "exit_statement": 0,
      "close_statement": 0,
      "merge_statement": 1,
      "null_statement": 0,
      "return_statement": 0,
      "with_statement": 0
    }
  },
  "metadata": {
    "parse_timestamp": "2025-09-03T04:34:17.133501",
    "parser_version": "1.0",
    "file_details": {
      "filename": "zzz.sql",
      "filepath": "D:\\DELOITTE\\ORACALE_to_json\\files\\oracle\\zzz.sql",
      "filesize": 7230,
      "file_extension": ".sql",
      "last_modified": 1756844504.884048,
      "created_time": 1756173936.5202713,
      "is_file": true,
      "is_readable": true
    }
  }
}