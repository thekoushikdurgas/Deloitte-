{
  "declarations": {
    "variables": [
      {
        "name": "V_TRIGGER_NAME",
        "data_type": "VARCHAR2(100)",
        "default_value": "'COMPANY_ADDRESSES_IOF'"
      },
      {
        "name": "CNTR",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "V_USERID",
        "data_type": "VARCHAR2(100)",
        "default_value": null
      },
      {
        "name": "V_COUNTRY_CD",
        "data_type": "CORE.COUNTRIES.COUNTRY_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_COMPANY_TYPE_CD",
        "data_type": "CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_VALID_FROM",
        "data_type": "CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "ERR_UPD",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INS",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_CTRY_CHG",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
        "type": "EXCEPTION"
      },
      {
        "name": "TEST_ERR",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INS_LEGAL_ADDR",
        "type": "EXCEPTION"
      }
    ]
  },
  "main": {
    "type": "begin_end",
    "begin_line_no": 14,
    "begin_indent": 0,
    "begin_end_statements": [
      {
        "type": "begin_end",
        "begin_line_no": 15,
        "begin_indent": 4,
        "begin_end_statements": [
          {
            "indent": 8,
            "line": "        V_USERID := TXO_UTIL.GET_USERID;",
            "line_no": 16,
            "is_end_semicolon": true
          }
        ],
        "exception_handlers": [
          {
            "type": "exception_handler",
            "exception_name": "OTHERS",
            "when_line_no": 18,
            "when_indent": 8,
            "then_line_no": 18,
            "exception_statements": [
              {
                "indent": 12,
                "line": "            V_USERID := USER;",
                "line_no": 19,
                "is_end_semicolon": true
              }
            ],
            "exception_statements_line_no": [
              19
            ]
          }
        ],
        "exception_line_no": 17,
        "end_line_no": 20
      },
      {
        "indent": 4,
        "line": "    CNTR := 0;",
        "line_no": 22,
        "is_end_semicolon": true
      },
      {
        "indent": 4,
        "line": "    SELECT",
        "line_no": 23,
        "is_end_semicolon": false
      },
      {
        "indent": 8,
        "line": "        COUNT (*) INTO CNTR",
        "line_no": 24,
        "is_end_semicolon": false
      },
      {
        "indent": 4,
        "line": "    FROM",
        "line_no": 25,
        "is_end_semicolon": false
      },
      {
        "indent": 8,
        "line": "        CFG_V_COMPANY_ADDRESSES",
        "line_no": 26,
        "is_end_semicolon": false
      },
      {
        "indent": 4,
        "line": "    WHERE",
        "line_no": 27,
        "is_end_semicolon": false
      },
      {
        "indent": 8,
        "line": "        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)",
        "line_no": 28,
        "is_end_semicolon": false
      },
      {
        "indent": 8,
        "line": "        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);",
        "line_no": 29,
        "is_end_semicolon": true
      },
      {
        "if_expression": " INSERTING ",
        "type": "if_else",
        "if_line_no": 30,
        "then_statements": [],
        "if_indent": 4,
        "end_if_line_no": 34,
        "if_elses": [],
        "else_statements": []
      },
      {
        "if_expression": " INSERTING OR UPDATING ",
        "type": "if_else",
        "if_line_no": 36,
        "then_statements": [],
        "if_indent": 4,
        "end_if_line_no": 243,
        "if_elses": [],
        "else_statements": []
      },
      {
        "if_expression": " DELETING ",
        "type": "if_else",
        "if_line_no": 245,
        "then_statements": [],
        "if_indent": 4,
        "end_if_line_no": 251,
        "if_elses": [],
        "else_statements": []
      }
    ],
    "exception_handlers": [
      {
        "type": "exception_handler",
        "exception_name": "ERR_UPD",
        "when_line_no": 253,
        "when_indent": 4,
        "then_line_no": 253,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20111,
              "handler_string": "'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD"
            }
          }
        ],
        "exception_statements_line_no": [
          254,
          255,
          256,
          257
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_INS",
        "when_line_no": 258,
        "when_indent": 4,
        "then_line_no": 259,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20112,
              "handler_string": "'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.'"
            }
          }
        ],
        "exception_statements_line_no": [
          260
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_CTRY_CHG",
        "when_line_no": 261,
        "when_indent": 4,
        "then_line_no": 261,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20113,
              "handler_string": "'The company country modified but not the Valid From Date. Please update also the Valid From Date.'"
            }
          }
        ],
        "exception_statements_line_no": [
          262
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "TEST_ERR",
        "when_line_no": 263,
        "when_indent": 4,
        "then_line_no": 263,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20113,
              "handler_string": "'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR"
            }
          }
        ],
        "exception_statements_line_no": [
          264,
          265,
          266,
          267,
          268,
          269
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_INS_LEGAL_ADDR",
        "when_line_no": 270,
        "when_indent": 4,
        "then_line_no": 270,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20113,
              "handler_string": "'The legal address cannot be inserted for this type of company'"
            }
          }
        ],
        "exception_statements_line_no": [
          271
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
        "when_line_no": 272,
        "when_indent": 4,
        "then_line_no": 272,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "raise_application_error",
            "parameter": {
              "handler_code": -20113,
              "handler_string": "'It is not allowed to invalidate/delete this type of address'"
            }
          }
        ],
        "exception_statements_line_no": [
          273
        ]
      }
    ],
    "exception_line_no": 252,
    "end_line_no": 274
  },
  "sql_comments": [
    "--insert address P/L + RES/INC with valid_from date",
    "--check if there are changes on the valid_from date and country => if YES, old records will be expired and new ones will be inserted",
    "--update the P/L existing address with new valid_from -1",
    "--update the RES/INC address with valid_to = last day of the year of valid from date",
    "--insert new P/L address with new valid_from",
    "--insert new RES/INC address with first day of next year of valid from date",
    "--particular case for Physical address - change the JU mapping for the company",
    "--looking for B/L company types which are active and have CBC scope on Yes",
    "--update existing JU-mapping with last day of the year of valid from date",
    "--insert new JU mapping with first day of the next year of the valid from date",
    "--check if the the day used is first day of the year",
    "--find the first day of the current year of valid from",
    "--find the first day of the next year of valid from",
    "--do the mapping changes also for all the other companies (Rep Office and Virtual) which uses this company as legal company",
    "--update the existing address P/L with valid_from",
    "--insert address different than P, L address type with valid_from date",
    "--update address different than P, L address type with valid_from date"
  ],
  "rest_strings": [
    {
      "indent": 8,
      "line": "        V_USERID := TXO_UTIL.GET_USERID;",
      "line_no": 16,
      "is_end_semicolon": true
    },
    {
      "indent": 12,
      "line": "            V_USERID := USER;",
      "line_no": 19,
      "is_end_semicolon": true
    },
    {
      "indent": 4,
      "line": "    CNTR := 0;",
      "line_no": 22,
      "is_end_semicolon": true
    },
    {
      "indent": 4,
      "line": "    SELECT",
      "line_no": 23,
      "is_end_semicolon": false
    },
    {
      "indent": 8,
      "line": "        COUNT (*) INTO CNTR",
      "line_no": 24,
      "is_end_semicolon": false
    },
    {
      "indent": 4,
      "line": "    FROM",
      "line_no": 25,
      "is_end_semicolon": false
    },
    {
      "indent": 8,
      "line": "        CFG_V_COMPANY_ADDRESSES",
      "line_no": 26,
      "is_end_semicolon": false
    },
    {
      "indent": 4,
      "line": "    WHERE",
      "line_no": 27,
      "is_end_semicolon": false
    },
    {
      "indent": 8,
      "line": "        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)",
      "line_no": 28,
      "is_end_semicolon": false
    },
    {
      "indent": 8,
      "line": "        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);",
      "line_no": 29,
      "is_end_semicolon": true
    }
  ],
  "conversion_stats": {
    "declaration_count": 12,
    "comment_count": 17,
    "rest_string_count": 10,
    "sql_convert_count": 18
  },
  "metadata": {
    "parse_timestamp": "2025-08-25T02:26:38.948250",
    "parser_version": "1.0"
  }
}