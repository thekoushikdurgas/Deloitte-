{
  "declarations": {
    "variables": [
      {
        "name": "V_TRIGGER_NAME",
        "data_type": "VARCHAR2(100)",
        "default_value": "'COMPANY_ADDRESSES_IOF'"
      },
      {
        "name": "CNTR",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "V_USERID",
        "data_type": "VARCHAR2(100)",
        "default_value": null
      },
      {
        "name": "V_COUNTRY_CD",
        "data_type": "CORE.COUNTRIES.COUNTRY_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_COMPANY_TYPE_CD",
        "data_type": "CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_VALID_FROM",
        "data_type": "CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "ERR_UPD",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INS",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_CTRY_CHG",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
        "type": "EXCEPTION"
      },
      {
        "name": "TEST_ERR",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INS_LEGAL_ADDR",
        "type": "EXCEPTION"
      }
    ]
  },
  "main": [
    {
      "sqls": [
        {
          "sqls": [
            "V_USERID := TXO_UTIL.GET_USERID;",
            "V_USERID := USER;"
          ],
          "type": "begin_block",
          "exception_handlers": [
            {
              "exception_name": "OTHERS"
            }
          ]
        },
        "CNTR := 0;",
        "SELECT",
        "COUNT (*) INTO CNTR",
        "FROM",
        "CFG_V_COMPANY_ADDRESSES",
        "WHERE",
        "COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)",
        "AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);",
        "IF (INSERTING) THEN",
        "IF (CNTR > 0) THEN",
        "RAISE ERR_INS;",
        "END IF;",
        "END IF;",
        "IF (INSERTING OR UPDATING) THEN",
        "SELECT",
        "COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD",
        "FROM",
        "CFG_V_COMPANIES",
        "WHERE",
        "COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);",
        "IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN",
        "RAISE ERR_INS_LEGAL_ADDR;",
        "END IF;",
        "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN",
        "IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN",
        "RAISE ERR_CTRY_CHG;",
        "END IF;",
        "IF (CNTR = 0) THEN",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
        "P_COMPANY_CD => :NEW.COMPANY_CD,",
        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
        "P_STREET => :NEW.STREET,",
        "P_HOUSE_NO => :NEW.HOUSE_NO,",
        "P_BUILDING => :NEW.BUILDING,",
        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
        "P_ZIP_CODE => :NEW.ZIP_CODE,",
        "P_CITY=> :NEW.CITY,",
        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
        "P_LATITUDE => :NEW.LATITUDE,",
        "P_LONGITUDE => :NEW.LONGITUDE,",
        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
        "P_VALID_FROM => :NEW.VALID_FROM,",
        "P_ACTION_TYPE => 'INSERT'",
        ");",
        "ELSE",
        "IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
        "P_COMPANY_CD => :NEW.COMPANY_CD,",
        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
        "P_STREET => :NEW.STREET,",
        "P_HOUSE_NO => :NEW.HOUSE_NO,",
        "P_BUILDING => :NEW.BUILDING,",
        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
        "P_ZIP_CODE => :NEW.ZIP_CODE,",
        "P_CITY=> :NEW.CITY,",
        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
        "P_LATITUDE => :NEW.LATITUDE,",
        "P_LONGITUDE => :NEW.LONGITUDE,",
        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
        "P_VALID_FROM => :NEW.VALID_FROM,",
        "P_ACTION_TYPE => 'CTRY_CHANGE'",
        ");",
        "CNTR := 0;",
        "SELECT",
        "COUNT(*) INTO CNTR",
        "FROM",
        "CFG_V_COMPANIES",
        "WHERE",
        "COMPANY_CD = :NEW.COMPANY_CD",
        "AND VALID_IND = 'Y'",
        "AND CBC_GBE_SCOPE = 'Y'",
        "AND COMPANY_TYPE_CD IN ('B', 'L');",
        "IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN",
        "SELECT",
        "COUNTRY_CD INTO V_COUNTRY_CD",
        "FROM",
        "MDM_V_COUNTRIES",
        "WHERE",
        "COUNTRY_ID = :NEW.COUNTRY_ID;",
        "IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN",
        "V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');",
        "ELSE",
        "V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');",
        "END IF;",
        "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (",
        "I_COMPANY_CD => :NEW.COMPANY_CD,",
        "I_REPORTING_ENTITY_CD => 'J-'",
        "|| V_COUNTRY_CD,",
        "I_VALID_FROM_DATE => V_VALID_FROM,",
        "I_VALID_TO_DATE => NULL,",
        "I_CHANGE_USER => V_USERID,",
        "I_MAPPING_TYPE => 'JU',",
        "I_ACTION_TYPE => 'INSERT'",
        ");",
        "IF (V_COMPANY_TYPE_CD = 'L') THEN",
        "FOR V_REC IN (",
        "SELECT",
        "COMPANY_CD",
        "FROM",
        "CFG_V_COMPANIES",
        "WHERE",
        "LEGAL_COMPANY_CD = :NEW.COMPANY_CD",
        "AND VALID_IND = 'Y'",
        "AND CBC_GBE_SCOPE = 'Y'",
        "AND COMPANY_TYPE_CD IN ('O', 'V')",
        ") LOOP",
        "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (",
        "I_COMPANY_CD => V_REC.COMPANY_CD,",
        "I_REPORTING_ENTITY_CD => 'J-'",
        "|| V_COUNTRY_CD,",
        "I_VALID_FROM_DATE => V_VALID_FROM,",
        "I_VALID_TO_DATE => NULL,",
        "I_CHANGE_USER => V_USERID,",
        "I_MAPPING_TYPE => 'JU',",
        "I_ACTION_TYPE => 'INSERT'",
        ");",
        "END LOOP;",
        "END IF;",
        "END IF;",
        "ELSE",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
        "P_COMPANY_CD => :NEW.COMPANY_CD,",
        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
        "P_STREET => :NEW.STREET,",
        "P_HOUSE_NO => :NEW.HOUSE_NO,",
        "P_BUILDING => :NEW.BUILDING,",
        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
        "P_ZIP_CODE => :NEW.ZIP_CODE,",
        "P_CITY=> :NEW.CITY,",
        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
        "P_LATITUDE => :NEW.LATITUDE,",
        "P_LONGITUDE => :NEW.LONGITUDE,",
        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
        "P_VALID_FROM => :NEW.VALID_FROM,",
        "P_ACTION_TYPE => 'UPDATE'",
        ");",
        "END IF;",
        "END IF;",
        "END IF;",
        "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN",
        "IF (CNTR = 0) THEN",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
        "P_COMPANY_CD => :NEW.COMPANY_CD,",
        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
        "P_STREET => :NEW.STREET,",
        "P_HOUSE_NO => :NEW.HOUSE_NO,",
        "P_BUILDING => :NEW.BUILDING,",
        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
        "P_ZIP_CODE => :NEW.ZIP_CODE,",
        "P_CITY=> :NEW.CITY,",
        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
        "P_LATITUDE => :NEW.LATITUDE,",
        "P_LONGITUDE => :NEW.LONGITUDE,",
        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
        "P_VALID_FROM => :NEW.VALID_FROM,",
        "P_ACTION_TYPE => 'INSERT'",
        ");",
        "ELSE",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
        "P_COMPANY_CD => :NEW.COMPANY_CD,",
        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
        "P_STREET => :NEW.STREET,",
        "P_HOUSE_NO => :NEW.HOUSE_NO,",
        "P_BUILDING => :NEW.BUILDING,",
        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
        "P_ZIP_CODE => :NEW.ZIP_CODE,",
        "P_CITY=> :NEW.CITY,",
        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
        "P_LATITUDE => :NEW.LATITUDE,",
        "P_LONGITUDE => :NEW.LONGITUDE,",
        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
        "P_VALID_FROM => :NEW.VALID_FROM,",
        "P_ACTION_TYPE => 'UPDATE'",
        ");",
        "END IF;",
        "END IF;",
        "END IF;",
        "IF (DELETING) THEN",
        "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN",
        "RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;",
        "END IF;",
        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');",
        "END IF;"
      ],
      "type": "begin_block",
      "exception_handlers": [
        {
          "exception_name": "ERR_UPD",
          "raise_application_error": {
            "handler_code": "-20111",
            "handler_string": "'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD"
          }
        },
        {
          "exception_name": "ERR_INS",
          "raise_application_error": {
            "handler_code": "-20112",
            "handler_string": "An address already exists for this Company and Address type. To modify the existing address, please use the Update button."
          }
        },
        {
          "exception_name": "ERR_CTRY_CHG",
          "raise_application_error": {
            "handler_code": "-20113",
            "handler_string": "The company country modified but not the Valid From Date. Please update also the Valid From Date."
          }
        },
        {
          "exception_name": "TEST_ERR",
          "raise_application_error": {
            "handler_code": "-20113",
            "handler_string": "'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR"
          }
        },
        {
          "exception_name": "ERR_INS_LEGAL_ADDR",
          "raise_application_error": {
            "handler_code": "-20113",
            "handler_string": "The legal address cannot be inserted for this type of company"
          }
        },
        {
          "exception_name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
          "raise_application_error": {
            "handler_code": "-20113",
            "handler_string": "It is not allowed to invalidate/delete this type of address"
          }
        }
      ]
    }
  ],
  "sql_comments": [
    "--insert address P/L + RES/INC with valid_from date",
    "--check if there are changes on the valid_from date and country => if YES, old records will be expired and new ones will be inserted",
    "--update the P/L existing address with new valid_from -1",
    "--update the RES/INC address with valid_to = last day of the year of valid from date",
    "--insert new P/L address with new valid_from",
    "--insert new RES/INC address with first day of next year of valid from date",
    "--particular case for Physical address - change the JU mapping for the company",
    "--looking for B/L company types which are active and have CBC scope on Yes",
    "--update existing JU-mapping with last day of the year of valid from date",
    "--insert new JU mapping with first day of the next year of the valid from date",
    "--check if the the day used is first day of the year",
    "--find the first day of the current year of valid from",
    "--find the first day of the next year of valid from",
    "--do the mapping changes also for all the other companies (Rep Office and Virtual) which uses this company as legal company",
    "--update the existing address P/L with valid_from",
    "--insert address different than P, L address type with valid_from date",
    "--update address different than P, L address type with valid_from date"
  ],
  "conversion_stats": {
    "declaration_count": 12,
    "main_block_count": 1,
    "comment_count": 17
  },
  "metadata": {
    "parse_timestamp": "2025-08-11T08:38:15.988357",
    "parser_version": "1.0"
  }
}