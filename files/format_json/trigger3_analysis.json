{
  "declarations": {
    "variables": [
      {
        "name": "VARCHAR2",
        "data_type": "(100)",
        "default_value": "'COMPANY_ADDRESSES_IOF'"
      },
      {
        "name": "CNTR",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "VARCHAR2",
        "data_type": "(100)",
        "default_value": null
      },
      {
        "name": "V_COUNTRY_CD",
        "data_type": "CORE.COUNTRIES.COUNTRY_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_COMPANY_TYPE_CD",
        "data_type": "CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE",
        "default_value": null
      },
      {
        "name": "V_VALID_FROM",
        "data_type": "CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "ERR_UPD",
        "type": "exception"
      },
      {
        "name": "ERR_INS",
        "type": "exception"
      },
      {
        "name": "ERR_CTRY_CHG",
        "type": "exception"
      },
      {
        "name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
        "type": "exception"
      },
      {
        "name": "TEST_ERR",
        "type": "exception"
      },
      {
        "name": "ERR_INS_LEGAL_ADDR",
        "type": "exception"
      }
    ]
  },
  "main": [
    {
      "sqls": [
        {
          "sqls": [
            {
              "variable": "V_USERID",
              "value": "TXO_UTIL.GET_USERID;",
              "type": "assignment_statements",
              "o_sql": "V_USERID := TXO_UTIL.GET_USERID;"
            }
          ],
          "type": "begin_block",
          "exception_handlers": [
            {
              "exception_name": "OTHERS",
              "sqls": []
            }
          ],
          "o_sql": "BEGIN\nV_USERID := TXO_UTIL.GET_USERID;\nEXCEPTION\nWHEN OTHERS THEN\nV_USERID := USER;\nEND;"
        },
        {
          "variable": "CNTR",
          "value": "0;",
          "type": "assignment_statements",
          "o_sql": "CNTR := 0;"
        },
        {
          "sql": "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);",
          "type": "select_statements",
          "o_sql": "SELECT\nCOUNT (*) INTO CNTR\nFROM\nCFG_V_COMPANY_ADDRESSES\nWHERE\nCOMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)\nAND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);"
        },
        {
          "type": "if_else",
          "condition": "(INSERTING)",
          "then_sql": [
            {
              "type": "if_else",
              "condition": "(CNTR > 0)",
              "then_sql": [
                {
                  "exception_name": "ERR_INS",
                  "sqls": [
                    {
                      "sql": "RAISE ERR_INS;",
                      "type": "RAISE_statements",
                      "o_sql": "RAISE ERR_INS;"
                    }
                  ]
                }
              ],
              "o_sql": "IF (CNTR > 0) THEN\nRAISE ERR_INS;\nEND IF;"
            }
          ],
          "o_sql": "IF (INSERTING) THEN\nIF (CNTR > 0) THEN\nRAISE ERR_INS;\nEND IF;\nEND IF;"
        },
        {
          "type": "if_else",
          "condition": "(INSERTING OR UPDATING)",
          "then_sql": [
            {
              "sql": "SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);",
              "type": "select_statements",
              "o_sql": "SELECT\nCOMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);"
            },
            {
              "type": "if_else",
              "condition": "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))",
              "then_sql": [
                {
                  "exception_name": "ERR_INS_LEGAL_ADDR",
                  "sqls": [
                    {
                      "sql": "RAISE ERR_INS_LEGAL_ADDR;",
                      "type": "RAISE_statements",
                      "o_sql": "RAISE ERR_INS_LEGAL_ADDR;"
                    }
                  ]
                }
              ],
              "o_sql": "IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN\nRAISE ERR_INS_LEGAL_ADDR;\nEND IF;"
            },
            {
              "type": "if_else",
              "condition": "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))",
              "then_sql": [
                {
                  "type": "if_else",
                  "condition": "(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)",
                  "then_sql": [
                    {
                      "exception_name": "ERR_CTRY_CHG",
                      "sqls": [
                        {
                          "sql": "RAISE ERR_CTRY_CHG;",
                          "type": "RAISE_statements",
                          "o_sql": "RAISE ERR_CTRY_CHG;"
                        }
                      ]
                    }
                  ],
                  "o_sql": "IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nRAISE ERR_CTRY_CHG;\nEND IF;"
                },
                {
                  "type": "if_else",
                  "condition": "(CNTR = 0)",
                  "then_sql": [
                    "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
                    "P_COMPANY_CD => :NEW.COMPANY_CD,",
                    "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
                    "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
                    "P_STREET => :NEW.STREET,",
                    "P_HOUSE_NO => :NEW.HOUSE_NO,",
                    "P_BUILDING => :NEW.BUILDING,",
                    "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
                    "P_ZIP_CODE => :NEW.ZIP_CODE,",
                    "P_CITY=> :NEW.CITY,",
                    "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
                    "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
                    "P_LATITUDE => :NEW.LATITUDE,",
                    "P_LONGITUDE => :NEW.LONGITUDE,",
                    "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
                    "P_VALID_FROM => :NEW.VALID_FROM,",
                    "P_ACTION_TYPE => 'INSERT'",
                    ");"
                  ],
                  "o_sql": "IF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'CTRY_CHANGE'\n);\nCNTR := 0;\nSELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');\nIF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;",
                  "else_statement": [
                    {
                      "type": "if_else",
                      "condition": "(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)",
                      "then_sql": [
                        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
                        "P_COMPANY_CD => :NEW.COMPANY_CD,",
                        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
                        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
                        "P_STREET => :NEW.STREET,",
                        "P_HOUSE_NO => :NEW.HOUSE_NO,",
                        "P_BUILDING => :NEW.BUILDING,",
                        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
                        "P_ZIP_CODE => :NEW.ZIP_CODE,",
                        "P_CITY=> :NEW.CITY,",
                        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
                        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
                        "P_LATITUDE => :NEW.LATITUDE,",
                        "P_LONGITUDE => :NEW.LONGITUDE,",
                        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
                        "P_VALID_FROM => :NEW.VALID_FROM,",
                        "P_ACTION_TYPE => 'CTRY_CHANGE'",
                        ");",
                        {
                          "variable": "CNTR",
                          "value": "0;",
                          "type": "assignment_statements",
                          "o_sql": "CNTR := 0;"
                        },
                        {
                          "sql": "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');",
                          "type": "select_statements",
                          "o_sql": "SELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');"
                        },
                        {
                          "type": "if_else",
                          "condition": "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)",
                          "then_sql": [
                            {
                              "sql": "SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;",
                              "type": "select_statements",
                              "o_sql": "SELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;"
                            },
                            {
                              "type": "if_else",
                              "condition": "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')",
                              "then_sql": [
                                {
                                  "variable": "V_VALID_FROM",
                                  "value": "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');",
                                  "type": "assignment_statements",
                                  "o_sql": "V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');"
                                }
                              ],
                              "o_sql": "IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;",
                              "else_statement": [
                                {
                                  "variable": "V_VALID_FROM",
                                  "value": "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');",
                                  "type": "assignment_statements",
                                  "o_sql": "V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');"
                                }
                              ]
                            },
                            "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (",
                            "I_COMPANY_CD => :NEW.COMPANY_CD,",
                            "I_REPORTING_ENTITY_CD => 'J-'",
                            "|| V_COUNTRY_CD,",
                            "I_VALID_FROM_DATE => V_VALID_FROM,",
                            "I_VALID_TO_DATE => NULL,",
                            "I_CHANGE_USER => V_USERID,",
                            "I_MAPPING_TYPE => 'JU',",
                            "I_ACTION_TYPE => 'INSERT'",
                            ");",
                            {
                              "type": "if_else",
                              "condition": "(V_COMPANY_TYPE_CD = 'L')",
                              "then_sql": [
                                {
                                  "type": "for_loop",
                                  "loop_variable": null,
                                  "loop_body": [],
                                  "cursor_query": null,
                                  "o_sql": "FOR V_REC IN (\nEND LOOP;"
                                }
                              ],
                              "o_sql": "IF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;"
                            }
                          ],
                          "o_sql": "IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;"
                        }
                      ],
                      "o_sql": "IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'CTRY_CHANGE'\n);\nCNTR := 0;\nSELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');\nIF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;",
                      "else_statement": [
                        "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
                        "P_COMPANY_CD => :NEW.COMPANY_CD,",
                        "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
                        "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
                        "P_STREET => :NEW.STREET,",
                        "P_HOUSE_NO => :NEW.HOUSE_NO,",
                        "P_BUILDING => :NEW.BUILDING,",
                        "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
                        "P_ZIP_CODE => :NEW.ZIP_CODE,",
                        "P_CITY=> :NEW.CITY,",
                        "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
                        "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
                        "P_LATITUDE => :NEW.LATITUDE,",
                        "P_LONGITUDE => :NEW.LONGITUDE,",
                        "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
                        "P_VALID_FROM => :NEW.VALID_FROM,",
                        "P_ACTION_TYPE => 'UPDATE'",
                        ");"
                      ]
                    }
                  ]
                }
              ],
              "o_sql": "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nRAISE ERR_CTRY_CHG;\nEND IF;\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'CTRY_CHANGE'\n);\nCNTR := 0;\nSELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');\nIF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;\nEND IF;"
            },
            {
              "type": "if_else",
              "condition": "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))",
              "then_sql": [
                {
                  "type": "if_else",
                  "condition": "(CNTR = 0)",
                  "then_sql": [
                    "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
                    "P_COMPANY_CD => :NEW.COMPANY_CD,",
                    "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
                    "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
                    "P_STREET => :NEW.STREET,",
                    "P_HOUSE_NO => :NEW.HOUSE_NO,",
                    "P_BUILDING => :NEW.BUILDING,",
                    "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
                    "P_ZIP_CODE => :NEW.ZIP_CODE,",
                    "P_CITY=> :NEW.CITY,",
                    "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
                    "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
                    "P_LATITUDE => :NEW.LATITUDE,",
                    "P_LONGITUDE => :NEW.LONGITUDE,",
                    "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
                    "P_VALID_FROM => :NEW.VALID_FROM,",
                    "P_ACTION_TYPE => 'INSERT'",
                    ");"
                  ],
                  "o_sql": "IF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;",
                  "else_statement": [
                    "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(",
                    "P_COMPANY_CD => :NEW.COMPANY_CD,",
                    "P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,",
                    "P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,",
                    "P_STREET => :NEW.STREET,",
                    "P_HOUSE_NO => :NEW.HOUSE_NO,",
                    "P_BUILDING => :NEW.BUILDING,",
                    "P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,",
                    "P_ZIP_CODE => :NEW.ZIP_CODE,",
                    "P_CITY=> :NEW.CITY,",
                    "P_DISTRICT_NAME => :NEW.DISTRICT_NAME,",
                    "P_COUNTRY_ID => :NEW.COUNTRY_ID,",
                    "P_LATITUDE => :NEW.LATITUDE,",
                    "P_LONGITUDE => :NEW.LONGITUDE,",
                    "P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,",
                    "P_VALID_FROM => :NEW.VALID_FROM,",
                    "P_ACTION_TYPE => 'UPDATE'",
                    ");"
                  ]
                }
              ],
              "o_sql": "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;"
            }
          ],
          "o_sql": "IF (INSERTING OR UPDATING) THEN\nSELECT\nCOMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);\nIF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN\nRAISE ERR_INS_LEGAL_ADDR;\nEND IF;\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nRAISE ERR_CTRY_CHG;\nEND IF;\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'CTRY_CHANGE'\n);\nCNTR := 0;\nSELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');\nIF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;\nEND IF;\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;\nEND IF;"
        },
        {
          "type": "if_else",
          "condition": "(DELETING)",
          "then_sql": [
            {
              "type": "if_else",
              "condition": "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))",
              "then_sql": [
                {
                  "exception_name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
                  "sqls": [
                    {
                      "sql": "RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;",
                      "type": "RAISE_statements",
                      "o_sql": "RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;"
                    }
                  ]
                }
              ],
              "o_sql": "IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN\nRAISE ERR_NOT_ALLOWED_TO_INVALIDATE;\nEND IF;"
            },
            "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');"
          ],
          "o_sql": "IF (DELETING) THEN\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN\nRAISE ERR_NOT_ALLOWED_TO_INVALIDATE;\nEND IF;\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');\nEND IF;"
        }
      ],
      "type": "begin_block",
      "exception_handlers": [
        {
          "exception_name": "ERR_UPD",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20111",
                "handler_string": "The address cannot be updated because the Address type is different. Old address type: "
              }
            }
          ]
        },
        {
          "exception_name": "ERR_INS",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20112",
                "handler_string": "An address already exists for this Company and Address type. To modify the existing address, please use the Update button."
              }
            }
          ]
        },
        {
          "exception_name": "ERR_CTRY_CHG",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20113",
                "handler_string": "The company country modified but not the Valid From Date. Please update also the Valid From Date."
              }
            }
          ]
        },
        {
          "exception_name": "TEST_ERR",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20113",
                "handler_string": "New: "
              }
            }
          ]
        },
        {
          "exception_name": "ERR_INS_LEGAL_ADDR",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20113",
                "handler_string": "The legal address cannot be inserted for this type of company"
              }
            }
          ]
        },
        {
          "exception_name": "ERR_NOT_ALLOWED_TO_INVALIDATE",
          "sqls": [
            {
              "type": "function calling",
              "function_name": "raise_application_error",
              "parameter": {
                "handler_code": "-20113",
                "handler_string": "It is not allowed to invalidate/delete this type of address"
              }
            }
          ]
        }
      ],
      "o_sql": "BEGIN\nBEGIN\nV_USERID := TXO_UTIL.GET_USERID;\nEXCEPTION\nWHEN OTHERS THEN\nV_USERID := USER;\nEND;\nCNTR := 0;\nSELECT\nCOUNT (*) INTO CNTR\nFROM\nCFG_V_COMPANY_ADDRESSES\nWHERE\nCOMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)\nAND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);\nIF (INSERTING) THEN\nIF (CNTR > 0) THEN\nRAISE ERR_INS;\nEND IF;\nEND IF;\nIF (INSERTING OR UPDATING) THEN\nSELECT\nCOMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);\nIF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN\nRAISE ERR_INS_LEGAL_ADDR;\nEND IF;\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nRAISE ERR_CTRY_CHG;\nEND IF;\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nIF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'CTRY_CHANGE'\n);\nCNTR := 0;\nSELECT\nCOUNT(*) INTO CNTR\nFROM\nCFG_V_COMPANIES\nWHERE\nCOMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('B', 'L');\nIF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN\nSELECT\nCOUNTRY_CD INTO V_COUNTRY_CD\nFROM\nMDM_V_COUNTRIES\nWHERE\nCOUNTRY_ID = :NEW.COUNTRY_ID;\nIF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');\nELSE\nV_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');\nEND IF;\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => :NEW.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nIF (V_COMPANY_TYPE_CD = 'L') THEN\nFOR V_REC IN (\nSELECT\nCOMPANY_CD\nFROM\nCFG_V_COMPANIES\nWHERE\nLEGAL_COMPANY_CD = :NEW.COMPANY_CD\nAND VALID_IND = 'Y'\nAND CBC_GBE_SCOPE = 'Y'\nAND COMPANY_TYPE_CD IN ('O', 'V')\n) LOOP\nMDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (\nI_COMPANY_CD => V_REC.COMPANY_CD,\nI_REPORTING_ENTITY_CD => 'J-'\n|| V_COUNTRY_CD,\nI_VALID_FROM_DATE => V_VALID_FROM,\nI_VALID_TO_DATE => NULL,\nI_CHANGE_USER => V_USERID,\nI_MAPPING_TYPE => 'JU',\nI_ACTION_TYPE => 'INSERT'\n);\nEND LOOP;\nEND IF;\nEND IF;\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;\nEND IF;\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN\nIF (CNTR = 0) THEN\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'INSERT'\n);\nELSE\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(\nP_COMPANY_CD => :NEW.COMPANY_CD,\nP_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,\nP_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,\nP_STREET => :NEW.STREET,\nP_HOUSE_NO => :NEW.HOUSE_NO,\nP_BUILDING => :NEW.BUILDING,\nP_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,\nP_ZIP_CODE => :NEW.ZIP_CODE,\nP_CITY=> :NEW.CITY,\nP_DISTRICT_NAME => :NEW.DISTRICT_NAME,\nP_COUNTRY_ID => :NEW.COUNTRY_ID,\nP_LATITUDE => :NEW.LATITUDE,\nP_LONGITUDE => :NEW.LONGITUDE,\nP_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,\nP_VALID_FROM => :NEW.VALID_FROM,\nP_ACTION_TYPE => 'UPDATE'\n);\nEND IF;\nEND IF;\nEND IF;\nIF (DELETING) THEN\nIF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN\nRAISE ERR_NOT_ALLOWED_TO_INVALIDATE;\nEND IF;\nMDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');\nEND IF;\nEXCEPTION\nWHEN ERR_UPD THEN\nRAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '\n||:OLD.ADDRESS_TYPE_CD\n||' New address type: '\n||:NEW.ADDRESS_TYPE_CD);\nWHEN ERR_INS THEN\nRAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');\nWHEN ERR_CTRY_CHG THEN\nRAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');\nWHEN TEST_ERR THEN\nRAISE_APPLICATION_ERROR (-20113, 'New: '\n||:NEW.COMPANY_CD\n||' Old:'\n||:OLD.COMPANY_CD\n||'Count: '\n||CNTR);\nWHEN ERR_INS_LEGAL_ADDR THEN\nRAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');\nWHEN ERR_NOT_ALLOWED_TO_INVALIDATE THEN\nRAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');\nEND;"
    }
  ],
  "sql_comments": [
    "--insert address P/L + RES/INC with valid_from date",
    "--check if there are changes on the valid_from date and country => if YES, old records will be expired and new ones will be inserted",
    "--update the P/L existing address with new valid_from -1",
    "--update the RES/INC address with valid_to = last day of the year of valid from date",
    "--insert new P/L address with new valid_from",
    "--insert new RES/INC address with first day of next year of valid from date",
    "--particular case for Physical address - change the JU mapping for the company",
    "--looking for B/L company types which are active and have CBC scope on Yes",
    "--update existing JU-mapping with last day of the year of valid from date",
    "--insert new JU mapping with first day of the next year of the valid from date",
    "--check if the the day used is first day of the year",
    "--find the first day of the current year of valid from",
    "--find the first day of the next year of valid from",
    "--do the mapping changes also for all the other companies (Rep Office and Virtual) which uses this company as legal company",
    "--update the existing address P/L with valid_from",
    "--insert address different than P, L address type with valid_from date",
    "--update address different than P, L address type with valid_from date"
  ]
}