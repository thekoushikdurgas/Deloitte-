{
  "declarations": {
    "variables": [
      {
        "name": "V_COUNT_T_MAPPINGS",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "V_COUNT_T_MOL_MAP",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "V_MOLECULE_SEQ_NO",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "V_SEQ_NO_DUPLICATE_CNT",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "INVALID_MAPPING_EXISTS",
        "data_type": "BOOLEAN",
        "default_value": "FALSE"
      },
      {
        "name": "V_MANUAL_SHORT_DESC",
        "data_type": "THEMES.MANUAL_SHORT_DESC%TYPE",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "ERR_MAP_EXISTS",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_MOLEC_ID_MISSING",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_NO_PORTF_MOLECULE_LEFT",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_UPD_INV_MAP",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INS_INV_MAP",
        "type": "EXCEPTION"
      },
      {
        "name": "ERR_INV_MOL_SEQUENCE",
        "type": "EXCEPTION"
      },
      {
        "name": "UPDATE_UPD",
        "type": "EXCEPTION"
      }
    ]
  },
  "main": {
    "type": "begin_end",
    "begin_indent": 0,
    "begin_end_statements": [
      {
        "type": "select_statement",
        "sql_statement": "SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);",
        "statement_indent": 4
      },
      {
        "condition": " (DELETING) ",
        "type": "if_else",
        "if_indent": 4,
        "then_statements": [
          {
            "type": "update_statement",
            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;",
            "statement_indent": 8
          },
          {
            "type": "update_statement",
            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';",
            "statement_indent": 8
          },
          {
            "type": "function_calling",
            "function_name": "MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC",
            "parameters": {
              "parameter_type": "named",
              "positional_params": [],
              "named_params": {
                "P_THEME_NO": ":OLD.THEME_NO",
                "P_MOLECULE_ID": ":OLD.MOLECULE_ID",
                "P_DATE": "SYSDATE",
                "P_MANUAL_SHORT_DESC": "V_MANUAL_SHORT_DESC"
              },
              "raw_text": "P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC"
            }
          }
        ],
        "if_elses": [],
        "else_statements": []
      },
      {
        "condition": " (INSERTING OR UPDATING) ",
        "type": "if_else",
        "if_indent": 4,
        "then_statements": [
          {
            "type": "select_statement",
            "sql_statement": "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';",
            "statement_indent": 8
          },
          {
            "condition": " (:NEW.MOLECULE_ID IS NULL) ",
            "type": "if_else",
            "if_indent": 8,
            "then_statements": [
              {
                "type": "raise_statement",
                "sql_statement": "RAISE ERR_MOLEC_ID_MISSING;",
                "statement_indent": 12
              }
            ],
            "if_elses": [],
            "else_statements": []
          },
          {
            "condition": " (UPDATING) ",
            "type": "if_else",
            "if_indent": 8,
            "then_statements": [
              {
                "condition": " (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_UPD_INV_MAP;",
                    "statement_indent": 16
                  }
                ],
                "if_elses": [],
                "else_statements": []
              }
            ],
            "if_elses": [],
            "else_statements": []
          },
          {
            "condition": " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ",
            "type": "if_else",
            "if_indent": 8,
            "then_statements": [
              {
                "type": "select_statement",
                "sql_statement": "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';",
                "statement_indent": 12
              },
              {
                "condition": " (V_COUNT_T_MOL_MAP > 0) ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_MAP_EXISTS;",
                    "statement_indent": 16
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "type": "select_statement",
                "sql_statement": "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';",
                "statement_indent": 12
              },
              {
                "condition": " (V_COUNT_T_MOL_MAP > 0) ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "type": "assignment",
                    "variable_name": "INVALID_MAPPING_EXISTS",
                    "assignment_operator": ":=",
                    "expression": "TRUE;",
                    "assignment_indent": 16
                  }
                ],
                "if_elses": [],
                "else_statements": []
              }
            ],
            "if_elses": [],
            "else_statements": []
          },
          {
            "condition": " (INSERTING) ",
            "type": "if_else",
            "if_indent": 8,
            "then_statements": [
              {
                "condition": "",
                "type": "case_when",
                "case_indent": 12,
                "when_clauses": [
                  {
                    "type": "when_statement",
                    "when_indent": 16,
                    "condition": ":NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1",
                    "then_statements": [
                      {
                        "condition": " (INVALID_MAPPING_EXISTS) ",
                        "type": "if_else",
                        "if_indent": 20,
                        "then_statements": [
                          {
                            "type": "update_statement",
                            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                            "statement_indent": 24
                          }
                        ],
                        "if_elses": [],
                        "else_statements": [
                          {
                            "type": "insert_statement",
                            "sql_statement": "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );",
                            "statement_indent": 24
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "when_statement",
                    "when_indent": 16,
                    "condition": ":NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1",
                    "then_statements": [
                      {
                        "type": "update_statement",
                        "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';",
                        "statement_indent": 20
                      },
                      {
                        "condition": " (INVALID_MAPPING_EXISTS) ",
                        "type": "if_else",
                        "if_indent": 20,
                        "then_statements": [
                          {
                            "type": "update_statement",
                            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                            "statement_indent": 24
                          }
                        ],
                        "if_elses": [],
                        "else_statements": [
                          {
                            "type": "insert_statement",
                            "sql_statement": "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );",
                            "statement_indent": 24
                          }
                        ]
                      }
                    ]
                  }
                ],
                "else_statements": [
                  {
                    "type": "raise_statement",
                    "sql_statement": "RAISE ERR_INS_INV_MAP;",
                    "statement_indent": 20
                  }
                ]
              }
            ],
            "if_elses": [],
            "else_statements": []
          },
          {
            "condition": " (UPDATING) ",
            "type": "if_else",
            "if_indent": 8,
            "then_statements": [
              {
                "condition": " (:NEW.MOLECULE_ID IS NOT NULL) ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "condition": " (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ",
                    "type": "if_else",
                    "if_indent": 16,
                    "then_statements": [
                      {
                        "type": "update_statement",
                        "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                        "statement_indent": 20
                      }
                    ],
                    "if_elses": [],
                    "else_statements": []
                  },
                  {
                    "condition": " (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ",
                    "type": "if_else",
                    "if_indent": 16,
                    "then_statements": [
                      {
                        "type": "update_statement",
                        "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;",
                        "statement_indent": 20
                      },
                      {
                        "condition": " (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ",
                        "type": "if_else",
                        "if_indent": 20,
                        "then_statements": [
                          {
                            "type": "update_statement",
                            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;",
                            "statement_indent": 24
                          }
                        ],
                        "if_elses": [],
                        "else_statements": [
                          {
                            "type": "update_statement",
                            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;",
                            "statement_indent": 24
                          }
                        ]
                      },
                      {
                        "condition": " (INVALID_MAPPING_EXISTS) ",
                        "type": "if_else",
                        "if_indent": 20,
                        "then_statements": [
                          {
                            "type": "update_statement",
                            "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                            "statement_indent": 24
                          }
                        ],
                        "if_elses": [],
                        "else_statements": [
                          {
                            "type": "insert_statement",
                            "sql_statement": "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );",
                            "statement_indent": 24
                          }
                        ]
                      }
                    ],
                    "if_elses": [],
                    "else_statements": []
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "condition": " (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "type": "update_statement",
                    "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;",
                    "statement_indent": 16
                  },
                  {
                    "type": "update_statement",
                    "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';",
                    "statement_indent": 16
                  },
                  {
                    "condition": " (INVALID_MAPPING_EXISTS) ",
                    "type": "if_else",
                    "if_indent": 16,
                    "then_statements": [
                      {
                        "type": "update_statement",
                        "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                        "statement_indent": 20
                      }
                    ],
                    "if_elses": [],
                    "else_statements": [
                      {
                        "type": "insert_statement",
                        "sql_statement": "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );",
                        "statement_indent": 20
                      }
                    ]
                  }
                ],
                "if_elses": [],
                "else_statements": []
              },
              {
                "condition": " (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ",
                "type": "if_else",
                "if_indent": 12,
                "then_statements": [
                  {
                    "type": "update_statement",
                    "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;",
                    "statement_indent": 16
                  },
                  {
                    "condition": " (INVALID_MAPPING_EXISTS) ",
                    "type": "if_else",
                    "if_indent": 16,
                    "then_statements": [
                      {
                        "type": "update_statement",
                        "sql_statement": "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;",
                        "statement_indent": 20
                      }
                    ],
                    "if_elses": [],
                    "else_statements": [
                      {
                        "type": "insert_statement",
                        "sql_statement": "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );",
                        "statement_indent": 20
                      }
                    ]
                  }
                ],
                "if_elses": [],
                "else_statements": []
              }
            ],
            "if_elses": [],
            "else_statements": []
          },
          {
            "type": "function_calling",
            "function_name": "MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC",
            "parameters": {
              "parameter_type": "named",
              "positional_params": [],
              "named_params": {
                "P_THEME_NO": ":NEW.THEME_NO",
                "P_MOLECULE_ID": "0",
                "P_DATE": "SYSDATE",
                "P_MANUAL_SHORT_DESC": "V_MANUAL_SHORT_DESC"
              },
              "raw_text": "P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC"
            }
          }
        ],
        "if_elses": [],
        "else_statements": []
      },
      {
        "type": "select_statement",
        "sql_statement": "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );",
        "statement_indent": 4
      },
      {
        "condition": " (V_SEQ_NO_DUPLICATE_CNT > 0) ",
        "type": "if_else",
        "if_indent": 4,
        "then_statements": [
          {
            "type": "raise_statement",
            "sql_statement": "RAISE ERR_INV_MOL_SEQUENCE;",
            "statement_indent": 8
          }
        ],
        "if_elses": [],
        "else_statements": []
      }
    ],
    "exception_handlers": [
      {
        "type": "exception_handler",
        "exception_name": "ERR_MAP_EXISTS",
        "when_indent": 4,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20110",
                "'MDM_THEME_MOLECULE_MAP_IOF'"
              ],
              "named_params": {},
              "raw_text": "-20110, 'MDM_THEME_MOLECULE_MAP_IOF'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_MOLEC_ID_MISSING",
        "when_indent": 4,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20111",
                "'MDM_THEME_MOLECULE_MAP_IOF'"
              ],
              "named_params": {},
              "raw_text": "-20111, 'MDM_THEME_MOLECULE_MAP_IOF'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_UPD_INV_MAP",
        "when_indent": 4,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20112",
                "'MDM_THEME_MOLECULE_MAP_IOF'"
              ],
              "named_params": {},
              "raw_text": "-20112, 'MDM_THEME_MOLECULE_MAP_IOF'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_INS_INV_MAP",
        "when_indent": 4,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20113",
                "'MDM_THEME_MOLECULE_MAP_IOF'"
              ],
              "named_params": {},
              "raw_text": "-20113, 'MDM_THEME_MOLECULE_MAP_IOF'"
            }
          }
        ]
      },
      {
        "type": "exception_handler",
        "exception_name": "ERR_INV_MOL_SEQUENCE",
        "when_indent": 4,
        "exception_statements": [
          {
            "type": "function_calling",
            "function_name": "RAISE_APPLICATION_ERROR",
            "parameters": {
              "parameter_type": "positional",
              "positional_params": [
                "-20120",
                "'MDM_THEME_MOLECULE_MAP_IOF'"
              ],
              "named_params": {},
              "raw_text": "-20120, 'MDM_THEME_MOLECULE_MAP_IOF'"
            }
          }
        ]
      }
    ]
  },
  "sql_comments": [
    "/*\n        DELETE FROM theme_molecule_map tmm\n              WHERE     tmm.theme_no = :old.theme_no\n                    AND tmm.molecule_id = :old.molecule_id;\n        */",
    "/*\n        -- DELETE does not work because refresh doesn't find the record\n        -----------------------------------------------------------------\n        -- delete the mapping to this molecule\n        DELETE FROM theme_molecule_map tmm\n              WHERE     tmm.theme_no = :old.theme_no\n                    AND tmm.molecule_id = :old.molecule_id;\n        -- move left\n        UPDATE theme_molecule_map tmm\n           SET tmm.molecule_seq_no = tmm.molecule_seq_no - 1\n         WHERE     tmm.theme_no = :old.theme_no\n               AND tmm.molecule_seq_no > :old.molecule_seq_no;\n         */",
    "/*\n                    DELETE FROM theme_molecule_map tmm\n                          WHERE     tmm.theme_no = :new.theme_no\n                                AND tmm.molecule_id = :old.molecule_id;\n                    */",
    "/*\n                DELETE FROM theme_molecule_map tmm\n                      WHERE     tmm.theme_no = :new.theme_no\n                            AND tmm.molecule_id = :old.molecule_id;\n                            */",
    "/*\n    IF (v_mappings_changed)\n    THEN                  -- store the theme_no for theme with changed mapping\n        -- as a description update may be necessary (for portfolio projects)\n        gmd.gmd_util_themes.g_theme_no_upd_molec_map :=\n            v_theme_no_upd_molec_map;\n        -- debugging, remove for production\n        INSERT INTO jap_debug_tmmap\n                 VALUES (\n                            SYSDATE,\n                               'MDMAPPL.MDM_THEME_MOLECULE_MAP_IOF => gmd_util_themes.g_theme_no_upd_molec_map: '\n                            || gmd_util_themes.g_theme_no_upd_molec_map,\n                            NULL);\n    END IF;\n    */",
    "/*\nWHEN OTHERS\nTHEN\n    raise_application_error (\n        -20199,\n           v_count_t_mappings\n        || ' nm: '\n        || :new.molecule_id\n        || ' om: '\n        || :old.molecule_id\n        || ' ms: '\n        || :new.molecule_seq_no\n        || 'error: '\n        || SQLERRM);\n        */",
    "-- how many for one theme",
    "-- how many for one theme/molecule combination (zero/one expected)",
    "--   v_mappings_changed         BOOLEAN := FALSE;",
    "--   v_theme_no_upd_molec_map   themes.theme_no%TYPE;",
    "--chevali1",
    "-- move left (valid mappings only)",
    "--   v_mappings_changed := TRUE;",
    "--  v_theme_no_upd_molec_map := :old.theme_no;",
    "-- Update Theme Description",
    "-- Check if theme_no <=> molecule_id valid or invalid mapping exists",
    "--  for changed molecule_ids",
    "-- update to valid, place mapping at the end",
    "-- this is a real new mapping => insert",
    "-- insert new, valid mapping at the end",
    "--    v_mappings_changed := TRUE;",
    "--    v_theme_no_upd_molec_map := :new.theme_no;",
    "-- move existing and insert mapping",
    "-- move valid mappings right",
    "-- place new mapping on new position",
    "-- update to valid, place mapping at new position",
    "-- this is a real new mapping => insert",
    "-- insert mapping on new position",
    "--    v_mappings_changed := TRUE;",
    "--    v_theme_no_upd_molec_map := :new.theme_no;",
    "--(:new.molecule_seq_no < v_count_t_mappings + 1)",
    "------------- INSERTING-CASES ----------------------------",
    "---INSERTING -------------------------------------------",
    "-- BLOCK START  existing molecule is moved (update seq_no)",
    "-- existing molecule is moved (update seq_no)",
    "-- delete old mapping",
    "-- move valid mappings left",
    "-- move valid mappings right",
    "-- place valid mapping on new position",
    "-- update to valid, place mapping at new position",
    "-- this is a real new mapping => insert",
    "-- insert mapping on new position",
    "--   v_mappings_changed := TRUE;",
    "--   v_theme_no_upd_molec_map := :new.theme_no;",
    "-- BLOCK END  existing molecule is moved (update seq_no)",
    "-- BLOCK START  new molecule in arbitrary position",
    "-- we know that the new mapping doesn't exist yet",
    "-- we know that the old mapping exists",
    "-- old mapping  is removed",
    "-- new mapping is inserted",
    "-- move valid mappings left",
    "-- place new mapping on new position",
    "-- update to valid, update molecule_map_char, place mapping at new position",
    "-- this is a real new mapping => insert",
    "-- insert mapping on new position",
    "--  v_mappings_changed := TRUE;",
    "--  v_theme_no_upd_molec_map := :new.theme_no;",
    "-- BLOCK END  new molecule in arbitrary position",
    "-- BLOCK START  new molecule in existing position",
    "-- old mapping  is removed",
    "-- new mapping is inserted",
    "-- insert mapping on new position",
    "-- place new mapping on position",
    "-- update to valid, place mapping at new position",
    "-- this is a real new mapping => insert",
    "-- insert mapping on position",
    "--  v_mappings_changed := TRUE;",
    "--  v_theme_no_upd_molec_map := :new.theme_no;",
    "-- BLOCK END  new molecule in existing position",
    "-------------------------------------------------- UPDATING",
    "-- Update Theme Description",
    "---------------------------------------- INSERTING or UPDATING",
    "-- Sanity check => each seq_no may appear only once for valid Mappings"
  ],
  "rest_string_list": [],
  "conversion_stats": {
    "declaration_count": 13,
    "comment_count": 73,
    "sql_convert_count": {
      "select_statement": 5,
      "insert_statement": 5,
      "update_statement": 15,
      "delete_statement": 0,
      "raise_statement": 5,
      "assignment": 1,
      "for_loop": 0,
      "if_else": 22,
      "case_when": 1,
      "begin_end": 1,
      "exception_handler": 5,
      "function_calling": 7,
      "when_statement": 2,
      "elif_statement": 0,
      "fetch_statement": 0,
      "open_statement": 0,
      "exit_statement": 0,
      "close_statement": 0,
      "merge_statement": 0,
      "null_statement": 0,
      "return_statement": 0
    }
  },
  "metadata": {
    "parse_timestamp": "2025-08-28T19:32:18.135647",
    "parser_version": "1.0",
    "file_details": {
      "filename": "trigger2.sql",
      "filepath": "D:\\DELOITTE\\ORACALE_to_json\\files\\oracle\\trigger2.sql",
      "filesize": 19269,
      "file_extension": ".sql",
      "last_modified": 1754641881.299394,
      "created_time": 1754566723.5840232,
      "is_file": true,
      "is_readable": true
    }
  }
}