{
  "trigger_metadata": {
    "trigger_name": "trigger1",
    "has_declare_section": true,
    "has_begin_section": true,
    "has_exception_section": true
  },
  "declarations": {
    "variables": [
      {
        "name": "v_counter",
        "data_type": "pls_integer",
        "default_value": null
      },
      {
        "name": "v_code",
        "data_type": "varchar2(2)",
        "default_value": null
      },
      {
        "name": "v_odg_no",
        "data_type": "varchar2(2)",
        "default_value": null
      },
      {
        "name": "v_resgrp_cd",
        "data_type": "varchar2(2)",
        "default_value": null
      },
      {
        "name": "v_reslin_cd",
        "data_type": "varchar2(2)",
        "default_value": null
      },
      {
        "name": "v_status_cd",
        "data_type": "varchar2(1)",
        "default_value": null
      },
      {
        "name": "v_dba_cd",
        "data_type": "pls_integer",
        "default_value": null
      },
      {
        "name": "v_portf_proj_cd",
        "data_type": "varchar2(1)",
        "default_value": null
      },
      {
        "name": "v_description",
        "data_type": "varchar2(500)",
        "default_value": null
      },
      {
        "name": "v_reslin_desc",
        "data_type": "varchar2(60)",
        "default_value": null
      },
      {
        "name": "v_theme_desc_length",
        "data_type": "pls_integer",
        "default_value": null
      },
      {
        "name": "v_d_registrat_date",
        "data_type": "date",
        "default_value": null
      },
      {
        "name": "v_d_ins_date",
        "data_type": "date",
        "default_value": null
      },
      {
        "name": "v_future_registrat",
        "data_type": "date",
        "default_value": null
      },
      {
        "name": "v_valid_to",
        "data_type": "date",
        "default_value": null
      },
      {
        "name": "v_userid",
        "data_type": "varchar2(30)",
        "default_value": null
      },
      {
        "name": "v_is_admin_cnt",
        "data_type": "simple_integer",
        "default_value": "0"
      },
      {
        "name": "v_sec_mol_cnt",
        "data_type": "simple_integer",
        "default_value": "0"
      },
      {
        "name": "v_molecule_id",
        "data_type": "varchar2(5)",
        "default_value": "null"
      },
      {
        "name": "v_molecule_rg_no",
        "data_type": "varchar2(20)",
        "default_value": "null"
      },
      {
        "name": "v_molec_in_lic_prtnr",
        "data_type": "varchar2(15)",
        "default_value": "null"
      },
      {
        "name": "v_new_rg_no",
        "data_type": "v_theme_molecules.rg_no%type",
        "default_value": null
      },
      {
        "name": "v_comparator_ind",
        "data_type": "v_theme_molecules.comparator_ind%type",
        "default_value": null
      },
      {
        "name": "v_theme_desc_proposal",
        "data_type": "mdm_v_themes_mtn.theme_desc_proposal%type",
        "default_value": null
      },
      {
        "name": "v_short_name",
        "data_type": "varchar2(30)",
        "default_value": null
      },
      {
        "name": "v_trademark_no",
        "data_type": "v_themes.trademark_no%type",
        "default_value": null
      },
      {
        "name": "v_molecule_type_id",
        "data_type": "v_molecule_types.molecule_type_id%type",
        "default_value": null
      },
      {
        "name": "v_pharmacological_type_id",
        "data_type": "v_pharmacological_types.pharmacological_type_id%type",
        "default_value": null
      },
      {
        "name": "v_evolved_nmp_cnt",
        "data_type": "PLS_INTEGER",
        "default_value": null
      }
    ],
    "constants": [
      {
        "name": "c_molecule_type_id",
        "data_type": "v_molecule_types.molecule_type_id%type",
        "value": "99"
      },
      {
        "name": "c_pharmacological_type_id",
        "data_type": "v_pharmacological_types.pharmacological_type_id%type",
        "value": "19"
      }
    ],
    "exceptions": [
      {
        "name": "invalid_theme_no",
        "type": "user_defined"
      },
      {
        "name": "delete_no_more_possible",
        "type": "user_defined"
      },
      {
        "name": "theme_no_only_insert",
        "type": "user_defined"
      },
      {
        "name": "description_too_long",
        "type": "user_defined"
      },
      {
        "name": "theme_desc_proposal_too_long",
        "type": "user_defined"
      },
      {
        "name": "theme_desc_alt_too_long",
        "type": "user_defined"
      },
      {
        "name": "theme_no_cannot_be_inserted",
        "type": "user_defined"
      },
      {
        "name": "onlyoneofficialchangeperday",
        "type": "user_defined"
      },
      {
        "name": "insertsmustbeofficial",
        "type": "user_defined"
      },
      {
        "name": "themedescriptionmandatory",
        "type": "user_defined"
      },
      {
        "name": "theme_desc_not_unique",
        "type": "user_defined"
      },
      {
        "name": "in_prep_not_portf_proj",
        "type": "user_defined"
      },
      {
        "name": "in_prep_not_closed",
        "type": "user_defined"
      },
      {
        "name": "invalid_molecule_id",
        "type": "user_defined"
      },
      {
        "name": "sec_mol_list_not_empty",
        "type": "user_defined"
      },
      {
        "name": "admin_update_only",
        "type": "user_defined"
      },
      {
        "name": "portf_proj_mol_cre_err",
        "type": "user_defined"
      },
      {
        "name": "debugging",
        "type": "user_defined"
      }
    ],
    "exception_handlers": [
      {
        "exception_name": "admin_update_only",
        "handler_code": "raise_application_error(-20115, 'MDM_V_THEMES_IOF');"
      },
      {
        "exception_name": "in_prep_not_portf_proj",
        "handler_code": "raise_application_error(-20116, 'MDM_V_THEMES_IOF');"
      },
      {
        "exception_name": "in_prep_not_closed",
        "handler_code": "raise_application_error(-20117, 'MDM_V_THEMES_IOF');"
      },
      {
        "exception_name": "invalid_molecule_id",
        "handler_code": "raise_application_error(-20118, 'This is not a valid Molecule ID');"
      },
      {
        "exception_name": "sec_mol_list_not_empty",
        "handler_code": "raise_application_error(-20119, 'MDM_V_THEMES_IOF');"
      },
      {
        "exception_name": "invalid_theme_no",
        "handler_code": "raise_application_error(-20101, 'This is not a valid Theme No');"
      },
      {
        "exception_name": "delete_no_more_possible",
        "handler_code": "raise_application_error(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');"
      },
      {
        "exception_name": "theme_no_only_insert",
        "handler_code": "raise_application_error(-20400, 'Theme No cannot be updated');"
      },
      {
        "exception_name": "description_too_long",
        "handler_code": "raise_application_error(-20400, 'The automatically generated Theme Description \"' || v_description || '\" is too long');"
      },
      {
        "exception_name": "theme_desc_proposal_too_long",
        "handler_code": "raise_application_error(-20400, 'The automatically generated Short Description Proposal \"' || :old.theme_desc_proposal || '\" is too long');"
      },
      {
        "exception_name": "theme_desc_alt_too_long",
        "handler_code": "raise_application_error(-20400, 'The automatically generated Downstream Theme Description \"' || :old.theme_desc_alt || '\" is too long');"
      },
      {
        "exception_name": "theme_no_cannot_be_inserted",
        "handler_code": "raise_application_error(-20400, 'This Theme No already exists');"
      },
      {
        "exception_name": "onlyoneofficialchangeperday",
        "handler_code": "raise_application_error(-20400, 'Official Change for this Theme No and Day already exists');"
      },
      {
        "exception_name": "insertsmustbeofficial",
        "handler_code": "raise_application_error(-20400, 'New Themes can only be inserted by Official Changes');"
      },
      {
        "exception_name": "themedescriptionmandatory",
        "handler_code": "raise_application_error(-20400, 'If Pharma Rx Portfolio Project is set to \"No\", then the Theme Description must be filled');"
      },
      {
        "exception_name": "theme_desc_not_unique",
        "handler_code": "raise_application_error(-20400, 'This Theme Description already exists');"
      },
      {
        "exception_name": "portf_proj_mol_cre_err",
        "handler_code": "raise_application_error(-20120, 'MDM_V_THEMES_IOF');"
      },
      {
        "exception_name": "debugging",
        "handler_code": "raise_application_error(-20900, 'Debug in Themes IOF standard');"
      }
    ]
  },
  "data_operations": [
    {
      "id": "code_1",
      "sql": "select nvl(txo_security.get_userid, user) into v_userid from dual;",
      "type": "select_statements"
    },
    {
      "id": "code_2", 
      "sql": "select count(*) into v_is_admin_cnt from txo_users_roles_map where role_id in(315) and userid = v_userid;",
      "type": "select_statements"
    },
    {
      "id": "code_3",
      "sql": "select new_rg_no into v_new_rg_no from(select new_rg_no from(select rownum as new_rg_no from dual connect by 1 = 1 and rownum <= 6999) where new_rg_no > 5999 minus select to_number(rg_no) from v_theme_molecules) where rownum = 1;",
      "type": "select_statements"
    },
    {
      "id": "code_4",
      "sql": "if (:new.in_prep_ind = 'Y') then ... end if;",
      "type": "if_else",
      "condition": ":new.in_prep_ind = 'Y'",
      "then_statement": [
        {
          "id": "code_4_1",
          "sql": "if (:new.portf_proj_cd <> 'Y') then raise in_prep_not_portf_proj; end if;",
          "type": "if_else",
          "condition": ":new.portf_proj_cd <> 'Y'",
          "then_statement": [
            {
              "id": "code_4_1_1",
              "sql": "raise in_prep_not_portf_proj;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_4_2",
          "sql": "if (:new.status_desc <> 'CLOSED' and v_is_admin_cnt = 0) then raise in_prep_not_closed; end if;",
          "type": "if_else",
          "condition": ":new.status_desc <> 'CLOSED' and v_is_admin_cnt = 0",
          "then_statement": [
            {
              "id": "code_4_2_1",
              "sql": "raise in_prep_not_closed;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_4_3",
          "sql": "if (:new.molecule_id is null) then txo_util.set_warning('No Molecule assigned to In-Prep Theme ' || :new.theme_no || '!'); end if;",
          "type": "if_else",
          "condition": ":new.molecule_id is null",
          "then_statement": [
            {
              "id": "code_4_3_1",
              "sql": "txo_util.set_warning('No Molecule assigned to In-Prep Theme ' || :new.theme_no || '!');",
              "type": "procedure_call"
            }
          ],
          "else_statement": null
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_5",
      "sql": "if (:new.molecule_id is not null) then ... end if;",
      "type": "if_else",
      "condition": ":new.molecule_id is not null",
      "then_statement": [
        {
          "id": "code_5_1",
          "sql": "begin select rg_no, m.comparator_ind into v_molecule_rg_no, v_comparator_ind from v_theme_molecules m where molecule_id = :new.molecule_id and m.valid_ind = 'Y'; exception when no_data_found then raise invalid_molecule_id; end;",
          "type": "begin_block",
          "select_statement": "select rg_no, m.comparator_ind into v_molecule_rg_no, v_comparator_ind from v_theme_molecules m where molecule_id = :new.molecule_id and m.valid_ind = 'Y';",
          "exception_handlers": [
            {
              "exception_name": "no_data_found",
              "handler_code": "raise invalid_molecule_id;"
            }
          ]
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_6",
      "sql": "if (v_molecule_rg_no is null) then ... end if;",
      "type": "if_else", 
      "condition": "v_molecule_rg_no is null",
      "then_statement": [
        {
          "id": "code_6_1",
          "sql": "if (v_comparator_ind = 'Y') then null; else update v_theme_molecules set rg_no = v_new_rg_no where molecule_id = :new.molecule_id; end if;",
          "type": "if_else",
          "condition": "v_comparator_ind = 'Y'",
          "then_statement": "null;",
          "else_statement": "update v_theme_molecules set rg_no = v_new_rg_no where molecule_id = :new.molecule_id;"
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_7",
      "sql": "v_odg_no := substr(:new.reslin_desc_concat, 1, 2); v_resgrp_cd := substr(:new.reslin_desc_concat, 4, 2); v_reslin_cd := substr(:new.reslin_desc_concat, 7, 2); v_reslin_desc := substr(:new.reslin_desc_concat, 12, length(:new.reslin_desc_concat));",
      "type": "assignment_block",
      "assignments": [
        {
          "variable": "v_odg_no",
          "expression": "substr(:new.reslin_desc_concat, 1, 2)"
        },
        {
          "variable": "v_resgrp_cd", 
          "expression": "substr(:new.reslin_desc_concat, 4, 2)"
        },
        {
          "variable": "v_reslin_cd",
          "expression": "substr(:new.reslin_desc_concat, 7, 2)"
        },
        {
          "variable": "v_reslin_desc",
          "expression": "substr(:new.reslin_desc_concat, 12, length(:new.reslin_desc_concat))"
        }
      ]
    },
    {
      "id": "code_8",
      "sql": "if (:new.status_desc is not null) then select status_cd into v_status_cd from mdm_v_theme_status where state_desc = :new.status_desc; else v_status_cd := null; end if;",
      "type": "if_else",
      "condition": ":new.status_desc is not null",
      "then_statement": [
        {
          "id": "code_8_1",
          "sql": "select status_cd into v_status_cd from mdm_v_theme_status where state_desc = :new.status_desc;",
          "type": "select_statements"
        }
      ],
      "else_statement": [
        {
          "id": "code_8_e1",
          "sql": "v_status_cd := null;",
          "type": "assignment"
        }
      ]
    },
    {
      "id": "code_9",
      "sql": "if (:new.dba_desc_concat is not null) then select dba_cd into v_dba_cd from mdm_v_disease_biology_areas where dba_short_desc || ' - ' || dba_desc = :new.dba_desc_concat; else v_dba_cd := null; end if;",
      "type": "if_else",
      "condition": ":new.dba_desc_concat is not null",
      "then_statement": "select dba_cd into v_dba_cd from mdm_v_disease_biology_areas where dba_short_desc || ' - ' || dba_desc = :new.dba_desc_concat;",
      "else_statement": "v_dba_cd := null;"
    },
    {
      "id": "code_10",
      "sql": "v_molec_in_lic_prtnr := gmd_util_themes.get_molec_in_lic_prtnr(:new.molecule_id);",
      "type": "assignment"
    },
    {
      "id": "code_11",
      "sql": "if (:new.official_ind = 'N') then v_trademark_no := :new.trademark_no; else v_trademark_no := :old.trademark_no; end if;",
      "type": "if_else",
      "condition": ":new.official_ind = 'N'",
      "then_statement": [
        {
          "id": "code_11_1",
          "sql": "v_trademark_no := :new.trademark_no;",
          "type": "assignment"
        }
      ],
      "else_statement": [
        {
          "id": "code_11_e1",
          "sql": "v_trademark_no := :old.trademark_no;",
          "type": "assignment"
        }
      ]
    },
    {
      "id": "code_12",
      "sql": "v_theme_desc_proposal := gmd_util_themes.get_theme_short_name(p_theme_no_portf => :new.theme_no, p_molecule_id_portf => :new.molecule_id, p_prod_short_cd_portf => :new.prod_short_cd, p_odg_no_port => v_odg_no, p_resgrp_cd_port => v_resgrp_cd, p_reslin_cd_port => v_reslin_cd, p_line_ext_info_port => :new.line_ext_info, p_in_lic_prtnr_portf => null, p_trademark_no_portf => v_trademark_no, p_trunc_desc_length => 'N');",
      "type": "assignment"
    },
    {
      "id": "code_13",
      "sql": "if (:new.manual_short_desc is null and length(v_theme_desc_proposal) > 30) then raise theme_desc_proposal_too_long; end if;",
      "type": "if_else",
      "condition": ":new.manual_short_desc is null and length(v_theme_desc_proposal) > 30",
      "then_statement": "raise theme_desc_proposal_too_long;",
      "else_statement": null
    },
    {
      "id": "code_14",
      "sql": "v_short_name := coalesce(:new.manual_short_desc, v_theme_desc_proposal);",
      "type": "assignment"
    },
    {
      "id": "code_15",
      "sql": "if (inserting) then ... end if;",
      "type": "if_else",
      "condition": "inserting",
      "then_statement": [
        {
          "id": "code_15_1",
          "sql": "if (:new.in_prep_ind = 'N' and v_is_admin_cnt = 0) then raise admin_update_only; end if;",
          "type": "if_else",
          "condition": ":new.in_prep_ind = 'N' and v_is_admin_cnt = 0",
          "then_statement": "raise admin_update_only;",
          "else_statement": null
        },
        {
          "id": "code_15_2",
          "sql": "v_molecule_id := :new.molecule_id;",
          "type": "assignment"
        },
        {
          "id": "code_15_3",
          "sql": "if (:new.portf_proj_cd = 'Y' and :new.molecule_id is null) then ... end if;",
          "type": "if_else",
          "condition": ":new.portf_proj_cd = 'Y' and :new.molecule_id is null",
          "then_statement": [
            {
              "id": "code_15_3_1",
              "sql": "if (nvl(:new.manual_short_desc, :new.theme_desc_proposal) is null) then raise portf_proj_mol_cre_err; else ... end if;",
              "type": "if_else",
              "condition": "nvl(:new.manual_short_desc, :new.theme_desc_proposal) is null",
              "then_statement": "raise portf_proj_mol_cre_err;",
              "else_statement": [
                {
                  "id": "code_15_3_1_e1",
                  "sql": "insert into mdm_v_theme_molecules_mtn(molecule_desc, valid_ind, rg_no, cancer_immunotherapy_ind, molecule_type_id, pharmacological_type_id) values (nvl(:new.manual_short_desc, :new.theme_desc_proposal), 'Y', v_new_rg_no, 'N', c_molecule_type_id, c_pharmacological_type_id);",
                  "type": "insert_statements"
                },
                {
                  "id": "code_15_3_1_e2",
                  "sql": "select molecule_id into v_molecule_id from v_theme_molecules where molecule_desc = nvl(:new.manual_short_desc, :new.theme_desc_proposal) and valid_ind = 'Y' and rg_no = v_new_rg_no and cancer_immunotherapy_ind = 'N' and molecule_type_id = c_molecule_type_id and pharmacological_type_id = c_pharmacological_type_id;",
                  "type": "select_statements"
                },
                {
                  "id": "code_15_3_1_e3",
                  "sql": "insert into theme_molecule_map tmmap(tmmap.theme_no, tmmap.molecule_id, tmmap.molecule_seq_no, tmmap.valid_ind) values (:new.theme_no, v_molecule_id, 1, 'Y');",
                  "type": "insert_statements"
                }
              ]
            }
          ],
          "else_statement": null
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_16",
      "sql": "case length(:new.theme_no) when 4 then ... when 5 then ... else raise invalid_theme_no; end case;",
      "type": "case_statements",
      "case_expression": "length(:new.theme_no)",
      "when_clauses": [
        {
          "when_value": "4",
          "then_statement": [
            {
              "id": "code_16_1",
              "sql": "if (substr(:new.theme_no, 1, 1) not between 0 and 9 or substr(:new.theme_no, 2, 1) not between 0 and 9 or substr(:new.theme_no, 3, 1) not between 0 and 9 or substr(:new.theme_no, 4, 1) not between 0 and 9) then raise invalid_theme_no; end if;",
              "type": "if_else",
              "condition": "substr(:new.theme_no, 1, 1) not between 0 and 9 or substr(:new.theme_no, 2, 1) not between 0 and 9 or substr(:new.theme_no, 3, 1) not between 0 and 9 or substr(:new.theme_no, 4, 1) not between 0 and 9",
              "then_statement": "raise invalid_theme_no;",
              "else_statement": null
            }
          ]
        },
        {
          "when_value": "5",
          "then_statement": [
            {
              "id": "code_16_2",
              "sql": "if (substr(:new.theme_no, 1, 1) not between 0 and 9 or substr(:new.theme_no, 2, 1) not between 0 and 9 or substr(:new.theme_no, 3, 1) not between 0 and 9 or substr(:new.theme_no, 4, 1) not between 0 and 9 or substr(:new.theme_no, 5, 1) not between 0 and 9) then raise invalid_theme_no; end if;",
              "type": "if_else",
              "condition": "substr(:new.theme_no, 1, 1) not between 0 and 9 or substr(:new.theme_no, 2, 1) not between 0 and 9 or substr(:new.theme_no, 3, 1) not between 0 and 9 or substr(:new.theme_no, 4, 1) not between 0 and 9 or substr(:new.theme_no, 5, 1) not between 0 and 9",
              "then_statement": "raise invalid_theme_no;",
              "else_statement": null
            }
          ]
        }
      ],
      "else_statement": "raise invalid_theme_no;"
    },
    {
      "id": "code_17",
      "sql": "v_counter := null; select count(t.theme_no) into v_counter from (select theme_no from v_themes union all select theme_no from gmd.themes_archive) t where t.theme_no = :new.theme_no; if (v_counter > 0) then raise theme_no_cannot_be_inserted; end if;",
      "type": "validation_logic",
      "operations": [
        {
          "id": "code_17_1",
          "sql": "v_counter := null;",
          "type": "assignment"
        },
        {
          "id": "code_17_2",
          "sql": "select count(t.theme_no) into v_counter from (select theme_no from v_themes union all select theme_no from gmd.themes_archive) t where t.theme_no = :new.theme_no;",
          "type": "select_statements"
        },
        {
          "id": "code_17_3",
          "sql": "if (v_counter > 0) then raise theme_no_cannot_be_inserted; end if;",
          "type": "if_else",
          "condition": "v_counter > 0",
          "then_statement": "raise theme_no_cannot_be_inserted;",
          "else_statement": null
        }
      ]
    },
    {
      "id": "code_18",
      "sql": "v_counter := null; v_d_registrat_date := sysdate; if (:new.official_ind = 'N') then raise insertsmustbeofficial; end if;",
      "type": "validation_logic",
      "operations": [
        {
          "id": "code_18_1",
          "sql": "v_counter := null;",
          "type": "assignment"
        },
        {
          "id": "code_18_2",
          "sql": "v_d_registrat_date := sysdate;",
          "type": "assignment"
        },
        {
          "id": "code_18_3",
          "sql": "if (:new.official_ind = 'N') then raise insertsmustbeofficial; end if;",
          "type": "if_else",
          "condition": ":new.official_ind = 'N'",
          "then_statement": "raise insertsmustbeofficial;",
          "else_statement": null
        }
      ]
    },
    {
      "id": "code_19",
      "sql": "if (upper(:new.portf_proj_cd) = 'N') then if (:new.theme_desc is null or length(:new.theme_desc) = 0) then raise themedescriptionmandatory; end if; end if;",
      "type": "if_else",
      "condition": "upper(:new.portf_proj_cd) = 'N'",
      "then_statement": [
        {
          "id": "code_19_1",
          "sql": "if (:new.theme_desc is null or length(:new.theme_desc) = 0) then raise themedescriptionmandatory; end if;",
          "type": "if_else",
          "condition": ":new.theme_desc is null or length(:new.theme_desc) = 0",
          "then_statement": "raise themedescriptionmandatory;",
          "else_statement": null
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_20",
      "sql": "if (upper(:new.portf_proj_cd) = 'Y') then ... else ... end if;",
      "type": "if_else",
      "condition": "upper(:new.portf_proj_cd) = 'Y'",
      "then_statement": [
        {
          "id": "code_20_1",
          "sql": "v_description := gmd.gmd_util_themes.get_theme_desc_portfolio(...);",
          "type": "assignment",
          "function_call": "gmd.gmd_util_themes.get_theme_desc_portfolio",
          "parameters": {
            "p_theme_no_portf": "null",
            "p_molecule_id_portf": "v_molecule_id",
            "p_prod_short_cd_portf": ":new.prod_short_cd",
            "p_odg_no_port": "v_odg_no",
            "p_resgrp_cd_port": "v_resgrp_cd",
            "p_reslin_cd_port": "v_reslin_cd",
            "p_line_ext_info_port": ":new.line_ext_info",
            "p_in_lic_prtnr_portf": "v_molec_in_lic_prtnr",
            "p_trademark_no_portf": ":new.trademark_no",
            "p_short_name_portf": ":new.short_name",
            "p_trunc_desc_length": "'N'"
          }
        },
        {
          "id": "code_20_2",
          "sql": "if (length(v_description) > 90) then raise description_too_long; end if;",
          "type": "if_else",
          "condition": "length(v_description) > 90",
          "then_statement": "raise description_too_long;",
          "else_statement": null
        },
        {
          "id": "code_20_3",
          "sql": "v_description := trim(v_description);",
          "type": "assignment"
        },
        {
          "id": "code_20_4",
          "sql": "v_portf_proj_cd := 'Y';",
          "type": "assignment"
        }
      ],
      "else_statement": [
        {
          "id": "code_20_e1",
          "sql": "v_description := :new.theme_desc;",
          "type": "assignment"
        },
        {
          "id": "code_20_e2",
          "sql": "v_portf_proj_cd := 'N';",
          "type": "assignment"
        }
      ]
    },
    {
      "id": "code_21",
      "sql": "v_counter := null; select count(t.theme_no) into v_counter from v_themes t where t.theme_desc = v_description; if (v_counter > 0) then raise theme_desc_not_unique; end if;",
      "type": "validation_logic",
      "operations": [
        {
          "id": "code_21_1",
          "sql": "v_counter := null;",
          "type": "assignment"
        },
        {
          "id": "code_21_2",
          "sql": "select count(t.theme_no) into v_counter from v_themes t where t.theme_desc = v_description;",
          "type": "select_statements"
        },
        {
          "id": "code_21_3",
          "sql": "if (v_counter > 0) then raise theme_desc_not_unique; end if;",
          "type": "if_else",
          "condition": "v_counter > 0",
          "then_statement": "raise theme_desc_not_unique;",
          "else_statement": null
        }
      ]
    },
    {
      "id": "code_22",
      "sql": "v_counter := null; v_valid_to := to_date('09.09.9999', 'DD.MM.YYYY'); v_short_name := nvl(:new.manual_short_desc, substr(v_description, 1, 30));",
      "type": "assignment_block",
      "assignments": [
        {
          "variable": "v_counter",
          "expression": "null"
        },
        {
          "variable": "v_valid_to",
          "expression": "to_date('09.09.9999', 'DD.MM.YYYY')"
        },
        {
          "variable": "v_short_name",
          "expression": "nvl(:new.manual_short_desc, substr(v_description, 1, 30))"
        }
      ]
    },
    {
      "id": "code_23",
      "sql": "insert into gmd.themes(...) values (...);",
      "type": "insert_statements",
      "table": "gmd.themes",
      "columns": [
        "theme_no", "registrat_date", "odg_no", "resgrp_cd", "reslin_cd", "theme_desc", "short_name", "status_cd", "dba_cd", "in_prep_ind", "prod_short_cd", "trademark_no", "bio_activity", "applicant", "contact", "registrar", "line_ext_info", "portf_proj_cd", "co_dev_prtnr", "technology_prtnr", "official_ind", "co_mar_prtnr", "valid_to", "portf_da_group_id", "manual_short_desc"
      ],
      "values": [
        ":new.theme_no", "v_d_registrat_date", "v_odg_no", "v_resgrp_cd", "v_reslin_cd", "v_description", "v_short_name", "v_status_cd", "v_dba_cd", ":new.in_prep_ind", ":new.prod_short_cd", ":new.trademark_no", ":new.bio_activity", ":new.applicant", ":new.contact", "txo_util.get_userid", ":new.line_ext_info", "v_portf_proj_cd", ":new.co_dev_prtnr", ":new.technology_prtnr", ":new.official_ind", ":new.co_mar_prtnr", "v_valid_to", ":new.portf_da_group_id", ":new.manual_short_desc"
      ]
    },
    {
      "id": "code_24",
      "sql": "if (:old.molecule_id is null and :new.molecule_id is not null) then insert into mdm_v_theme_molecule_map_mtn a(...) values (...); end if;",
      "type": "if_else",
      "condition": ":old.molecule_id is null and :new.molecule_id is not null",
      "then_statement": [
        {
          "id": "code_24_1",
          "sql": "insert into mdm_v_theme_molecule_map_mtn a(a.theme_no, a.molecule_id, a.molecule_seq_no, a.valid_ind) values (:new.theme_no, v_molecule_id, 1, 'Y');",
          "type": "insert_statements"
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_25",
      "sql": "elsif (updating) then ... end if;",
      "type": "if_else",
      "condition": "updating",
      "then_statement": [
        {
          "id": "code_25_1",
          "sql": "if (:old.in_prep_ind = 'N' or (:old.in_prep_ind = 'Y' and :new.in_prep_ind = 'N')) and v_is_admin_cnt = 0) then raise admin_update_only; end if;",
          "type": "if_else",
          "condition": ":old.in_prep_ind = 'N' or (:old.in_prep_ind = 'Y' and :new.in_prep_ind = 'N') and v_is_admin_cnt = 0",
          "then_statement": [
            {
              "id": "code_25_1_1",
              "sql": "raise admin_update_only;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_25_2", 
          "sql": "if (:new.theme_no <> :old.theme_no) then raise theme_no_only_insert; end if;",
          "type": "if_else",
          "condition": ":new.theme_no <> :old.theme_no",
          "then_statement": [
            {
              "id": "code_25_2_1",
              "sql": "raise theme_no_only_insert;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_25_3",
          "sql": "if (:new.official_ind = 'N') then v_d_registrat_date := to_date(:old.registrat_date, 'dd-mm-yyyy'); else v_d_registrat_date := sysdate; end if;",
          "type": "if_else",
          "condition": ":new.official_ind = 'N'",
          "then_statement": [
            {
              "id": "code_25_3_1",
              "sql": "v_d_registrat_date := to_date(:old.registrat_date, 'dd-mm-yyyy');",
              "type": "assignment"
            }
          ],
          "else_statement": [
            {
              "id": "code_25_3_e1",
              "sql": "v_d_registrat_date := sysdate;",
              "type": "assignment"
            }
          ]
        },
        {
          "id": "code_25_4",
          "sql": "if (upper(:new.portf_proj_cd) = 'Y' and (v_status_cd <> 'C' or :new.in_prep_ind = 'Y')) then ... else ... end if;",
          "type": "if_else",
          "condition": "upper(:new.portf_proj_cd) = 'Y' and (v_status_cd <> 'C' or :new.in_prep_ind = 'Y')",
          "then_statement": [
            {
              "id": "code_25_4_1",
              "sql": "v_description := gmd.gmd_util_themes.get_theme_desc_portfolio(...);",
              "type": "assignment",
              "function_call": "gmd.gmd_util_themes.get_theme_desc_portfolio",
              "parameters": {
                "p_theme_no_portf": ":new.theme_no",
                "p_molecule_id_portf": ":new.molecule_id",
                "p_prod_short_cd_portf": ":new.prod_short_cd",
                "p_odg_no_port": "v_odg_no",
                "p_resgrp_cd_port": "v_resgrp_cd",
                "p_reslin_cd_port": "v_reslin_cd",
                "p_line_ext_info_port": ":new.line_ext_info",
                "p_in_lic_prtnr_portf": "v_molec_in_lic_prtnr",
                "p_trademark_no_portf": ":new.trademark_no",
                "p_short_name_portf": ":new.short_name",
                "p_trunc_desc_length": "'N'"
              }
            },
            {
              "id": "code_25_4_2",
              "sql": "v_description := trim(v_description);",
              "type": "assignment"
            },
            {
              "id": "code_25_4_3",
              "sql": "v_portf_proj_cd := 'Y';",
              "type": "assignment"
            }
          ],
          "else_statement": [
            {
              "id": "code_25_4_e1",
              "sql": "if (:new.theme_desc is null or length(:new.theme_desc) = 0) then raise themedescriptionmandatory; else v_description := :new.theme_desc; v_portf_proj_cd := :new.portf_proj_cd; end if;",
              "type": "if_else",
              "condition": ":new.theme_desc is null or length(:new.theme_desc) = 0",
              "then_statement": [
                {
                  "id": "code_25_4_e1_1", 
                  "sql": "raise themedescriptionmandatory;",
                  "type": "exception_raise"
                }
              ],
              "else_statement": [
                {
                  "id": "code_25_4_e1_e1",
                  "sql": "v_description := :new.theme_desc;",
                  "type": "assignment"
                },
                {
                  "id": "code_25_4_e1_e2",
                  "sql": "v_portf_proj_cd := :new.portf_proj_cd;",
                  "type": "assignment"
                }
              ]
            }
          ]
        },
        {
          "id": "code_25_5",
          "sql": "if (length(v_description) > 90) then raise description_too_long; end if;",
          "type": "if_else",
          "condition": "length(v_description) > 90",
          "then_statement": [
            {
              "id": "code_25_5_1",
              "sql": "raise description_too_long;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_25_6",
          "sql": "v_counter := null; select count(t.theme_no) into v_counter from v_themes t where t.theme_desc = v_description and t.theme_no <> :new.theme_no; if (v_counter > 0) then raise theme_desc_not_unique; end if;",
          "type": "validation_logic",
          "operations": [
            {
              "id": "code_25_6_1",
              "sql": "v_counter := null;",
              "type": "assignment"
            },
            {
              "id": "code_25_6_2",
              "sql": "select count(t.theme_no) into v_counter from v_themes t where t.theme_desc = v_description and t.theme_no <> :new.theme_no;",
              "type": "select_statements"
            },
            {
              "id": "code_25_6_3",
              "sql": "if (v_counter > 0) then raise theme_desc_not_unique; end if;",
              "type": "if_else",
              "condition": "v_counter > 0",
              "then_statement": [
                {
                  "id": "code_25_6_3_1",
                  "sql": "raise theme_desc_not_unique;",
                  "type": "exception_raise"
                }
              ],
              "else_statement": null
            }
          ]
        },
        {
          "id": "code_25_7",
          "sql": "v_counter := null;",
          "type": "assignment"
        },
        {
          "id": "code_25_8",
          "sql": "if (:new.official_ind = 'N') then ... else ... end if;",
          "type": "if_else",
          "condition": ":new.official_ind = 'N'",
          "then_statement": [
            {
              "id": "code_25_8_1",
              "sql": "update gmd.themes set odg_no = v_odg_no, resgrp_cd = v_resgrp_cd, reslin_cd = v_reslin_cd, theme_desc = v_description, short_name = v_short_name, status_cd = v_status_cd, dba_cd = v_dba_cd, in_prep_ind = :new.in_prep_ind, prod_short_cd = :new.prod_short_cd, trademark_no = :new.trademark_no, bio_activity = :new.bio_activity, applicant = :new.applicant, contact = :new.contact, line_ext_info = :new.line_ext_info, portf_proj_cd = v_portf_proj_cd, co_dev_prtnr = :new.co_dev_prtnr, technology_prtnr = :new.technology_prtnr, official_ind = :new.official_ind, co_mar_prtnr = :new.co_mar_prtnr, portf_da_group_id = :new.portf_da_group_id, manual_short_desc = :new.manual_short_desc where theme_no = :new.theme_no and to_date(registrat_date, 'DD-MM-YYYY') = v_d_registrat_date;",
              "type": "update_statements"
            }
          ],
          "else_statement": [
            {
              "id": "code_25_8_e1",
              "sql": "v_counter := null;",
              "type": "assignment"
            },
            {
              "id": "code_25_8_e2",
              "sql": "select count(*) into v_counter from v_themes t where trunc(t.registrat_date) = trunc(sysdate) and t.theme_no = :new.theme_no;",
              "type": "select_statements"
            },
            {
              "id": "code_25_8_e3",
              "sql": "if (v_counter > 0) then raise onlyoneofficialchangeperday; end if;",
              "type": "if_else",
              "condition": "v_counter > 0",
              "then_statement": [
                {
                  "id": "code_25_8_e3_1",
                  "sql": "raise onlyoneofficialchangeperday;",
                  "type": "exception_raise"
                }
              ],
              "else_statement": null
            },
            {
              "id": "code_25_8_e4",
              "sql": "v_counter := null;",
              "type": "assignment"
            },
            {
              "id": "code_25_8_e5",
              "sql": "update gmd.themes set odg_no = v_odg_no, resgrp_cd = v_resgrp_cd, reslin_cd = v_reslin_cd, theme_desc = v_description, short_name = v_short_name, status_cd = v_status_cd, dba_cd = v_dba_cd, in_prep_ind = :new.in_prep_ind, prod_short_cd = :new.prod_short_cd, trademark_no = :new.trademark_no, bio_activity = :new.bio_activity, applicant = :new.applicant, contact = :new.contact, line_ext_info = :new.line_ext_info, portf_proj_cd = v_portf_proj_cd, co_dev_prtnr = :new.co_dev_prtnr, technology_prtnr = :new.technology_prtnr, official_ind = :new.official_ind, co_mar_prtnr = :new.co_mar_prtnr, registrat_date = sysdate, registrar = v_userid, portf_da_group_id = :new.portf_da_group_id, manual_short_desc = :new.manual_short_desc where theme_no = :new.theme_no;",
              "type": "update_statements"
            }
          ]
        },
        {
          "id": "code_25_9",
          "sql": "case when :old.molecule_id is null and :new.molecule_id is not null then ... when :old.molecule_id is not null and :new.molecule_id is not null then ... when :old.molecule_id is not null and :new.molecule_id is null then ... else null; end case;",
          "type": "case_statements",
          "when_clauses": [
            {
              "when_condition": ":old.molecule_id is null and :new.molecule_id is not null",
              "then_statement": [
                {
                  "id": "code_25_9_1",
                  "sql": "insert into mdm_v_theme_molecule_map_mtn a(a.theme_no, a.molecule_id, a.molecule_seq_no, a.valid_ind) values (:new.theme_no, :new.molecule_id, 1, 'Y');",
                  "type": "insert_statements"
                }
              ]
            },
            {
              "when_condition": ":old.molecule_id is not null and :new.molecule_id is not null",
              "then_statement": [
                {
                  "id": "code_25_9_2",
                  "sql": "update mdm_v_theme_molecule_map a set a.molecule_id = :new.molecule_id, a.valid_ind = 'Y' where a.theme_no = :new.theme_no and a.molecule_seq_no = 1 and a.valid_ind = 'Y';",
                  "type": "update_statements"
                }
              ]
            },
            {
              "when_condition": ":old.molecule_id is not null and :new.molecule_id is null",
              "then_statement": [
                {
                  "id": "code_25_9_3_1",
                  "sql": "select count(*) into v_sec_mol_cnt from mdm_v_theme_molecule_map_mtn a where a.theme_no = :new.theme_no and a.molecule_seq_no > 1 and a.valid_ind = 'Y';",
                  "type": "select_statements"
                },
                {
                  "id": "code_25_9_3_2",
                  "sql": "if (v_sec_mol_cnt > 0) then raise sec_mol_list_not_empty; else update mdm_v_theme_molecule_map a set a.valid_ind = 'N' where a.molecule_id = :old.molecule_id and a.theme_no = :new.theme_no and a.molecule_seq_no = 1 and a.valid_ind = 'Y'; end if;",
                  "type": "if_else",
                  "condition": "v_sec_mol_cnt > 0",
                  "then_statement": [
                    {
                      "id": "code_25_9_3_2_1",
                      "sql": "raise sec_mol_list_not_empty;",
                      "type": "exception_raise"
                    }
                  ],
                  "else_statement": [
                    {
                      "id": "code_25_9_3_2_e1",
                      "sql": "update mdm_v_theme_molecule_map a set a.valid_ind = 'N' where a.molecule_id = :old.molecule_id and a.theme_no = :new.theme_no and a.molecule_seq_no = 1 and a.valid_ind = 'Y';",
                      "type": "update_statements"
                    }
                  ]
                }
              ]
            }
          ],
          "else_statement": "null"
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_26",
      "sql": "elsif (deleting) then ... end if;", 
      "type": "if_else",
      "condition": "deleting",
      "then_statement": [
        {
          "id": "code_26_1",
          "sql": "if ((:old.in_prep_ind = 'N') and v_is_admin_cnt = 0) then raise admin_update_only; end if;",
          "type": "if_else", 
          "condition": ":old.in_prep_ind = 'N' and v_is_admin_cnt = 0",
          "then_statement": [
            {
              "id": "code_26_1_1",
              "sql": "raise admin_update_only;",
              "type": "exception_raise"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_26_2",
          "sql": "if (trunc(to_date(:old.registrat_date, 'DD-MM-YYYY')) = trunc(sysdate)) then delete from gmd.themes a where a.theme_no = :old.theme_no and trunc(a.registrat_date) = trunc(sysdate); else raise delete_no_more_possible; end if;",
          "type": "if_else",
          "condition": "trunc(to_date(:old.registrat_date, 'DD-MM-YYYY')) = trunc(sysdate)",
          "then_statement": [
            {
              "id": "code_26_2_1",
              "sql": "delete from gmd.themes a where a.theme_no = :old.theme_no and trunc(a.registrat_date) = trunc(sysdate);",
              "type": "delete_statements"
            }
          ],
          "else_statement": [
            {
              "id": "code_26_2_e1",
              "sql": "raise delete_no_more_possible;",
              "type": "exception_raise"
            }
          ]
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_27",
      "sql": "if (inserting or updating) then ... end if;",
      "type": "if_else",
      "condition": "inserting or updating",
      "then_statement": [
        {
          "id": "code_27_1",
          "sql": "if (:new.proposal_id is not null and :old.proposal_id is null) then ... else ... end if;",
          "type": "if_else",
          "condition": ":new.proposal_id is not null and :old.proposal_id is null",
          "then_statement": [
            {
              "id": "code_27_1_1",
              "sql": "select count(*) into v_evolved_nmp_cnt from mdm_v_new_medicine_proposals_mtn where proposal_id = :new.proposal_id and proposal_status_cd = 'E';",
              "type": "select_statements"
            },
            {
              "id": "code_27_1_2",
              "sql": "if (v_evolved_nmp_cnt = 0) then update mdm_v_new_medicine_proposals_mtn set proposal_status_cd = 'E', evolved_theme_no = :new.theme_no, proposal_name = v_short_name, reason_for_change = '** Automatic update of proposal_name after short_name change in evolved theme **' where proposal_id = :new.proposal_id; end if;",
              "type": "if_else",
              "condition": "v_evolved_nmp_cnt = 0",
              "then_statement": [
                {
                  "id": "code_27_1_2_1",
                  "sql": "update mdm_v_new_medicine_proposals_mtn set proposal_status_cd = 'E', evolved_theme_no = :new.theme_no, proposal_name = v_short_name, reason_for_change = '** Automatic update of proposal_name after short_name change in evolved theme **' where proposal_id = :new.proposal_id;",
                  "type": "update_statements"
                }
              ],
              "else_statement": null
            }
          ],
          "else_statement": [
            {
              "id": "code_27_1_e1",
              "sql": "if (:new.proposal_id is null and :old.proposal_id is not null) then ... else ... end if;",
              "type": "if_else",
              "condition": ":new.proposal_id is null and :old.proposal_id is not null",
              "then_statement": [
                {
                  "id": "code_27_1_e1_1",
                  "sql": "update mdm_v_new_medicine_proposals_mtn set proposal_status_cd = 'A', evolved_theme_no = null where proposal_id = :old.proposal_id;",
                  "type": "update_statements"
                }
              ],
              "else_statement": [
                {
                  "id": "code_27_1_e1_e1",
                  "sql": "if (:new.proposal_id is not null and :old.proposal_id is not null and :new.proposal_id <> :old.proposal_id) then ... end if;",
                  "type": "if_else",
                  "condition": ":new.proposal_id is not null and :old.proposal_id is not null and :new.proposal_id <> :old.proposal_id",
                  "then_statement": [
                    {
                      "id": "code_27_1_e1_e1_1",
                      "sql": "update mdm_v_new_medicine_proposals_mtn set proposal_status_cd = 'A', evolved_theme_no = null where proposal_id = :old.proposal_id;",
                      "type": "update_statements"
                    },
                    {
                      "id": "code_27_1_e1_e1_2",
                      "sql": "update mdm_v_new_medicine_proposals_mtn set proposal_status_cd = 'E', evolved_theme_no = :new.theme_no, proposal_name = v_short_name, reason_for_change = '** Automatic update of proposal_name after short_name change in evolved theme **' where proposal_id = :new.proposal_id;",
                      "type": "update_statements"
                    }
                  ],
                  "else_statement": null
                }
              ]
            }
          ]
        },
        {
          "id": "code_27_2",
          "sql": "if (nvl(:new.proposal_id, 0) = nvl(:old.proposal_id, 0) and nvl(:old.short_name,'-') <> nvl(v_short_name,'-')) then ... end if;",
          "type": "if_else",
          "condition": "nvl(:new.proposal_id, 0) = nvl(:old.proposal_id, 0) and nvl(:old.short_name,'-') <> nvl(v_short_name,'-')",
          "then_statement": [
            {
              "id": "code_27_2_1",
              "sql": "select count(*) into v_evolved_nmp_cnt from mdm_v_new_medicine_proposals_mtn nmp where nmp.evolved_theme_no = :new.theme_no and nmp.proposal_status_cd = 'E';",
              "type": "select_statements"
            },
            {
              "id": "code_27_2_2",
              "sql": "if (v_evolved_nmp_cnt > 0) then update mdm_v_new_medicine_proposals_mtn nmp set nmp.proposal_name = v_short_name, nmp.reason_for_change = '** Automatic update of proposal_name after short_name change in evolved theme **' where nmp.evolved_theme_no = :new.theme_no and nmp.proposal_status_cd = 'E'; end if;",
              "type": "if_else",
              "condition": "v_evolved_nmp_cnt > 0",
              "then_statement": [
                {
                  "id": "code_27_2_2_1",
                  "sql": "update mdm_v_new_medicine_proposals_mtn nmp set nmp.proposal_name = v_short_name, nmp.reason_for_change = '** Automatic update of proposal_name after short_name change in evolved theme **' where nmp.evolved_theme_no = :new.theme_no and nmp.proposal_status_cd = 'E';",
                  "type": "update_statements"
                }
              ],
              "else_statement": null
            }
          ],
          "else_statement": null
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_28",
      "sql": "if (inserting and :new.theme_no is not null and gmd_util_themes.get_themes_range_automatic_nmp(:new.theme_no) = 'Y') then ... end if;",
      "type": "if_else",
      "condition": "inserting and :new.theme_no is not null and gmd_util_themes.get_themes_range_automatic_nmp(:new.theme_no) = 'Y'",
      "then_statement": [
        {
          "id": "code_28_1",
          "sql": "if (:new.proposal_id is not null) then select count(*) into v_evolved_nmp_cnt from mdm_v_new_medicine_proposals_mtn where proposal_id = :new.proposal_id and proposal_name = v_short_name and proposal_status_cd = 'E'; end if;",
          "type": "if_else",
          "condition": ":new.proposal_id is not null",
          "then_statement": [
            {
              "id": "code_28_1_1",
              "sql": "select count(*) into v_evolved_nmp_cnt from mdm_v_new_medicine_proposals_mtn where proposal_id = :new.proposal_id and proposal_name = v_short_name and proposal_status_cd = 'E';",
              "type": "select_statements"
            }
          ],
          "else_statement": null
        },
        {
          "id": "code_28_2",
          "sql": "if (:new.proposal_id is null or (:new.proposal_id is not null and v_evolved_nmp_cnt = 0)) then ... end if;",
          "type": "if_else",
          "condition": ":new.proposal_id is null or (:new.proposal_id is not null and v_evolved_nmp_cnt = 0)",
          "then_statement": [
            {
              "id": "code_28_2_1",
              "sql": "if (:new.molecule_id is not null) then ... end if;",
              "type": "if_else",
              "condition": ":new.molecule_id is not null",
              "then_statement": [
                {
                  "id": "code_28_2_1_1",
                  "sql": "begin select pharmacological_type_id, molecule_type_id into v_pharmacological_type_id, v_molecule_type_id from v_theme_molecules m where molecule_id = :new.molecule_id and m.valid_ind = 'Y'; exception when no_data_found then raise invalid_molecule_id; end;",
                  "type": "begin_block",
                  "select_statement": "select pharmacological_type_id, molecule_type_id into v_pharmacological_type_id, v_molecule_type_id from v_theme_molecules m where molecule_id = :new.molecule_id and m.valid_ind = 'Y';",
                  "exception_handlers": [
                    {
                      "exception_name": "no_data_found",
                      "handler_code": "raise invalid_molecule_id;"
                    }
                  ]
                }
              ],
              "else_statement": null
            },
            {
              "id": "code_28_2_2",
              "sql": "insert into mdm_v_new_medicine_proposals_mtn (proposal_status_cd, evolved_theme_no, proposal_name, pharmacological_type_id, molecule_type_id, reason_for_change) values ('E', :new.theme_no, v_short_name, nvl(v_pharmacological_type_id, c_pharmacological_type_id), nvl(v_molecule_type_id, c_molecule_type_id), '** Automatic creation of nmp for early development themes **');",
              "type": "insert_statements"
            }
          ],
          "else_statement": null
        }
      ],
      "else_statement": null
    },
    {
      "id": "code_29",
      "sql": "begin for i1 in (select a.theme_no, a.registrat_date from v_themes a where a.valid_to <= trunc(sysdate)) loop delete from gmd.themes where theme_no = i1.theme_no and registrat_date = i1.registrat_date; end loop; end;",
      "type": "begin_block",
      "operations": [
        {
          "id": "code_29_1",
          "sql": "for i1 in (select a.theme_no, a.registrat_date from v_themes a where a.valid_to <= trunc(sysdate)) loop delete from gmd.themes where theme_no = i1.theme_no and registrat_date = i1.registrat_date; end loop;",
          "type": "for_loop",
          "cursor_query": "select a.theme_no, a.registrat_date from v_themes a where a.valid_to <= trunc(sysdate)",
          "loop_variable": "i1",
          "loop_body": [
            {
              "id": "code_29_1_1",
              "sql": "delete from gmd.themes where theme_no = i1.theme_no and registrat_date = i1.registrat_date;",
              "type": "delete_statements"
            }
          ]
        }
      ]
    }
  ]
} 