{
  "trigger_metadata": {
    "trigger_name": "trigger3",
    "timing": "BEFORE",
    "events": [
      "INSERT",
      "UPDATE",
      "DELETE"
    ],
    "table_name": "company_addresses",
    "has_declare_section": true,
    "has_begin_section": true,
    "has_exception_section": true
  },
  "declarations": {
    "variables": [
      {
        "name": "v_trigger_name",
        "data_type": "VARCHAR2(100)",
        "default_value": "'COMPANY_ADDRESSES_IOF'"
      },
      {
        "name": "cntr",
        "data_type": "PLS_INTEGER",
        "default_value": null
      },
      {
        "name": "v_userid",
        "data_type": "VARCHAR2(100)",
        "default_value": null
      },
      {
        "name": "v_country_cd",
        "data_type": "core.countries.country_cd%type",
        "default_value": null
      },
      {
        "name": "v_company_type_cd",
        "data_type": "CFG.CFG_COMPANIES.COMPANY_TYPE_CD%type",
        "default_value": null
      },
      {
        "name": "v_valid_from",
        "data_type": "CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%type",
        "default_value": null
      }
    ],
    "constants": [],
    "exceptions": [
      {
        "name": "err_upd",
        "type": "user_defined"
      },
      {
        "name": "err_ins",
        "type": "user_defined"
      },
      {
        "name": "err_ctry_chg",
        "type": "user_defined"
      },
      {
        "name": "err_not_allowed_to_invalidate",
        "type": "user_defined"
      },
      {
        "name": "test_err",
        "type": "user_defined"
      },
      {
        "name": "err_ins_legal_addr",
        "type": "user_defined"
      }
    ]
  },
  "data_operations": [
    {
      "id": "code_1",
      "sql": "begin v_userid := txo_util.get_userid; exception when others then v_userid := USER; end;",
      "type": "assignment"
    },
    {
      "id": "code_2",
      "sql": "cntr := 0;",
      "type": "assignment"
    },
    {
      "id": "code_3",
      "sql": "SELECT COUNT (*) INTO cntr FROM cfg_v_company_addresses WHERE company_cd = nvl(:new.company_cd, :old.company_cd) and address_type_cd = nvl(:new.address_type_cd, :old.address_type_cd);",
      "type": "select_statements"
    },
    {
      "id": "code_4",
      "sql": "if (INSERTING) then if (cntr > 0) then RAISE err_ins; end if; end if;",
      "type": "if_else"
    },
    {
      "id": "code_5",
      "sql": "if (INSERTING or UPDATING) then SELECT company_type_cd INTO v_company_type_cd FROM cfg_v_companies WHERE company_cd = NVL (:new.company_cd, :old.company_cd);",
      "type": "if_else"
    },
    {
      "id": "code_6",
      "sql": "if (v_company_type_cd not in ('L','A') and nvl(:new.address_type_cd, :old.address_type_cd) IN ('L')) then RAISE err_ins_legal_addr; end if;",
      "type": "if_else"
    },
    {
      "id": "code_7",
      "sql": "if (nvl(:new.address_type_cd, :old.address_type_cd) in ('P','L')) then if (nvl(:old.valid_from, trunc(sysdate)) = nvl(:new.valid_from, trunc(sysdate)) AND :old.country_id <> :new.country_id) then RAISE err_ctry_chg; end if;",
      "type": "if_else"
    },
    {
      "id": "code_8",
      "sql": "if (cntr = 0) then MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => :new.company_cd, p_address_type_cd => :new.address_type_cd, p_additional_name => :new.additional_name, p_street => :new.street, p_house_no => :new.house_no, p_building => :new.building, p_additional_info => :new.additional_info, p_zip_code => :new.zip_code, p_city => :new.city, p_district_name => :new.district_name, p_country_id => :new.country_id, p_latitude => :new.latitude, p_longitude => :new.longitude, p_address_remark => :new.address_remark, p_valid_from => :new.valid_from, p_action_type => 'INSERT');",
      "type": "procedure_calls"
    },
    {
      "id": "code_9",
      "sql": "else if (nvl(:old.valid_from, trunc(sysdate)) <> nvl(:new.valid_from, trunc(sysdate)) and :old.country_id <> :new.country_id) then MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => :new.company_cd, p_address_type_cd => :new.address_type_cd, p_additional_name => :new.additional_name, p_street => :new.street, p_house_no => :new.house_no, p_building => :new.building, p_additional_info => :new.additional_info, p_zip_code => :new.zip_code, p_city => :new.city, p_district_name => :new.district_name, p_country_id => :new.country_id, p_latitude => :new.latitude, p_longitude => :new.longitude, p_address_remark => :new.address_remark, p_valid_from => :new.valid_from, p_action_type => 'CTRY_CHANGE');",
      "type": "if_else"
    },
    {
      "id": "code_10",
      "sql": "cntr := 0;",
      "type": "assignment"
    },
    {
      "id": "code_11",
      "sql": "select count(*) into cntr from cfg_v_companies where company_cd = :new.company_cd and valid_ind = 'Y' and cbc_gbe_scope = 'Y' and company_type_cd in ('B','L');",
      "type": "select_statements"
    },
    {
      "id": "code_12",
      "sql": "if (:new.address_type_cd = 'P' and cntr > 0) then SELECT country_cd INTO v_country_cd FROM mdm_v_countries WHERE country_id = :new.country_id;",
      "type": "if_else"
    },
    {
      "id": "code_13",
      "sql": "if (to_char(:new.valid_from, 'dd.mm') = '01.01') then v_valid_from := to_date(ADD_MONTHS(trunc(:new.valid_from,'yyyy'),10),'dd.mm.yyyy'); else v_valid_from := to_date(ADD_MONTHS(trunc(:new.valid_from,'yyyy'),22),'dd.mm.yyyy'); end if;",
      "type": "if_else"
    },
    {
      "id": "code_14",
      "sql": "mdm_util_companies.modifycompanymapping_ce_ju (i_company_cd => :new.company_cd, i_reporting_entity_cd => 'J-' || v_country_cd, i_valid_from_date => v_valid_from, i_valid_to_date => NULL, i_change_user => v_userid, i_mapping_type => 'JU', i_action_type => 'INSERT');",
      "type": "procedure_calls"
    },
    {
      "id": "code_15",
      "sql": "if (v_company_type_cd = 'L') then for V_REC in (select company_cd from cfg_v_companies where legal_company_cd = :new.company_cd and valid_ind = 'Y' and cbc_gbe_scope = 'Y' and company_type_cd in ('O','V')) loop mdm_util_companies.modifycompanymapping_ce_ju (i_company_cd => v_rec.company_cd, i_reporting_entity_cd => 'J-' || v_country_cd, i_valid_from_date => v_valid_from, i_valid_to_date => NULL, i_change_user => v_userid, i_mapping_type => 'JU', i_action_type => 'INSERT'); end loop; end if; end if;",
      "type": "if_else"
    },
    {
      "id": "code_16",
      "sql": "else MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => :new.company_cd, p_address_type_cd => :new.address_type_cd, p_additional_name => :new.additional_name, p_street => :new.street, p_house_no => :new.house_no, p_building => :new.building, p_additional_info => :new.additional_info, p_zip_code => :new.zip_code, p_city => :new.city, p_district_name => :new.district_name, p_country_id => :new.country_id, p_latitude => :new.latitude, p_longitude => :new.longitude, p_address_remark => :new.address_remark, p_valid_from => :new.valid_from, p_action_type => 'UPDATE'); end if; end if; end if;",
      "type": "procedure_calls"
    },
    {
      "id": "code_17",
      "sql": "if (nvl(:new.address_type_cd, :old.address_type_cd) not in ('P','L')) then if (cntr = 0) then MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => :new.company_cd, p_address_type_cd => :new.address_type_cd, p_additional_name => :new.additional_name, p_street => :new.street, p_house_no => :new.house_no, p_building => :new.building, p_additional_info => :new.additional_info, p_zip_code => :new.zip_code, p_city => :new.city, p_district_name => :new.district_name, p_country_id => :new.country_id, p_latitude => :new.latitude, p_longitude => :new.longitude, p_address_remark => :new.address_remark, p_valid_from => :new.valid_from, p_action_type => 'INSERT');",
      "type": "if_else"
    },
    {
      "id": "code_18",
      "sql": "else MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => :new.company_cd, p_address_type_cd => :new.address_type_cd, p_additional_name => :new.additional_name, p_street => :new.street, p_house_no => :new.house_no, p_building => :new.building, p_additional_info => :new.additional_info, p_zip_code => :new.zip_code, p_city => :new.city, p_district_name => :new.district_name, p_country_id => :new.country_id, p_latitude => :new.latitude, p_longitude => :new.longitude, p_address_remark => :new.address_remark, p_valid_from => :new.valid_from, p_action_type => 'UPDATE'); end if; end if; end if;",
      "type": "procedure_calls"
    },
    {
      "id": "code_19",
      "sql": "if (DELETING) then if (nvl(:new.address_type_cd, :old.address_type_cd) in ('L','P')) then RAISE err_not_allowed_to_invalidate; end if;",
      "type": "if_else"
    },
    {
      "id": "code_20",
      "sql": "MDM_UTIL_ADDRESSES.modify_company_address(p_company_cd => nvl(:new.company_cd, :old.company_cd), p_address_type_cd => nvl(:new.address_type_cd, :old.address_type_cd), p_action_type => 'DELETE'); end if;",
      "type": "procedure_calls"
    }
  ],
  "exception_handlers": [
    {
      "exception_name": "err_upd",
      "handler_code": "raise_application_error (-20111, 'The address cannot be updated because the Address type is different. Old address type: '||:old.address_type_cd||' New address type: '||:new.address_type_cd);"
    },
    {
      "exception_name": "err_ins",
      "handler_code": "raise_application_error (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');"
    },
    {
      "exception_name": "err_ctry_chg",
      "handler_code": "raise_application_error (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');"
    },
    {
      "exception_name": "test_err",
      "handler_code": "raise_application_error (-20113, 'New: '||:new.company_cd||' Old:'||:old.company_cd||'Count: '||cntr);"
    },
    {
      "exception_name": "err_ins_legal_addr",
      "handler_code": "raise_application_error (-20113, 'The legal address cannot be inserted for this type of company');"
    },
    {
      "exception_name": "err_not_allowed_to_invalidate",
      "handler_code": "raise_application_error (-20113, 'It is not allowed to invalidate/delete this type of address');"
    }
  ]
}