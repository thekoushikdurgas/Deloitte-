{
  "on_insert": {
    "declarations": {
      "variables": [
        {
          "name": "V_ACTION",
          "data_type": "TEXT",
          "default_value": null
        },
        {
          "name": "COL_NAMES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_NEW_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_OLD_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "V_TABLE_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_NAME) || '_his'"
        },
        {
          "name": "V_SCHEMA_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_SCHEMA)"
        }
      ],
      "constants": [],
      "exceptions": []
    },
    "main": {
      "type": "begin_end",
      "begin_indent": 0,
      "begin_end_statements": [
        {
          "condition": "TG_OP = ''",
          "type": "if_else",
          "if_indent": 4,
          "then_statements": [
            {
              "type": "assignment",
              "variable_name": "V_ACTION",
              "assignment_operator": ":=",
              "expression": "'I';",
              "assignment_indent": 8
            }
          ],
          "if_elses": [
            {
              "type": "elif_statement",
              "elif_indent": 4,
              "condition": "TG_OP = 'UPDATE'",
              "then_statements": [
                {
                  "type": "assignment",
                  "variable_name": "V_ACTION",
                  "assignment_operator": ":=",
                  "expression": "'U';",
                  "assignment_indent": 8
                }
              ]
            }
          ],
          "else_statements": []
        },
        {
          "type": "assignment",
          "variable_name": "COL_NAMES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_NEW_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_OLD_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "indent": 4,
          "line": "    PERFORM MDMTOOL.\"mdmt_util_history$write_history\"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );"
        },
        {
          "type": "return_statement",
          "sql_statement": "RETURN NULL;",
          "statement_indent": 4
        }
      ],
      "exception_handlers": []
    }
  },
  "on_update": {
    "declarations": {
      "variables": [
        {
          "name": "V_ACTION",
          "data_type": "TEXT",
          "default_value": null
        },
        {
          "name": "COL_NAMES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_NEW_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_OLD_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "V_TABLE_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_NAME) || '_his'"
        },
        {
          "name": "V_SCHEMA_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_SCHEMA)"
        }
      ],
      "constants": [],
      "exceptions": []
    },
    "main": {
      "type": "begin_end",
      "begin_indent": 0,
      "begin_end_statements": [
        {
          "condition": "TG_OP = ''",
          "type": "if_else",
          "if_indent": 4,
          "then_statements": [
            {
              "type": "assignment",
              "variable_name": "V_ACTION",
              "assignment_operator": ":=",
              "expression": "'I';",
              "assignment_indent": 8
            }
          ],
          "if_elses": [
            {
              "type": "elif_statement",
              "elif_indent": 4,
              "condition": "TG_OP = 'UPDATE'",
              "then_statements": [
                {
                  "type": "assignment",
                  "variable_name": "V_ACTION",
                  "assignment_operator": ":=",
                  "expression": "'U';",
                  "assignment_indent": 8
                }
              ]
            }
          ],
          "else_statements": []
        },
        {
          "type": "assignment",
          "variable_name": "COL_NAMES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_NEW_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_OLD_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "indent": 4,
          "line": "    PERFORM MDMTOOL.\"mdmt_util_history$write_history\"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );"
        },
        {
          "type": "return_statement",
          "sql_statement": "RETURN NULL;",
          "statement_indent": 4
        }
      ],
      "exception_handlers": []
    }
  },
  "on_delete": {
    "declarations": {
      "variables": [
        {
          "name": "V_ACTION",
          "data_type": "TEXT",
          "default_value": null
        },
        {
          "name": "COL_NAMES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_NEW_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "COL_OLD_VALUES",
          "data_type": "TEXT[]",
          "default_value": null
        },
        {
          "name": "V_TABLE_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_NAME) || '_his'"
        },
        {
          "name": "V_SCHEMA_NAME",
          "data_type": "TEXT",
          "default_value": "LOWER(TG_TABLE_SCHEMA)"
        }
      ],
      "constants": [],
      "exceptions": []
    },
    "main": {
      "type": "begin_end",
      "begin_indent": 0,
      "begin_end_statements": [
        {
          "condition": "TG_OP = ''",
          "type": "if_else",
          "if_indent": 4,
          "then_statements": [
            {
              "type": "assignment",
              "variable_name": "V_ACTION",
              "assignment_operator": ":=",
              "expression": "'I';",
              "assignment_indent": 8
            }
          ],
          "if_elses": [
            {
              "type": "elif_statement",
              "elif_indent": 4,
              "condition": "TG_OP = 'UPDATE'",
              "then_statements": [
                {
                  "type": "assignment",
                  "variable_name": "V_ACTION",
                  "assignment_operator": ":=",
                  "expression": "'U';",
                  "assignment_indent": 8
                }
              ]
            }
          ],
          "else_statements": []
        },
        {
          "type": "assignment",
          "variable_name": "COL_NAMES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_NEW_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "type": "assignment",
          "variable_name": "COL_OLD_VALUES",
          "assignment_operator": ":=",
          "expression": "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];",
          "assignment_indent": 4
        },
        {
          "indent": 4,
          "line": "    PERFORM MDMTOOL.\"mdmt_util_history$write_history\"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );"
        },
        {
          "type": "return_statement",
          "sql_statement": "RETURN NULL;",
          "statement_indent": 4
        }
      ],
      "exception_handlers": []
    }
  }
}