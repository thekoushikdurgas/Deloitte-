-- Generated from JSON analysis
-- Generated on: 2025-08-28 03:15:39

DECLARE
  V_COUNTER PLS_INTEGER;
  V_CODE VARCHAR2(2);
  V_ODG_NO VARCHAR2(2);
  V_RESGRP_CD VARCHAR2(2);
  V_RESLIN_CD VARCHAR2(2);
  V_STATUS_CD VARCHAR2(1);
  V_DBA_CD PLS_INTEGER;
  V_PORTF_PROJ_CD VARCHAR2(1);
  V_DESCRIPTION VARCHAR2(500);
  V_RESLIN_DESC VARCHAR2(60);
  V_THEME_DESC_LENGTH PLS_INTEGER;
  V_D_REGISTRAT_DATE DATE;
  V_D_INS_DATE DATE;
  V_FUTURE_REGISTRAT DATE;
  V_VALID_TO DATE;
  V_USERID VARCHAR2(30);
  V_IS_ADMIN_CNT SIMPLE_INTEGER := 0;
  V_SEC_MOL_CNT SIMPLE_INTEGER := 0;
  V_MOLECULE_ID VARCHAR2(5);
  V_MOLECULE_RG_NO VARCHAR2(20);
  V_MOLEC_IN_LIC_PRTNR VARCHAR2(15);
  V_NEW_RG_NO V_THEME_MOLECULES.RG_NO%TYPE;
  V_COMPARATOR_IND V_THEME_MOLECULES.COMPARATOR_IND%TYPE;
  V_THEME_DESC_PROPOSAL MDM_V_THEMES_MTN.THEME_DESC_PROPOSAL%TYPE;
  V_SHORT_NAME VARCHAR2(30);
  V_EVOLVED_NMP_CNT PLS_INTEGER;
  V_TRADEMARK_NO V_THEMES.TRADEMARK_NO%TYPE;
  V_MOLECULE_TYPE_ID V_MOLECULE_TYPES.MOLECULE_TYPE_ID%TYPE;
  V_PHARMACOLOGICAL_TYPE_ID V_PHARMACOLOGICAL_TYPES.PHARMACOLOGICAL_TYPE_ID%TYPE;
  C_MOLECULE_TYPE_ID CONSTANT V_MOLECULE_TYPES.MOLECULE_TYPE_ID%TYPE := 99;
  C_PHARMACOLOGICAL_TYPE_ID CONSTANT V_PHARMACOLOGICAL_TYPES.PHARMACOLOGICAL_TYPE_ID%TYPE := 19;
  INVALID_THEME_NO EXCEPTION;
  DELETE_NO_MORE_POSSIBLE EXCEPTION;
  THEME_NO_ONLY_INSERT EXCEPTION;
  DESCRIPTION_TOO_LONG EXCEPTION;
  THEME_DESC_PROPOSAL_TOO_LONG EXCEPTION;
  THEME_DESC_ALT_TOO_LONG EXCEPTION;
  THEME_NO_CANNOT_BE_INSERTED EXCEPTION;
  ONLYONEOFFICIALCHANGEPERDAY EXCEPTION;
  INSERTSMUSTBEOFFICIAL EXCEPTION;
  THEMEDESCRIPTIONMANDATORY EXCEPTION;
  THEME_DESC_NOT_UNIQUE EXCEPTION;
  IN_PREP_NOT_PORTF_PROJ EXCEPTION;
  IN_PREP_NOT_CLOSED EXCEPTION;
  INVALID_MOLECULE_ID EXCEPTION;
  SEC_MOL_LIST_NOT_EMPTY EXCEPTION;
  ADMIN_UPDATE_ONLY EXCEPTION;
  PORTF_PROJ_MOL_CRE_ERR EXCEPTION;
  DEBUGGING EXCEPTION;

BEGIN
  SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;
  SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;
  SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;
  IF  (:NEW.IN_PREP_IND = 'Y')  THEN
    IF  (:NEW.PORTF_PROJ_CD <> 'Y')  THEN
      RAISE IN_PREP_NOT_PORTF_PROJ;
    END IF;
    IF  (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)  THEN
      RAISE IN_PREP_NOT_CLOSED;
    END IF;
    IF  (:NEW.MOLECULE_ID IS NULL)  THEN
      TXO_UTIL.SET_WARNING();
    END IF;
  END IF;
  IF  (:NEW.MOLECULE_ID IS NOT NULL)  THEN
    BEGIN
      SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE INVALID_MOLECULE_ID;
    END;
    IF  (V_MOLECULE_RG_NO IS NULL)  THEN
      IF  (V_COMPARATOR_IND = 'Y')  THEN
        NULL;
      ELSE
        UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;
      END IF;
    END IF;
  END IF;
  IF  (:NEW.STATUS_DESC IS NOT NULL)  THEN
    SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;
  ELSE
  END IF;
  IF  (:NEW.DBA_DESC_CONCAT IS NOT NULL)  THEN
    SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;
  ELSE
  END IF;
  IF  (:NEW.OFFICIAL_IND = 'N')  THEN
  ELSE
  END IF;
  IF  (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)  THEN
    RAISE THEME_DESC_PROPOSAL_TOO_LONG;
  END IF;
  IF  (INSERTING)  THEN
    IF  (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)  THEN
      RAISE ADMIN_UPDATE_ONLY;
    END IF;
    IF  (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)  THEN
      IF  (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)  THEN
        RAISE PORTF_PROJ_MOL_CRE_ERR;
      ELSE
        INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );
        SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;
        INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );
      END IF;
    END IF;
    CASE
      ELSE
        RAISE INVALID_THEME_NO;
    END CASE;
    SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;
    IF  (V_COUNTER > 0)  THEN
      RAISE THEME_NO_CANNOT_BE_INSERTED;
    END IF;
    IF  (:NEW.OFFICIAL_IND = 'N')  THEN
      RAISE INSERTSMUSTBEOFFICIAL;
    END IF;
    IF  (UPPER(:NEW.PORTF_PROJ_CD) = 'N')  THEN
      IF  (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)  THEN
        RAISE THEMEDESCRIPTIONMANDATORY;
      END IF;
    END IF;
    IF  (UPPER(:NEW.PORTF_PROJ_CD) = 'Y')  THEN
      IF  (LENGTH(V_DESCRIPTION) > 90)  THEN
        RAISE DESCRIPTION_TOO_LONG;
      END IF;
    ELSE
    END IF;
    SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;
    IF  (V_COUNTER > 0)  THEN
      RAISE THEME_DESC_NOT_UNIQUE;
    END IF;
    INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );
    IF  (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)  THEN
      INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );
    END IF;
  END IF;
  IF  (INSERTING OR UPDATING)  THEN
    IF  (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)  THEN
      SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';
      IF  (V_EVOLVED_NMP_CNT = 0)  THEN
        UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;
      END IF;
    ELSE
      IF  (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)  THEN
        UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;
      ELSE
        IF  (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)  THEN
          UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;
          UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;
        END IF;
      END IF;
    END IF;
    IF  (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))  THEN
      SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';
      IF  (V_EVOLVED_NMP_CNT > 0)  THEN
        UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';
      END IF;
    END IF;
  END IF;
  IF  (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')  THEN
    IF  (:NEW.PROPOSAL_ID IS NOT NULL)  THEN
      SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';
    END IF;
    IF  (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))  THEN
      IF  (:NEW.MOLECULE_ID IS NOT NULL)  THEN
        BEGIN
          SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE INVALID_MOLECULE_ID;
        END;
      END IF;
      INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );
    END IF;
  END IF;
  EXCEPTION
    WHEN ADMIN_UPDATE_ONLY THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN IN_PREP_NOT_PORTF_PROJ THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN IN_PREP_NOT_CLOSED THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN INVALID_MOLECULE_ID THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN SEC_MOL_LIST_NOT_EMPTY THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN INVALID_THEME_NO THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN DELETE_NO_MORE_POSSIBLE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEME_NO_ONLY_INSERT THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN DESCRIPTION_TOO_LONG THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEME_DESC_PROPOSAL_TOO_LONG THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEME_DESC_ALT_TOO_LONG THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEME_NO_CANNOT_BE_INSERTED THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ONLYONEOFFICIALCHANGEPERDAY THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN INSERTSMUSTBEOFFICIAL THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEMEDESCRIPTIONMANDATORY THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN THEME_DESC_NOT_UNIQUE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN PORTF_PROJ_MOL_CRE_ERR THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN DEBUGGING THEN
      RAISE_APPLICATION_ERROR(-20000, );
END;

-- End of generated SQL