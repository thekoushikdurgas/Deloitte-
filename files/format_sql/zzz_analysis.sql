-- Generated from JSON analysis
-- Generated on: 2025-08-28 03:15:39

DECLARE
  V_TRIGGER_NAME VARCHAR2(100) := 'COMPANY_ADDRESSES_IOF';
  CNTR PLS_INTEGER;
  V_USERID VARCHAR2(100);
  V_COUNTRY_CD CORE.COUNTRIES.COUNTRY_CD%TYPE;
  V_COMPANY_TYPE_CD CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE;
  V_VALID_FROM CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE;
  ERR_UPD EXCEPTION;
  ERR_INS EXCEPTION;
  ERR_CTRY_CHG EXCEPTION;
  ERR_NOT_ALLOWED_TO_INVALIDATE EXCEPTION;
  TEST_ERR EXCEPTION;
  ERR_INS_LEGAL_ADDR EXCEPTION;

BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
  IF  INSERTING  THEN
    IF  CNTR > 0  THEN
      RAISE ERR_INS;
    END IF;
  END IF;
  IF  INSERTING OR UPDATING  THEN
    SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
    IF  V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')  THEN
      RAISE ERR_INS_LEGAL_ADDR;
    END IF;
    IF  NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')  THEN
      IF  NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID  THEN
        RAISE ERR_CTRY_CHG;
      END IF;
      IF  CNTR = 0  THEN
        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
      ELSE
        IF  NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID  THEN
          MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
          SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
          IF  :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0  THEN
            SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
            IF  TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01'  THEN
            ELSE
            END IF;
            MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU();
            IF  V_COMPANY_TYPE_CD = 'L'  THEN
              FOR V_REC IN ( SELECT 1 FROM DUAL ) LOOP
              END LOOP;
            END IF;
          END IF;
        ELSE
          MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
        END IF;
      END IF;
    END IF;
    IF  NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')  THEN
      IF  CNTR = 0  THEN
        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
      ELSE
        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
      END IF;
    END IF;
  END IF;
  IF  DELETING  THEN
    IF  NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')  THEN
      RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;
    END IF;
    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS();
  END IF;
  EXCEPTION
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_CTRY_CHG THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN TEST_ERR THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_INS_LEGAL_ADDR THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_NOT_ALLOWED_TO_INVALIDATE THEN
      RAISE_APPLICATION_ERROR(-20000, );
END;

-- End of generated SQL