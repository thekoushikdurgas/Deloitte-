DO $$ DECLARE V_KEY_CONTACTS_LIST IRTT_MULTIROW_REC_C; L_ERROR_COUNTER PLS_INTEGER; ERR_EVENT_ID_REQUIRED EXCEPTION; ERR_DATE_FROM_AFTER_DATE_UNTIL EXCEPTION; ERR_DATE_RANGE_OVERLAP EXCEPTION; ERR_DO_NOT_MODIFY_PAST_DATA EXCEPTION; BEGIN IF  (INSERTING)  THEN -- Unknown statement type: unknown ELSIF (UPDATING) THEN IF  :NEW.EVENT_ID IS NULL  THEN RAISE ERR_EVENT_ID_REQUIRED; END IF; SELECT IRTT_MULTIROW_REC_T( UPPER(XT.USERID), TO_DATE(XT.VALID_FROM, MDM_UTIL_IRTT.CO_DD_MM_YYYY), TO_DATE(XT.VALID_TO, MDM_UTIL_IRTT.CO_DD_MM_YYYY)) BULK COLLECT INTO V_KEY_CONTACTS_LIST FROM XMLTABLE ('/rows/row' PASSING XMLTYPE (:NEW.KEY_CONTACTS_LIST) COLUMNS USERID VARCHAR2 (20) PATH 'field[1]', VALID_FROM VARCHAR2 (20) PATH 'field[2]', VALID_TO VARCHAR2 (20) PATH 'field[3]' ) XT; L_ERROR_COUNTER := 0; FOR R1 IN ( FOR R1 IN ( SELECT B.VALUE_CD AS USER_ID, B.DATE_FROM AS VALID_FROM, B.DATE_UNTIL AS VALID_UNTIL, E.USERID, E.TERMINATIONDAY FROM TABLE(V_KEY_CONTACTS_LIST) B LEFT OUTER JOIN V_ROCHE_EMPLOYEES_ALL E ON E.USERID = B. VALUE_CD ) LOOP END LOOP; IF  (L_ERROR_COUNTER > 0)  THEN RAISE_APPLICATION_ERROR(-20000, 'Correct your input, please.'); END IF; SELECT COUNT(1) INTO L_ERROR_COUNTER FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.DATE_FROM > NVL(XT.DATE_UNTIL, XT.DATE_FROM); IF  L_ERROR_COUNTER > 0  THEN RAISE ERR_DATE_FROM_AFTER_DATE_UNTIL; END IF; SELECT COUNT(CHK) INTO L_ERROR_COUNTER FROM ( SELECT XT.DATE_FROM, XT.DATE_UNTIL, WHEN XT.DATE_FROM <= LAG(NVL(XT.DATE_UNTIL, XT.DATE_FROM + 1)) OVER (ORDER BY XT.DATE_FROM) THEN 1 END CHK FROM TABLE(V_KEY_CONTACTS_LIST) XT ); IF  L_ERROR_COUNTER > 0  THEN RAISE ERR_DATE_RANGE_OVERLAP; END IF; SELECT COUNT(1) INTO L_ERROR_COUNTER FROM CFG.CFG_IRTT_EVENT_CONTACTS C LEFT JOIN TABLE(V_KEY_CONTACTS_LIST) XT ON C.USERID = XT.VALUE_CD AND C.VALID_FROM = XT.DATE_FROM WHERE C.EVENT_ID = :NEW.EVENT_ID AND C.VALID_FROM < TRUNC(SYSDATE) AND XT.DATE_FROM IS NULL; IF  L_ERROR_COUNTER > 0  THEN RAISE ERR_DO_NOT_MODIFY_PAST_DATA; END IF; DELETE FROM CFG.CFG_IRTT_EVENT_CONTACTS A WHERE A.EVENT_ID = :NEW.EVENT_ID AND NOT EXISTS ( SELECT 1 FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE A.USERID = XT.VALUE_CD AND A.VALID_FROM = XT.DATE_FROM ); MERGE INTO CFG.CFG_IRTT_EVENT_CONTACTS A USING ( SELECT XT.VALUE_CD USERID, XT.DATE_FROM VALID_FROM, XT.DATE_UNTIL VALID_TO FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.VALUE_CD IS NOT NULL ) B ON (A.EVENT_ID = :NEW.EVENT_ID AND A.USERID = B.USERID AND A.VALID_FROM = B.VALID_FROM) WHEN MATCHED THEN UPDATE SET A.VALID_TO = B.VALID_TO WHEN NOT MATCHED THEN INSERT( EVENT_ID, USERID, VALID_FROM, VALID_TO ) VALUES( :NEW.EVENT_ID, B.USERID, B.VALID_FROM, B.VALID_TO ); -- Unknown statement type: unknown -- Unknown statement type: unknown -- Unknown statement type: unknown -- Unknown statement type: unknown END IF; END; $$ LANGUAGE plpgsql;