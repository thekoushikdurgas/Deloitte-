-- Generated from JSON analysis
-- Generated on: 2025-08-28 03:15:39

DECLARE
  CNTR PLS_INTEGER;
  V_USERID VARCHAR2(100);
  V_REPORTING_ENTITY_CD CFG_V_REPORTING_ENTITIES.REPORTING_ENTITY_CD%TYPE;
  V_LEGAL_COMPANY_CD CFG_V_COMPANIES.LEGAL_COMPANY_CD%TYPE;
  V_OLD_LEGAL_COMPANY_CD CFG_V_COMPANIES.LEGAL_COMPANY_CD%TYPE := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG CFG_V_REPORTING_ENTITIES.CBC_FLAG%TYPE;
  V_ADDR_VALID_FROM_DATE CFG.CFG_V_COMPANY_ADDRESSES.VALID_FROM%TYPE;
  V_COUNTRY_CD CFG.CFG_V_COMPANY_ADDRESSES.COUNTRY_CD%TYPE;
  V_COMPANY_CODES_LIST VARCHAR2(200);
  V_TRIGGER_NAME CONSTANT VARCHAR2(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;

BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  IF  UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD  THEN
    RAISE ERR_UPD;
  END IF;
  IF  INSERTING  THEN
    SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF  CNTR > 0  THEN
      RAISE ERR_INS;
    END IF;
  END IF;
  IF  INSERTING OR UPDATING  THEN
    IF  :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL  THEN
    ELSE
    END IF;
    SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF  CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))  THEN
      RAISE INVALID_LEGAL_COMP;
    END IF;
    MDM_UTIL_COMPANIES.MODIFYCOMPANY();
    CASE
      ELSE
        NULL;
    END CASE;
    IF  NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y'  THEN
      SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF  CNTR > 0  THEN
        SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE CPY_IN_USE;
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);
    END IF;
    IF  :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D'  THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);
    END IF;
    IF  :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N'  THEN
      RAISE ERR_CPY_STILL_IN_SCOPE;
    END IF;
    IF  :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL  THEN
      RAISE ERR_CPY_STILL_IN_MFR;
    END IF;
    IF  :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y'  THEN
      RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;
    END IF;
    IF  NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B'  THEN
    ELSE
    END IF;
    IF  V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D'  THEN
      IF  (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))  THEN
        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        IF  NVL (V_REP_CBC_FLAG, 'N') = 'N'  THEN
          RAISE RU_NOT_IN_CBC_SCOPE;
        END IF;
        SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF  CNTR = 0  THEN
          RAISE ERR_NO_ADR;
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF  V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)  THEN
        END IF;
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU();
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU();
      END IF;
      IF  :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y'  THEN
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU();
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU();
      END IF;
    END IF;
    CASE
      ELSE
        NULL;
    END CASE;
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20000, );
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20000, );
END;

-- End of generated SQL