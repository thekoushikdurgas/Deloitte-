-- PostgreSQL Trigger for zzz_postgresql.json
-- Generated on: 2025-08-28 03:15:43

-- ON INSERT
DO $$
DECLARE
  V_TRIGGER_NAME varchar(100) := 'COMPANY_ADDRESSES_IOF';
  CNTR integer;
  V_USERID varchar(100);
  V_COUNTRY_CD TEXT;
  V_COMPANY_TYPE_CD TEXT;
  V_VALID_FROM TEXT;
  ERR_UPD EXCEPTION;
  ERR_INS EXCEPTION;
  ERR_CTRY_CHG EXCEPTION;
  ERR_NOT_ALLOWED_TO_INVALIDATE EXCEPTION;
  TEST_ERR EXCEPTION;
  ERR_INS_LEGAL_ADDR EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
  IF TRUE THEN
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = COALESCE( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
    IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN
      RAISE EXCEPTION 'The legal address cannot be inserted for this type of company';
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN
      IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) = COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
        RAISE EXCEPTION 'The company country modified but not the Valid From Date. Please update also the Valid From Date';
      END IF;
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) <> COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
          PERFORM mdm_util_addresses.modify_company_address();
          SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
          IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN
            SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
            IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN
            ELSE
            END IF;
            PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
            IF V_COMPANY_TYPE_CD = 'L' THEN
              FOR V_REC IN (SELECT 1;) LOOP
              END LOOP;
            END IF;
          END IF;
        ELSE
          PERFORM mdm_util_addresses.modify_company_address();
        END IF;
      END IF;
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        PERFORM mdm_util_addresses.modify_company_address();
      END IF;
    END IF;
  END IF;
  IF TRUE THEN
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN
      RAISE EXCEPTION 'It is not allowed to invalidate/delete this type of address';
    END IF;
    PERFORM mdm_util_addresses.modify_company_address();
  END IF;
  EXCEPTION
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CTRY_CHG THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN TEST_ERR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS_LEGAL_ADDR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NOT_ALLOWED_TO_INVALIDATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;

-- ON UPDATE
DO $$
DECLARE
  V_TRIGGER_NAME varchar(100) := 'COMPANY_ADDRESSES_IOF';
  CNTR integer;
  V_USERID varchar(100);
  V_COUNTRY_CD TEXT;
  V_COMPANY_TYPE_CD TEXT;
  V_VALID_FROM TEXT;
  ERR_UPD EXCEPTION;
  ERR_INS EXCEPTION;
  ERR_CTRY_CHG EXCEPTION;
  ERR_NOT_ALLOWED_TO_INVALIDATE EXCEPTION;
  TEST_ERR EXCEPTION;
  ERR_INS_LEGAL_ADDR EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
  IF TRUE THEN
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = COALESCE( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
    IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN
      RAISE EXCEPTION 'The legal address cannot be inserted for this type of company';
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN
      IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) = COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
        RAISE EXCEPTION 'The company country modified but not the Valid From Date. Please update also the Valid From Date';
      END IF;
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) <> COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
          PERFORM mdm_util_addresses.modify_company_address();
          SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
          IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN
            SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
            IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN
            ELSE
            END IF;
            PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
            IF V_COMPANY_TYPE_CD = 'L' THEN
              FOR V_REC IN (SELECT 1;) LOOP
              END LOOP;
            END IF;
          END IF;
        ELSE
          PERFORM mdm_util_addresses.modify_company_address();
        END IF;
      END IF;
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        PERFORM mdm_util_addresses.modify_company_address();
      END IF;
    END IF;
  END IF;
  IF TRUE THEN
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN
      RAISE EXCEPTION 'It is not allowed to invalidate/delete this type of address';
    END IF;
    PERFORM mdm_util_addresses.modify_company_address();
  END IF;
  EXCEPTION
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CTRY_CHG THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN TEST_ERR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS_LEGAL_ADDR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NOT_ALLOWED_TO_INVALIDATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;

-- ON DELETE
DO $$
DECLARE
  V_TRIGGER_NAME varchar(100) := 'COMPANY_ADDRESSES_IOF';
  CNTR integer;
  V_USERID varchar(100);
  V_COUNTRY_CD TEXT;
  V_COMPANY_TYPE_CD TEXT;
  V_VALID_FROM TEXT;
  ERR_UPD EXCEPTION;
  ERR_INS EXCEPTION;
  ERR_CTRY_CHG EXCEPTION;
  ERR_NOT_ALLOWED_TO_INVALIDATE EXCEPTION;
  TEST_ERR EXCEPTION;
  ERR_INS_LEGAL_ADDR EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
  IF TRUE THEN
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = COALESCE( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
    IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN
      RAISE EXCEPTION 'The legal address cannot be inserted for this type of company';
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN
      IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) = COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
        RAISE EXCEPTION 'The company country modified but not the Valid From Date. Please update also the Valid From Date';
      END IF;
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        IF COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) <> COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN
          PERFORM mdm_util_addresses.modify_company_address();
          SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
          IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN
            SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
            IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN
            ELSE
            END IF;
            PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
            IF V_COMPANY_TYPE_CD = 'L' THEN
              FOR V_REC IN (SELECT 1;) LOOP
              END LOOP;
            END IF;
          END IF;
        ELSE
          PERFORM mdm_util_addresses.modify_company_address();
        END IF;
      END IF;
    END IF;
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN
      IF CNTR = 0 THEN
        PERFORM mdm_util_addresses.modify_company_address();
      ELSE
        PERFORM mdm_util_addresses.modify_company_address();
      END IF;
    END IF;
  END IF;
  IF TRUE THEN
    IF COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN
      RAISE EXCEPTION 'It is not allowed to invalidate/delete this type of address';
    END IF;
    PERFORM mdm_util_addresses.modify_company_address();
  END IF;
  EXCEPTION
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CTRY_CHG THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN TEST_ERR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS_LEGAL_ADDR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NOT_ALLOWED_TO_INVALIDATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;
