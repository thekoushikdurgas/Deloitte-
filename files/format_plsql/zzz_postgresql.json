{
    "on_insert": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN   V_MARKET_AUTH_NO := TRIM (REPLACE ( :NEW.MARKET_AUTH_NO, CHR (9), ''));   IF :OLD._FLAG = 'Y' THEN  SELECT COUNT (MAU_ID) INTO V_RECORD_COUNT FROM COA_MARKET_AUTHS_HIS A WHERE A.ACTION = 'D' AND A.MAU_ID = :OLD.MAU_ID;  IF V_RECORD_COUNT > 0 THEN    RAISE E_ALREADY_DELETED;  END IF;   END IF;   IF :NEW._FLAG = 'Y' THEN  IF ( :NEW.AUDIT_COMMENT = :OLD.AUDIT_COMMENT) THEN    RAISE E_DELETE_COA;  END IF;   END IF; DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN  SELECT CLASS_CD INTO P_CLASS FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO;  IF P_CLASS NOT IN ('FIN') THEN    RAISE E_MATL_CLASS;  END IF;   EXCEPTION  WHEN NO_DATA_FOUND THEN    RAISE E_MATL; END; $$ LANGUAGE plpgsql;   SELECT COUNT (*) INTO V_MATL_COUNT FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO ;   IF V_MATL_COUNT = 0 THEN  RAISE E_MATL_NO;   END IF;   IF TRUE THEN  V_MATL_COUNT := 0;  SELECT COUNT (*) INTO V_MATL_COUNT FROM COA_MARKET_AUTHS WHERE MATL_NO = :NEW.MATL_NO AND COUNTRY_ID = :NEW.COUNTRY_ID;  IF V_MATL_COUNT = 1 THEN    RAISE E_INSERT_COA;  END IF;  INSERT INTO COA_MARKET_AUTHS ( MAU_ID, COUNTRY_ID, MATL_NO, MARKET_AUTH_NO, AUDIT_COMMENT, DEFINED_IND, VALID_IND ) VALUES ( :NEW.MAU_ID, :NEW.COUNTRY_ID, :NEW.MATL_NO, V_MARKET_AUTH_NO, :NEW.AUDIT_COMMENT, 'N', :NEW.VALID_IND );   END IF; EXCEPTION   WHEN E_INSERT_COA THEN  RAISE_APPLICATION_ERROR(-20101, V_TRIGGER_NAME);   WHEN E_UPDATE_COA THEN  RAISE_APPLICATION_ERROR(-20102, V_TRIGGER_NAME);   WHEN E_MATL_CLASS THEN  RAISE_APPLICATION_ERROR(-20103, V_TRIGGER_NAME);   WHEN E_CHANGES_USER THEN  RAISE_APPLICATION_ERROR(-20104, V_TRIGGER_NAME);   WHEN E_MATL_NO THEN  RAISE_APPLICATION_ERROR(-20105, V_TRIGGER_NAME);   WHEN E_AUDIT_COMMENT THEN  RAISE_APPLICATION_ERROR(-20106, V_TRIGGER_NAME);   WHEN E_DEFINED_USER THEN  RAISE_APPLICATION_ERROR(-20107, V_TRIGGER_NAME);   WHEN E_DELETE_COA THEN  RAISE_APPLICATION_ERROR(-20108, V_TRIGGER_NAME);   WHEN E_MATL THEN  RAISE_APPLICATION_ERROR(-20109, V_TRIGGER_NAME);   WHEN E_ALREADY_DELETED THEN  RAISE_APPLICATION_ERROR(-20400, 'This record has already been deleted and cannot be changed anymore'); END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_update": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN   V_MARKET_AUTH_NO := TRIM (REPLACE ( :NEW.MARKET_AUTH_NO, CHR (9), ''));   IF :OLD._FLAG = 'Y' THEN  SELECT COUNT (MAU_ID) INTO V_RECORD_COUNT FROM COA_MARKET_AUTHS_HIS A WHERE A.ACTION = 'D' AND A.MAU_ID = :OLD.MAU_ID;  IF V_RECORD_COUNT > 0 THEN    RAISE E_ALREADY_DELETED;  END IF;   END IF;   IF :NEW._FLAG = 'Y' THEN  IF ( :NEW.AUDIT_COMMENT = :OLD.AUDIT_COMMENT) THEN    RAISE E_DELETE_COA;  END IF;   END IF; DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN  SELECT CLASS_CD INTO P_CLASS FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO;  IF P_CLASS NOT IN ('FIN') THEN    RAISE E_MATL_CLASS;  END IF;   EXCEPTION  WHEN NO_DATA_FOUND THEN    RAISE E_MATL; END; $$ LANGUAGE plpgsql;   SELECT COUNT (*) INTO V_MATL_COUNT FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO ;   IF V_MATL_COUNT = 0 THEN  RAISE E_MATL_NO;   END IF;   IF TRUE THEN  IF ( :OLD.MATL_NO <> :NEW.MATL_NO OR :NEW.COUNTRY_ID <> :OLD.COUNTRY_ID) THEN    RAISE E_UPDATE_COA;  END IF;  IF :NEW.DEFINED_IND = :OLD.DEFINED_IND THEN    IF :NEW.AUDIT_COMMENT IS NULL THEN   RAISE E_AUDIT_COMMENT;    END IF;  END IF;  IF ( :NEW.DEFINED_IND = 'Y' AND :OLD.DEFINED_IND = 'N') AND (COA_SECURITY.GET_USERID = COALESCE ( :OLD.UPD_USER, :OLD.INS_USER)) THEN    RAISE E_DEFINED_USER;  END IF;  IF ( :NEW.DEFINED_IND = 'Y' AND :OLD.DEFINED_IND = 'N') AND ( :OLD.MATL_NO <> :NEW.MATL_NO OR :OLD.MARKET_AUTH_NO <> V_MARKET_AUTH_NO OR :OLD.AUDIT_COMMENT <> :NEW.AUDIT_COMMENT OR :OLD.VALID_IND <> :NEW.VALID_IND) THEN    RAISE E_CHANGES_USER;  END IF;  IF ( :OLD.DEFINED_IND = 'N' AND :NEW.DEFINED_IND = 'Y') AND (COA_SECURITY.GET_USERID <> COALESCE ( :OLD.UPD_USER, :OLD.INS_USER)) AND ( :OLD.MATL_NO = :NEW.MATL_NO OR :OLD.MARKET_AUTH_NO = V_MARKET_AUTH_NO OR :OLD.AUDIT_COMMENT = :NEW.AUDIT_COMMENT OR :OLD.VALID_IND = :NEW.VALID_IND) THEN    P_APPROVAL_USER := COA_SECURITY.GET_USERID;    P_APPROVAL_DATE := CURRENT_TIMESTAMP;    UPDATE COA_MARKET_AUTHS SET DEFINED_IND = 'Y', DEF_DATE = CURRENT_TIMESTAMP , DEF_USER = COA_UTIL.GET_CHANGING_USER WHERE MAU_ID = :NEW.MAU_ID;  ELSE    UPDATE COA_MARKET_AUTHS SET COUNTRY_ID = :NEW.COUNTRY_ID, MATL_NO = :NEW.MATL_NO, MARKET_AUTH_NO = V_MARKET_AUTH_NO, AUDIT_COMMENT = :NEW.AUDIT_COMMENT, DEFINED_IND = 'N', VALID_IND = :NEW.VALID_IND, UPD_NO = COALESCE ( UPD_NO, 0 ) + 1, DEF_DATE = NULL, DEF_USER = NULL WHERE MAU_ID = :NEW.MAU_ID;    IF :NEW._FLAG = 'Y' THEN   DELETE FROM COA_MARKET_AUTHS WHERE COUNTRY_ID = :NEW.COUNTRY_ID AND MATL_NO = :NEW.MATL_NO;    END IF;  END IF;   END IF; EXCEPTION   WHEN E_INSERT_COA THEN  RAISE_APPLICATION_ERROR(-20101, V_TRIGGER_NAME);   WHEN E_UPDATE_COA THEN  RAISE_APPLICATION_ERROR(-20102, V_TRIGGER_NAME);   WHEN E_MATL_CLASS THEN  RAISE_APPLICATION_ERROR(-20103, V_TRIGGER_NAME);   WHEN E_CHANGES_USER THEN  RAISE_APPLICATION_ERROR(-20104, V_TRIGGER_NAME);   WHEN E_MATL_NO THEN  RAISE_APPLICATION_ERROR(-20105, V_TRIGGER_NAME);   WHEN E_AUDIT_COMMENT THEN  RAISE_APPLICATION_ERROR(-20106, V_TRIGGER_NAME);   WHEN E_DEFINED_USER THEN  RAISE_APPLICATION_ERROR(-20107, V_TRIGGER_NAME);   WHEN E_DELETE_COA THEN  RAISE_APPLICATION_ERROR(-20108, V_TRIGGER_NAME);   WHEN E_MATL THEN  RAISE_APPLICATION_ERROR(-20109, V_TRIGGER_NAME);   WHEN E_ALREADY_DELETED THEN  RAISE_APPLICATION_ERROR(-20400, 'This record has already been deleted and cannot be changed anymore'); END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_delete": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN   V_MARKET_AUTH_NO := TRIM (REPLACE ( :NEW.MARKET_AUTH_NO, CHR (9), ''));   IF :OLD._FLAG = 'Y' THEN  SELECT COUNT (MAU_ID) INTO V_RECORD_COUNT FROM COA_MARKET_AUTHS_HIS A WHERE A.ACTION = 'D' AND A.MAU_ID = :OLD.MAU_ID;  IF V_RECORD_COUNT > 0 THEN    RAISE E_ALREADY_DELETED;  END IF;   END IF;   IF :NEW._FLAG = 'Y' THEN  IF ( :NEW.AUDIT_COMMENT = :OLD.AUDIT_COMMENT) THEN    RAISE E_DELETE_COA;  END IF;   END IF; DO $$ DECLARE V_COUNT integer := '0'; V_MATL_COUNT integer := '0'; V_RECORD_COUNT integer := '0'; P_CLASS V_MATERIALS.CLASS_CD%TYPE; P_APPROVAL_USER VARCHAR2(30); P_APPROVAL_DATE date; V_MARKET_AUTH_NO COA.COA_MARKET_AUTHS.MARKET_AUTH_NO%TYPE; V_TRIGGER_NAME VARCHAR2(30) := ''COA_V_MARKET_AUTHS_IOF''; BEGIN  SELECT CLASS_CD INTO P_CLASS FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO;  IF P_CLASS NOT IN ('FIN') THEN    RAISE E_MATL_CLASS;  END IF;   EXCEPTION  WHEN NO_DATA_FOUND THEN    RAISE E_MATL; END; $$ LANGUAGE plpgsql;   SELECT COUNT (*) INTO V_MATL_COUNT FROM V_MATERIALS WHERE MATL_NO = :NEW.MATL_NO ;   IF V_MATL_COUNT = 0 THEN  RAISE E_MATL_NO;   END IF; EXCEPTION   WHEN E_INSERT_COA THEN  RAISE_APPLICATION_ERROR(-20101, V_TRIGGER_NAME);   WHEN E_UPDATE_COA THEN  RAISE_APPLICATION_ERROR(-20102, V_TRIGGER_NAME);   WHEN E_MATL_CLASS THEN  RAISE_APPLICATION_ERROR(-20103, V_TRIGGER_NAME);   WHEN E_CHANGES_USER THEN  RAISE_APPLICATION_ERROR(-20104, V_TRIGGER_NAME);   WHEN E_MATL_NO THEN  RAISE_APPLICATION_ERROR(-20105, V_TRIGGER_NAME);   WHEN E_AUDIT_COMMENT THEN  RAISE_APPLICATION_ERROR(-20106, V_TRIGGER_NAME);   WHEN E_DEFINED_USER THEN  RAISE_APPLICATION_ERROR(-20107, V_TRIGGER_NAME);   WHEN E_DELETE_COA THEN  RAISE_APPLICATION_ERROR(-20108, V_TRIGGER_NAME);   WHEN E_MATL THEN  RAISE_APPLICATION_ERROR(-20109, V_TRIGGER_NAME);   WHEN E_ALREADY_DELETED THEN  RAISE_APPLICATION_ERROR(-20400, 'This record has already been deleted and cannot be changed anymore'); END; $$ LANGUAGE plpgsql;"
        }
    ]
}