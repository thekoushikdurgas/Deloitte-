{
    "on_insert": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(40) := ''BPA_POST_CD_RULES_IOF''; CNTR integer; V_RULE_ID V_BPA_POSTAL_CODE_RULES.RULE_ID%TYPE; V_PATTERN_ID V_BPA_POSTAL_CODE_PATTERNS.PATTERN_ID%TYPE; V_PATTERN V_BPA_POSTAL_CODE_PATTERNS.PATTERN%TYPE; V_ALLOWED_PATTERN VARCHAR2(30) := ''^[A|9|-| ]*$''; BEGIN V_PATTERN := :NEW.PATTERN; CASE WHEN V_PATTERN IS NOT NULL THEN IF :NEW.RULE_FLAG = 'N' THEN RAISE EXCEPTION ERR_NULL; END IF; IF NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; ELSE IF :NEW.RULE_FLAG = 'M' THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; END CASE; SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD; IF CNTR = 0 THEN SELECT COALESCE (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES; INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG ); END IF; SELECT COALESCE (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS; IF V_PATTERN IS NOT NULL THEN INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND ); END IF; END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_update": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(40) := ''BPA_POST_CD_RULES_IOF''; CNTR integer; V_RULE_ID V_BPA_POSTAL_CODE_RULES.RULE_ID%TYPE; V_PATTERN_ID V_BPA_POSTAL_CODE_PATTERNS.PATTERN_ID%TYPE; V_PATTERN V_BPA_POSTAL_CODE_PATTERNS.PATTERN%TYPE; V_ALLOWED_PATTERN VARCHAR2(30) := ''^[A|9|-| ]*$''; BEGIN V_PATTERN := :NEW.PATTERN; CASE WHEN V_PATTERN IS NOT NULL THEN IF :NEW.RULE_FLAG = 'N' THEN RAISE EXCEPTION ERR_NULL; END IF; IF NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; ELSE IF :NEW.RULE_FLAG = 'M' THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; END CASE; SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD; IF CNTR = 0 THEN SELECT COALESCE (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES; INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG ); END IF; SELECT COALESCE (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS; IF TRUE THEN IF :OLD.RULE_FLAG != :NEW.RULE_FLAG THEN UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID; END IF; IF :NEW.PATTERN_ID IS NOT NULL THEN IF V_PATTERN IS NOT NULL THEN UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID; END IF; END IF; END IF; END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_delete": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(40) := ''BPA_POST_CD_RULES_IOF''; CNTR integer; V_RULE_ID V_BPA_POSTAL_CODE_RULES.RULE_ID%TYPE; V_PATTERN_ID V_BPA_POSTAL_CODE_PATTERNS.PATTERN_ID%TYPE; V_PATTERN V_BPA_POSTAL_CODE_PATTERNS.PATTERN%TYPE; V_ALLOWED_PATTERN VARCHAR2(30) := ''^[A|9|-| ]*$''; BEGIN V_PATTERN := :NEW.PATTERN; CASE WHEN V_PATTERN IS NOT NULL THEN IF :NEW.RULE_FLAG = 'N' THEN RAISE EXCEPTION ERR_NULL; END IF; IF NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; ELSE IF :NEW.RULE_FLAG = 'M' THEN RAISE EXCEPTION ERR_POSTAL_CODE; END IF; END CASE; SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD; IF CNTR = 0 THEN SELECT COALESCE (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES; INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG ); END IF; SELECT COALESCE (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS; IF TRUE THEN DELETE FROM GMD.V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :OLD.PATTERN_ID; END IF; END; $$ LANGUAGE plpgsql;"
        }
    ]
}