-- PostgreSQL Trigger for ccc_postgresql.json
-- Generated on: 2025-09-02 13:53:58

-- ON INSERT
-- Generated from JSON analysis for PostgreSQL
-- Generated on: 2025-09-02 13:53:55

DO $$
DECLARE
BEGIN
  IF TRUE THEN
    IF :NEW.XRT_CD NOT LIKE 'G0%' THEN
      INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, COALESCE(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
ELSE
      INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
END IF;
ELSIF (UPDATING) THEN
    IF  :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR COALESCE(:NEW.PLAN_PERIOD, '-') != COALESCE(:OLD.PLAN_PERIOD, '-')  THEN
      RAISE E_UPD;
END IF;
IF  :NEW.XRT_CD NOT LIKE 'G0%'  THEN
      UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;
ELSE
      UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;
END IF;
END IF;
EXCEPTION
  WHEN E_UPD THEN
    RAISE_APPLICATION_ERROR(-20101, 'CER_V_EXCHANGE_RATES_IOF');
END;
$$ LANGUAGE plpgsql;
-- End of generated PostgreSQL SQL;

-- ON UPDATE
-- Generated from JSON analysis for PostgreSQL
-- Generated on: 2025-09-02 13:53:55

DO $$
DECLARE
BEGIN
  IF TRUE THEN
    IF :NEW.XRT_CD NOT LIKE 'G0%' THEN
      INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, COALESCE(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
ELSE
      INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
END IF;
ELSIF (UPDATING) THEN
    IF  :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR COALESCE(:NEW.PLAN_PERIOD, '-') != COALESCE(:OLD.PLAN_PERIOD, '-')  THEN
      RAISE E_UPD;
END IF;
IF  :NEW.XRT_CD NOT LIKE 'G0%'  THEN
      UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;
ELSE
      UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;
END IF;
END IF;
EXCEPTION
  WHEN E_UPD THEN
    RAISE_APPLICATION_ERROR(-20101, 'CER_V_EXCHANGE_RATES_IOF');
END;
$$ LANGUAGE plpgsql;
-- End of generated PostgreSQL SQL;

-- ON DELETE
-- Generated from JSON analysis for PostgreSQL
-- Generated on: 2025-09-02 13:53:55

DO $$
DECLARE
BEGIN
  IF TRUE THEN
    IF :NEW.XRT_CD NOT LIKE 'G0%' THEN
      INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, COALESCE(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
ELSE
      INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );
END IF;
ELSIF (UPDATING) THEN
    IF  :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR COALESCE(:NEW.PLAN_PERIOD, '-') != COALESCE(:OLD.PLAN_PERIOD, '-')  THEN
      RAISE E_UPD;
END IF;
IF  :NEW.XRT_CD NOT LIKE 'G0%'  THEN
      UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;
ELSE
      UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;
END IF;
END IF;
EXCEPTION
  WHEN E_UPD THEN
    RAISE_APPLICATION_ERROR(-20101, 'CER_V_EXCHANGE_RATES_IOF');
END;
$$ LANGUAGE plpgsql;
-- End of generated PostgreSQL SQL;
