-- PostgreSQL Trigger for aaa_postgresql.json
-- Generated on: 2025-08-22 00:35:22

-- ON INSERT
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    V_USERID := TXO_UTIL.GET_USERID;
    EXCEPTION
      WHEN OTHERS THEN
        V_USERID := USER;
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
      V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;
    ELSE
      V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;
    END IF;
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    MDM_UTIL_COMPANIES.MODIFYCOMPANY ( I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID );
    CASE
      WHEN COALESCE(:OLD.REPORTING_ENTITY_CD, '-') != COALESCE(:NEW.REPORTING_ENTITY_CD, '-') CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD; WHEN ( :NEW.VALID_FROM_DATE IS NULL THEN
        OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), THEN;
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      CNTR := 0;
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
      V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);
    ELSE
      V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' SELECT FROM WHERE IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
        CBC_FLAG INTO V_REP_CBC_FLAG CFG_V_REPORTING_ENTITIES REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        CNTR := 0;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
          V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);
        END IF;
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE' );
      END IF;
    END IF;
    CASE
      WHEN (COALESCE(:OLD.OFFICIAL_NAME, '-') != COALESCE(:NEW.OFFICIAL_NAME, '-')) THEN
        AND :OLD.OFFICIAL_NAME IS NOT NULL MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( :NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID);
      ELSE
        NULL;
    END CASE;
  ELSIF TRUE THEN
    RAISE EXCEPTION 'ERR_DEL';
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20110, V_TRIGGER_NAME);
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20111, V_TRIGGER_NAME);
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20114, V_TRIGGER_NAME);
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20122, 'Please insert : Rep. Code Assignm. Valid from Date');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20124, 'The CBC/GBE Scope must be set to No before deactivating the company');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || V_COMPANY_CODES_LIST);
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20126, V_LEGAL_COMPANY_CD || ' is not a valid Legal Company Code');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20127, 'An Associate Entity cannot be in CBC/GBE Scope!');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');
END;
END $$;

-- ON UPDATE
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    V_USERID := TXO_UTIL.GET_USERID;
    EXCEPTION
      WHEN OTHERS THEN
        V_USERID := USER;
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
      V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;
    ELSE
      V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;
    END IF;
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    MDM_UTIL_COMPANIES.MODIFYCOMPANY ( I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID );
    CASE
      WHEN COALESCE(:OLD.REPORTING_ENTITY_CD, '-') != COALESCE(:NEW.REPORTING_ENTITY_CD, '-') CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD; WHEN ( :NEW.VALID_FROM_DATE IS NULL THEN
        OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), THEN;
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      CNTR := 0;
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
      V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);
    ELSE
      V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' SELECT FROM WHERE IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
        CBC_FLAG INTO V_REP_CBC_FLAG CFG_V_REPORTING_ENTITIES REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        CNTR := 0;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
          V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);
        END IF;
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE' );
      END IF;
    END IF;
    CASE
      WHEN (COALESCE(:OLD.OFFICIAL_NAME, '-') != COALESCE(:NEW.OFFICIAL_NAME, '-')) THEN
        AND :OLD.OFFICIAL_NAME IS NOT NULL MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( :NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID);
      ELSE
        NULL;
    END CASE;
  ELSIF TRUE THEN
    RAISE EXCEPTION 'ERR_DEL';
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20110, V_TRIGGER_NAME);
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20111, V_TRIGGER_NAME);
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20114, V_TRIGGER_NAME);
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20122, 'Please insert : Rep. Code Assignm. Valid from Date');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20124, 'The CBC/GBE Scope must be set to No before deactivating the company');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || V_COMPANY_CODES_LIST);
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20126, V_LEGAL_COMPANY_CD || ' is not a valid Legal Company Code');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20127, 'An Associate Entity cannot be in CBC/GBE Scope!');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');
END;
END $$;

-- ON DELETE
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    V_USERID := TXO_UTIL.GET_USERID;
    EXCEPTION
      WHEN OTHERS THEN
        V_USERID := USER;
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
      V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;
    ELSE
      V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;
    END IF;
    CNTR := 0;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    MDM_UTIL_COMPANIES.MODIFYCOMPANY ( I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID );
    CASE
      WHEN COALESCE(:OLD.REPORTING_ENTITY_CD, '-') != COALESCE(:NEW.REPORTING_ENTITY_CD, '-') CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) CURRENT_TIMESTAMP + 100) != CURRENT_TIMESTAMP + 100) V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD; WHEN ( :NEW.VALID_FROM_DATE IS NULL THEN
        OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), THEN;
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      CNTR := 0;
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
      V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);
    ELSE
      V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' SELECT FROM WHERE IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
        CBC_FLAG INTO V_REP_CBC_FLAG CFG_V_REPORTING_ENTITIES REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        CNTR := 0;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
          V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);
        END IF;
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE' );
        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE' );
      END IF;
    END IF;
    CASE
      WHEN (COALESCE(:OLD.OFFICIAL_NAME, '-') != COALESCE(:NEW.OFFICIAL_NAME, '-')) THEN
        AND :OLD.OFFICIAL_NAME IS NOT NULL MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( :NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID);
      ELSE
        NULL;
    END CASE;
  ELSIF TRUE THEN
    RAISE EXCEPTION 'ERR_DEL';
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20110, V_TRIGGER_NAME);
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20111, V_TRIGGER_NAME);
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20114, V_TRIGGER_NAME);
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20122, 'Please insert : Rep. Code Assignm. Valid from Date');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20124, 'The CBC/GBE Scope must be set to No before deactivating the company');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || V_COMPANY_CODES_LIST);
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20126, V_LEGAL_COMPANY_CD || ' is not a valid Legal Company Code');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20127, 'An Associate Entity cannot be in CBC/GBE Scope!');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');
END;
END $$;
