{
    "on_insert": [
        {
            "type": "sql",
            "sql": "DO $$\nDECLARE\n  CNTR integer;\n  V_USERID varchar(100);\n  V_REPORTING_ENTITY_CD TEXT;\n  V_LEGAL_COMPANY_CD TEXT;\n  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);\n  V_REP_CBC_FLAG TEXT;\n  V_ADDR_VALID_FROM_DATE TEXT;\n  V_COUNTRY_CD TEXT;\n  V_COMPANY_CODES_LIST varchar(200);\n  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';\n  ERR_INS EXCEPTION;\n  ERR_DEL EXCEPTION;\n  ERR_UPD EXCEPTION;\n  ERR_VALID_FROM_DATE EXCEPTION;\n  RU_NOT_IN_CBC_SCOPE EXCEPTION;\n  ERR_NO_ADR EXCEPTION;\n  ERR_CPY_STILL_IN_SCOPE EXCEPTION;\n  CPY_IN_USE EXCEPTION;\n  INVALID_LEGAL_COMP EXCEPTION;\n  ERR_CPY_STILL_IN_MFR EXCEPTION;\n  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;\nBEGIN\n  BEGIN\n    EXCEPTION\n      WHEN OTHERS THEN\n  END;\n  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN\n    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';\n  END IF;\n  IF TRUE THEN\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;\n    IF CNTR > 0 THEN\n      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';\n    END IF;\n  END IF;\n  IF TRUE THEN\n    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN\n    ELSE\n    END IF;\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;\n    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN\n      RAISE EXCEPTION 'INVALID_LEGAL_COMP';\n    END IF;\n    PERFORM mdm_util_companies.modifycompany();\n    CASE\n      WHEN  THEN\n        CASE\n          WHEN  THEN\n            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';\n          ELSE\n            NULL;\n        END CASE;\n        PERFORM mdm_util_companies.modifycompanymapping_mfr();\n      ELSE\n        NULL;\n    END CASE;\n    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN\n      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n      IF CNTR > 0 THEN\n        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n        RAISE EXCEPTION 'CPY_IN_USE';\n      END IF;\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';\n    END IF;\n    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';\n    END IF;\n    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN\n      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';\n    END IF;\n    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN\n    ELSE\n    END IF;\n    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN\n      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN\n        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;\n        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN\n          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';\n        END IF;\n        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF CNTR = 0 THEN\n          RAISE EXCEPTION 'ERR_NO_ADR';\n        END IF;\n        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN\n        END IF;\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n    END IF;\n    CASE\n      WHEN  THEN\n        PERFORM mdmappl.mdm_util_companies.modifycompanyname();\n      ELSE\n        NULL;\n    END CASE;\n  END IF;\n  EXCEPTION\n    WHEN ERR_DEL THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_UPD THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_INS THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_VALID_FROM_DATE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN RU_NOT_IN_CBC_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_NO_ADR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN CPY_IN_USE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN INVALID_LEGAL_COMP THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_MFR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\nEND;\nEND $$;"
        }
    ],
    "on_update": [
        {
            "type": "sql",
            "sql": "DO $$\nDECLARE\n  CNTR integer;\n  V_USERID varchar(100);\n  V_REPORTING_ENTITY_CD TEXT;\n  V_LEGAL_COMPANY_CD TEXT;\n  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);\n  V_REP_CBC_FLAG TEXT;\n  V_ADDR_VALID_FROM_DATE TEXT;\n  V_COUNTRY_CD TEXT;\n  V_COMPANY_CODES_LIST varchar(200);\n  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';\n  ERR_INS EXCEPTION;\n  ERR_DEL EXCEPTION;\n  ERR_UPD EXCEPTION;\n  ERR_VALID_FROM_DATE EXCEPTION;\n  RU_NOT_IN_CBC_SCOPE EXCEPTION;\n  ERR_NO_ADR EXCEPTION;\n  ERR_CPY_STILL_IN_SCOPE EXCEPTION;\n  CPY_IN_USE EXCEPTION;\n  INVALID_LEGAL_COMP EXCEPTION;\n  ERR_CPY_STILL_IN_MFR EXCEPTION;\n  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;\nBEGIN\n  BEGIN\n    EXCEPTION\n      WHEN OTHERS THEN\n  END;\n  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN\n    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';\n  END IF;\n  IF TRUE THEN\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;\n    IF CNTR > 0 THEN\n      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';\n    END IF;\n  END IF;\n  IF TRUE THEN\n    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN\n    ELSE\n    END IF;\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;\n    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN\n      RAISE EXCEPTION 'INVALID_LEGAL_COMP';\n    END IF;\n    PERFORM mdm_util_companies.modifycompany();\n    CASE\n      WHEN  THEN\n        CASE\n          WHEN  THEN\n            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';\n          ELSE\n            NULL;\n        END CASE;\n        PERFORM mdm_util_companies.modifycompanymapping_mfr();\n      ELSE\n        NULL;\n    END CASE;\n    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN\n      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n      IF CNTR > 0 THEN\n        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n        RAISE EXCEPTION 'CPY_IN_USE';\n      END IF;\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';\n    END IF;\n    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';\n    END IF;\n    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN\n      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';\n    END IF;\n    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN\n    ELSE\n    END IF;\n    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN\n      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN\n        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;\n        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN\n          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';\n        END IF;\n        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF CNTR = 0 THEN\n          RAISE EXCEPTION 'ERR_NO_ADR';\n        END IF;\n        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN\n        END IF;\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n    END IF;\n    CASE\n      WHEN  THEN\n        PERFORM mdmappl.mdm_util_companies.modifycompanyname();\n      ELSE\n        NULL;\n    END CASE;\n  END IF;\n  EXCEPTION\n    WHEN ERR_DEL THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_UPD THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_INS THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_VALID_FROM_DATE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN RU_NOT_IN_CBC_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_NO_ADR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN CPY_IN_USE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN INVALID_LEGAL_COMP THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_MFR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\nEND;\nEND $$;"
        }
    ],
    "on_delete": [
        {
            "type": "sql",
            "sql": "DO $$\nDECLARE\n  CNTR integer;\n  V_USERID varchar(100);\n  V_REPORTING_ENTITY_CD TEXT;\n  V_LEGAL_COMPANY_CD TEXT;\n  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);\n  V_REP_CBC_FLAG TEXT;\n  V_ADDR_VALID_FROM_DATE TEXT;\n  V_COUNTRY_CD TEXT;\n  V_COMPANY_CODES_LIST varchar(200);\n  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';\n  ERR_INS EXCEPTION;\n  ERR_DEL EXCEPTION;\n  ERR_UPD EXCEPTION;\n  ERR_VALID_FROM_DATE EXCEPTION;\n  RU_NOT_IN_CBC_SCOPE EXCEPTION;\n  ERR_NO_ADR EXCEPTION;\n  ERR_CPY_STILL_IN_SCOPE EXCEPTION;\n  CPY_IN_USE EXCEPTION;\n  INVALID_LEGAL_COMP EXCEPTION;\n  ERR_CPY_STILL_IN_MFR EXCEPTION;\n  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;\nBEGIN\n  BEGIN\n    EXCEPTION\n      WHEN OTHERS THEN\n  END;\n  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN\n    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';\n  END IF;\n  IF TRUE THEN\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;\n    IF CNTR > 0 THEN\n      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';\n    END IF;\n  END IF;\n  IF TRUE THEN\n    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN\n    ELSE\n    END IF;\n    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;\n    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN\n      RAISE EXCEPTION 'INVALID_LEGAL_COMP';\n    END IF;\n    PERFORM mdm_util_companies.modifycompany();\n    CASE\n      WHEN  THEN\n        CASE\n          WHEN  THEN\n            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';\n          ELSE\n            NULL;\n        END CASE;\n        PERFORM mdm_util_companies.modifycompanymapping_mfr();\n      ELSE\n        NULL;\n    END CASE;\n    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN\n      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n      IF CNTR > 0 THEN\n        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';\n        RAISE EXCEPTION 'CPY_IN_USE';\n      END IF;\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN\n      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);\n    END IF;\n    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';\n    END IF;\n    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN\n      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';\n    END IF;\n    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN\n      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';\n    END IF;\n    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN\n    ELSE\n    END IF;\n    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN\n      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN\n        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;\n        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN\n          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';\n        END IF;\n        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF CNTR = 0 THEN\n          RAISE EXCEPTION 'ERR_NO_ADR';\n        END IF;\n        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';\n        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN\n        END IF;\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();\n      END IF;\n    END IF;\n    CASE\n      WHEN  THEN\n        PERFORM mdmappl.mdm_util_companies.modifycompanyname();\n      ELSE\n        NULL;\n    END CASE;\n  END IF;\n  EXCEPTION\n    WHEN ERR_DEL THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_UPD THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_INS THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_VALID_FROM_DATE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN RU_NOT_IN_CBC_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_SCOPE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_NO_ADR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN CPY_IN_USE THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN INVALID_LEGAL_COMP THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\n    WHEN ERR_CPY_STILL_IN_MFR THEN\n      RAISE_APPLICATION_ERROR(-20000, '');\nEND;\nEND $$;"
        }
    ]
}