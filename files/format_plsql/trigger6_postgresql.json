{
    "on_insert": [
        {
            "type": "sql",
            "sql": "CREATE OR REPLACE FUNCTION trigger_function()\nRETURNS TRIGGER AS $$\nDECLARE\n   V_NO_UPDATE_TO_EVOLVED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_TERMINATED_TO_ACTIVE EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_EVOLVED_TO_TERMINATED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_EXPLORATORY_THEMENO_NOT_NULL EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_TRIGGER_NAME VARCHAR(100) := 'MDM_V_NEW_MEDICINE_PROPOSALS_IOF';"
        },
        {
            "type": "sql",
            "sql": "V_EVOLVED_THEME_NO TEXT;"
        },
        {
            "type": "sql",
            "sql": "V_PROPOSAL_ID NUMERIC;"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_ACTIVE VARCHAR(1) := 'A';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_EVOLVED VARCHAR(1) := 'E';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_TERMINATED VARCHAR(1) := 'T';"
        },
        {
            "type": "sql",
            "sql": "BEGIN\nBEGIN\n   V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_TO_EVOLVED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_EVOLVED_TO_TERMINATED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) THEN\n      V_EVOLVED_THEME_NO := NULL;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) THEN\n      RAISE EXCEPTION 'V_EXPLORATORY_THEMENO_NOT_NULL';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF TRUE THEN\n      V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;"
        },
        {
            "type": "sql",
            "sql": "INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );"
        },
        {
            "type": "sql",
            "sql": "IF :NEW.PARTNER_ID IS NOT NULL THEN\n         MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "EXCEPTION\n   WHEN DUP_VAL_ON_INDEX THEN\n      RAISE EXCEPTION -20600, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_EVOLVED_TO_TERMINATED THEN\n      RAISE EXCEPTION -20800, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_TO_EVOLVED THEN\n      RAISE EXCEPTION -20900, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_EXPLORATORY_THEMENO_NOT_NULL THEN\n      RAISE EXCEPTION -20940, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "$$ LANGUAGE plpgsql;"
        },
        {
            "type": "sql",
            "sql": "-- Create the trigger\nCREATE TRIGGER trigger_name\n    BEFORE INSERT OR UPDATE OR DELETE ON table_name\n    FOR EACH ROW\n    EXECUTE FUNCTION trigger_function();"
        }
    ],
    "on_update": [
        {
            "type": "sql",
            "sql": "CREATE OR REPLACE FUNCTION trigger_function()\nRETURNS TRIGGER AS $$\nDECLARE\n   V_NO_UPDATE_TO_EVOLVED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_TERMINATED_TO_ACTIVE EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_EVOLVED_TO_TERMINATED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_EXPLORATORY_THEMENO_NOT_NULL EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_TRIGGER_NAME VARCHAR(100) := 'MDM_V_NEW_MEDICINE_PROPOSALS_IOF';"
        },
        {
            "type": "sql",
            "sql": "V_EVOLVED_THEME_NO TEXT;"
        },
        {
            "type": "sql",
            "sql": "V_PROPOSAL_ID NUMERIC;"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_ACTIVE VARCHAR(1) := 'A';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_EVOLVED VARCHAR(1) := 'E';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_TERMINATED VARCHAR(1) := 'T';"
        },
        {
            "type": "sql",
            "sql": "BEGIN\nBEGIN\n   V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_TO_EVOLVED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_EVOLVED_TO_TERMINATED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) THEN\n      V_EVOLVED_THEME_NO := NULL;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) THEN\n      RAISE EXCEPTION 'V_EXPLORATORY_THEMENO_NOT_NULL';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF TRUE THEN\n      V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;"
        },
        {
            "type": "sql",
            "sql": "INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );"
        },
        {
            "type": "sql",
            "sql": "IF :NEW.PARTNER_ID IS NOT NULL THEN\n         MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "EXCEPTION\n   WHEN DUP_VAL_ON_INDEX THEN\n      RAISE EXCEPTION -20600, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_EVOLVED_TO_TERMINATED THEN\n      RAISE EXCEPTION -20800, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_TO_EVOLVED THEN\n      RAISE EXCEPTION -20900, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_EXPLORATORY_THEMENO_NOT_NULL THEN\n      RAISE EXCEPTION -20940, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "$$ LANGUAGE plpgsql;"
        },
        {
            "type": "sql",
            "sql": "-- Create the trigger\nCREATE TRIGGER trigger_name\n    BEFORE INSERT OR UPDATE OR DELETE ON table_name\n    FOR EACH ROW\n    EXECUTE FUNCTION trigger_function();"
        }
    ],
    "on_delete": [
        {
            "type": "sql",
            "sql": "CREATE OR REPLACE FUNCTION trigger_function()\nRETURNS TRIGGER AS $$\nDECLARE\n   V_NO_UPDATE_TO_EVOLVED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_TERMINATED_TO_ACTIVE EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_NO_UPDATE_EVOLVED_TO_TERMINATED EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_EXPLORATORY_THEMENO_NOT_NULL EXCEPTION;"
        },
        {
            "type": "sql",
            "sql": "V_TRIGGER_NAME VARCHAR(100) := 'MDM_V_NEW_MEDICINE_PROPOSALS_IOF';"
        },
        {
            "type": "sql",
            "sql": "V_EVOLVED_THEME_NO TEXT;"
        },
        {
            "type": "sql",
            "sql": "V_PROPOSAL_ID NUMERIC;"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_ACTIVE VARCHAR(1) := 'A';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_EVOLVED VARCHAR(1) := 'E';"
        },
        {
            "type": "sql",
            "sql": "C_PROPOSAL_STATUS_TERMINATED VARCHAR(1) := 'T';"
        },
        {
            "type": "sql",
            "sql": "BEGIN\nBEGIN\n   V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_TO_EVOLVED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) THEN\n      RAISE EXCEPTION 'V_NO_UPDATE_EVOLVED_TO_TERMINATED';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) THEN\n      V_EVOLVED_THEME_NO := NULL;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) THEN\n      RAISE EXCEPTION 'V_EXPLORATORY_THEMENO_NOT_NULL';"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "IF TRUE THEN\n      V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;"
        },
        {
            "type": "sql",
            "sql": "INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );"
        },
        {
            "type": "sql",
            "sql": "IF :NEW.PARTNER_ID IS NOT NULL THEN\n         MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "END IF;"
        },
        {
            "type": "sql",
            "sql": "EXCEPTION\n   WHEN DUP_VAL_ON_INDEX THEN\n      RAISE EXCEPTION -20600, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_EVOLVED_TO_TERMINATED THEN\n      RAISE EXCEPTION -20800, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_NO_UPDATE_TO_EVOLVED THEN\n      RAISE EXCEPTION -20900, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "WHEN V_EXPLORATORY_THEMENO_NOT_NULL THEN\n      RAISE EXCEPTION -20940, V_TRIGGER_NAME;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "END;"
        },
        {
            "type": "sql",
            "sql": "$$ LANGUAGE plpgsql;"
        },
        {
            "type": "sql",
            "sql": "-- Create the trigger\nCREATE TRIGGER trigger_name\n    BEFORE INSERT OR UPDATE OR DELETE ON table_name\n    FOR EACH ROW\n    EXECUTE FUNCTION trigger_function();"
        }
    ]
}