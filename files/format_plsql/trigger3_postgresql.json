{
    "on_insert": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(100) := ''COMPANY_ADDRESSES_IOF''; CNTR integer; V_USERID VARCHAR2(100); V_COUNTRY_CD CORE.COUNTRIES.COUNTRY_CD%TYPE; V_COMPANY_TYPE_CD CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE; V_VALID_FROM CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE; BEGIN V_USERID := TXO_UTIL.GET_USERID; CNTR := 0; SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD); IF TRUE THEN IF (CNTR > 0) THEN RAISE EXCEPTION ERR_INS; END IF; END IF; IF ( OR ) THEN SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = COALESCE ( :NEW.COMPANY_CD, :OLD.COMPANY_CD); IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN RAISE EXCEPTION ERR_INS_LEGAL_ADDR; END IF; IF (COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN IF (COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) = COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN RAISE EXCEPTION ERR_CTRY_CHG; END IF; IF (CNTR = 0) THEN MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY => :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'); END IF; END IF; IF (COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN IF (CNTR = 0) THEN MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY => :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'); END IF; END IF; END IF; END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_update": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(100) := ''COMPANY_ADDRESSES_IOF''; CNTR integer; V_USERID VARCHAR2(100); V_COUNTRY_CD CORE.COUNTRIES.COUNTRY_CD%TYPE; V_COMPANY_TYPE_CD CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE; V_VALID_FROM CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE; BEGIN V_USERID := TXO_UTIL.GET_USERID; CNTR := 0; SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD); IF ( OR ) THEN SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = COALESCE ( :NEW.COMPANY_CD, :OLD.COMPANY_CD); IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN RAISE EXCEPTION ERR_INS_LEGAL_ADDR; END IF; IF (COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN IF (COALESCE(:OLD.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) = COALESCE(:NEW.VALID_FROM, DATE_TRUNC(CURRENT_TIMESTAMP)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN RAISE EXCEPTION ERR_CTRY_CHG; END IF; IF (CNTR = 0) THEN MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY => :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'); END IF; END IF; IF (COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN IF (CNTR = 0) THEN MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY => :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'); END IF; END IF; END IF; END; $$ LANGUAGE plpgsql;"
        }
    ],
    "on_delete": [
        {
            "type": "sql",
            "sql": "DO $$ DECLARE V_TRIGGER_NAME VARCHAR2(100) := ''COMPANY_ADDRESSES_IOF''; CNTR integer; V_USERID VARCHAR2(100); V_COUNTRY_CD CORE.COUNTRIES.COUNTRY_CD%TYPE; V_COMPANY_TYPE_CD CFG.CFG_COMPANIES.COMPANY_TYPE_CD%TYPE; V_VALID_FROM CFG.CFG_COMPANY_ADDRESSES.VALID_FROM%TYPE; BEGIN V_USERID := TXO_UTIL.GET_USERID; CNTR := 0; SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = COALESCE(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD); IF TRUE THEN IF (COALESCE(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN RAISE EXCEPTION ERR_NOT_ALLOWED_TO_INVALIDATE; END IF; MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'); END IF; END; $$ LANGUAGE plpgsql;"
        }
    ]
}