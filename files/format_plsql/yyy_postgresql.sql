-- PostgreSQL Trigger for yyy_postgresql.json
-- Generated on: 2025-08-28 03:15:43

-- ON INSERT
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
    ELSE
    END IF;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    PERFORM mdm_util_companies.modifycompany();
    CASE
      WHEN  THEN
        CASE
          WHEN  THEN
            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';
          ELSE
            NULL;
        END CASE;
        PERFORM mdm_util_companies.modifycompanymapping_mfr();
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
    ELSE
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN
        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
        END IF;
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
    END IF;
    CASE
      WHEN  THEN
        PERFORM mdmappl.mdm_util_companies.modifycompanyname();
      ELSE
        NULL;
    END CASE;
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;

-- ON UPDATE
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
    ELSE
    END IF;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    PERFORM mdm_util_companies.modifycompany();
    CASE
      WHEN  THEN
        CASE
          WHEN  THEN
            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';
          ELSE
            NULL;
        END CASE;
        PERFORM mdm_util_companies.modifycompanymapping_mfr();
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
    ELSE
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN
        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
        END IF;
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
    END IF;
    CASE
      WHEN  THEN
        PERFORM mdmappl.mdm_util_companies.modifycompanyname();
      ELSE
        NULL;
    END CASE;
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;

-- ON DELETE
DO $$
DECLARE
  CNTR integer;
  V_USERID varchar(100);
  V_REPORTING_ENTITY_CD TEXT;
  V_LEGAL_COMPANY_CD TEXT;
  V_OLD_LEGAL_COMPANY_CD TEXT := NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD);
  V_REP_CBC_FLAG TEXT;
  V_ADDR_VALID_FROM_DATE TEXT;
  V_COUNTRY_CD TEXT;
  V_COMPANY_CODES_LIST varchar(200);
  V_TRIGGER_NAME CONSTANT varchar(30) := 'COMPANIES_MTN_IOF';
  ERR_INS EXCEPTION;
  ERR_DEL EXCEPTION;
  ERR_UPD EXCEPTION;
  ERR_VALID_FROM_DATE EXCEPTION;
  RU_NOT_IN_CBC_SCOPE EXCEPTION;
  ERR_NO_ADR EXCEPTION;
  ERR_CPY_STILL_IN_SCOPE EXCEPTION;
  CPY_IN_USE EXCEPTION;
  INVALID_LEGAL_COMP EXCEPTION;
  ERR_CPY_STILL_IN_MFR EXCEPTION;
  ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC EXCEPTION;
BEGIN
  BEGIN
    EXCEPTION
      WHEN OTHERS THEN
  END;
  IF :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN
    RAISE EXCEPTION 'The address cannot be updated because the Address type is different';
  END IF;
  IF TRUE THEN
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
    IF CNTR > 0 THEN
      RAISE EXCEPTION 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button';
    END IF;
  END IF;
  IF TRUE THEN
    IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN
    ELSE
    END IF;
    SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
    IF CNTR = 0 AND (COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN
      RAISE EXCEPTION 'INVALID_LEGAL_COMP';
    END IF;
    PERFORM mdm_util_companies.modifycompany();
    CASE
      WHEN  THEN
        CASE
          WHEN  THEN
            RAISE EXCEPTION 'ERR_VALID_FROM_DATE';
          ELSE
            NULL;
        END CASE;
        PERFORM mdm_util_companies.modifycompanymapping_mfr();
      ELSE
        NULL;
    END CASE;
    IF COALESCE(:NEW.VALID_IND, 'Y') = 'N' AND COALESCE(:OLD.VALID_IND, 'N') = 'Y' THEN
      SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
      IF CNTR > 0 THEN
        SELECT STRING_AGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
        RAISE EXCEPTION 'CPY_IN_USE';
      END IF;
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN
      UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = DATE_TRUNC( CURRENT_TIMESTAMP ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > DATE_TRUNC(CURRENT_TIMESTAMP) OR VALID_TO IS NULL);
    END IF;
    IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_SCOPE';
    END IF;
    IF :NEW.VALID_IND = 'N' AND COALESCE(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND COALESCE(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN
      RAISE EXCEPTION 'ERR_CPY_STILL_IN_MFR';
    END IF;
    IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN
      RAISE EXCEPTION 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC';
    END IF;
    IF COALESCE(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR COALESCE(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN
    ELSE
    END IF;
    IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN
      IF (:NEW.CBC_GBE_SCOPE = 'Y' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (COALESCE(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN
        SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
        IF COALESCE(V_REP_CBC_FLAG, 'N') = 'N' THEN
          RAISE EXCEPTION 'RU_NOT_IN_CBC_SCOPE';
        END IF;
        SELECT COUNT(*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF CNTR = 0 THEN
          RAISE EXCEPTION 'ERR_NO_ADR';
        END IF;
        SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
        IF V_LEGAL_COMPANY_CD <> COALESCE(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN
        END IF;
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
      IF :NEW.CBC_GBE_SCOPE = 'N' AND COALESCE(:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
        PERFORM mdm_util_companies.modifycompanymapping_ce_ju();
      END IF;
    END IF;
    CASE
      WHEN  THEN
        PERFORM mdmappl.mdm_util_companies.modifycompanyname();
      ELSE
        NULL;
    END CASE;
  END IF;
  EXCEPTION
    WHEN ERR_DEL THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_UPD THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_INS THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_VALID_FROM_DATE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN RU_NOT_IN_CBC_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_SCOPE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_NO_ADR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN CPY_IN_USE THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN INVALID_LEGAL_COMP THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC THEN
      RAISE_APPLICATION_ERROR(-20000, '');
    WHEN ERR_CPY_STILL_IN_MFR THEN
      RAISE_APPLICATION_ERROR(-20000, '');
END;
END $$;
