2025-09-02 13:53:53,361 - root - DEBUG - [common.py:105] - Starting main conversion workflow
2025-09-02 13:53:53,362 - root - INFO - [common.py:110] - === Starting Oracle Trigger Conversion Process ===
2025-09-02 13:53:53,363 - root - INFO - [common.py:110] - Logging to: output\oracle_conversion_20250902_135353.log
2025-09-02 13:53:53,363 - root - DEBUG - [common.py:105] - Logging system initialized
2025-09-02 13:53:53,364 - root - INFO - [common.py:110] - Step 1: Converting Oracle SQL files to JSON analysis...
2025-09-02 13:53:53,364 - root - DEBUG - [common.py:105] - Starting Step 1: Oracle SQL → JSON conversion
2025-09-02 13:53:53,364 - root - INFO - [common.py:110] - === Starting Oracle triggers to JSON conversion ===
2025-09-02 13:53:53,365 - root - DEBUG - [common.py:105] - Workflow Phase 1: Convert Oracle SQL files to JSON analysis structure
2025-09-02 13:53:53,365 - root - DEBUG - [common.py:105] - Source directory: files/oracle
2025-09-02 13:53:53,366 - root - DEBUG - [common.py:105] - Target directory: files/format_json
2025-09-02 13:53:53,366 - root - DEBUG - [common.py:105] - File details will be included in metadata for each processed file
2025-09-02 13:53:53,366 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:53:53,366 - root - INFO - [common.py:110] - Source directory: 'files/oracle'
2025-09-02 13:53:53,366 - root - INFO - [common.py:110] - Target directory: 'files/format_json'
2025-09-02 13:53:53,366 - root - INFO - [common.py:110] - File pattern: '.sql'
2025-09-02 13:53:53,367 - root - INFO - [common.py:110] - Output suffix: '_analysis.json'
2025-09-02 13:53:53,367 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:53:53,367 - root - DEBUG - [common.py:105] - Directory already exists: files/format_json
2025-09-02 13:53:53,367 - root - DEBUG - [common.py:105] - Found 1 files in source directory
2025-09-02 13:53:53,367 - root - DEBUG - [common.py:105] - Files matching pattern '.sql': ['zzz.sql']
2025-09-02 13:53:53,367 - root - DEBUG - [common.py:105] - === Processing file 1/1: zzz.sql ===
2025-09-02 13:53:53,368 - root - DEBUG - [common.py:105] - Source path: files/oracle\zzz.sql
2025-09-02 13:53:53,368 - root - DEBUG - [common.py:105] - Output path: files/format_json\zzz_analysis.json
2025-09-02 13:53:53,368 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger zzz.sql ===
2025-09-02 13:53:53,368 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance from file...
2025-09-02 13:53:53,368 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 20 characters of SQL
2025-09-02 13:53:53,369 - root - DEBUG - [OracleTriggerAnalyzer.py:106] - structured lines conversion 0 lines processed
2025-09-02 13:53:53,369 - root - DEBUG - [OracleTriggerAnalyzer.py:109] - SQL section parsing
2025-09-02 13:53:53,369 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - structured lines conversion
2025-09-02 13:53:53,369 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-09-02 13:53:53,369 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 23 total, 6 with semicolons, 1 empty lines skipped
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:324] - structured lines conversion
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:261] - Block comment stripping complete: 2 comments extracted, 17 lines cleaned
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:328] - Removed block comments from main section
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:305] - Inline comment stripping complete: 0 comments extracted, 17 lines cleaned
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Removed inline comments from main section
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:344] - Found DECLARE at line 3
2025-09-02 13:53:53,370 - root - DEBUG - [OracleTriggerAnalyzer.py:348] - Found BEGIN at line 4
2025-09-02 13:53:53,371 - root - DEBUG - [OracleTriggerAnalyzer.py:358] - DECLARE section: lines 3-3
2025-09-02 13:53:53,371 - root - DEBUG - [OracleTriggerAnalyzer.py:386] - Starting declaration parsing
2025-09-02 13:53:53,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1442] - Starting top-level BEGIN blocks parsing
2025-09-02 13:53:53,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1487] - Begin line: {'indent': 8, 'line': '        BEGIN', 'line_no': 6} 1
2025-09-02 13:53:53,372 - root - DEBUG - [OracleTriggerAnalyzer.py:111] - SQL section parsing
2025-09-02 13:53:53,372 - root - DEBUG - [OracleTriggerAnalyzer.py:114] - OracleTriggerAnalyzer initialization 0.0041005611419677734 seconds
2025-09-02 13:53:53,372 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully with file details
2025-09-02 13:53:53,372 - root - DEBUG - [common.py:105] - File details: zzz.sql
2025-09-02 13:53:53,372 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-09-02 13:53:53,373 - root - DEBUG - [OracleTriggerAnalyzer.py:2078] - JSON conversion complete: 0 vars, 0 consts, 0 excs, 2 comments
2025-09-02 13:53:53,373 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-09-02 13:53:53,373 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:53,373 - root - DEBUG - [common.py:105] - File details in metadata: zzz.sql (679 bytes)
2025-09-02 13:53:53,373 - root - DEBUG - [common.py:105] - Analysis statistics: 0 vars, 0 consts, 0 excs, 2 comments
2025-09-02 13:53:53,373 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\zzz_analysis.json
2025-09-02 13:53:53,374 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\zzz_analysis.json
2025-09-02 13:53:53,374 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger zzz.sql ===
2025-09-02 13:53:53,374 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis.json
2025-09-02 13:53:53,374 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:53:53,375 - root - INFO - [common.py:110] - Successfully processed: 1 files
2025-09-02 13:53:53,375 - root - INFO - [common.py:110] - === Oracle triggers to JSON conversion complete ===
2025-09-02 13:53:53,375 - root - DEBUG - [common.py:105] - Phase 1 complete: Oracle SQL files converted to JSON analysis structure with file metadata
2025-09-02 13:53:53,375 - root - INFO - [common.py:110] - ✓ JSON conversion complete! (Duration: 0.01 seconds)
2025-09-02 13:53:53,375 - root - DEBUG - [common.py:105] - Step 1 completed in 0.01 seconds
2025-09-02 13:53:53,376 - root - INFO - [common.py:110] - Step 2: Converting JSON analysis back to formatted SQL...
2025-09-02 13:53:53,376 - root - DEBUG - [common.py:105] - Starting Step 2: JSON analysis → formatted Oracle SQL
2025-09-02 13:53:53,376 - root - INFO - [common.py:110] - === Starting JSON analysis to formatted Oracle SQL conversion ===
2025-09-02 13:53:53,376 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:53:53,376 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-09-02 13:53:53,377 - root - INFO - [common.py:110] - Target directory: 'files/format_sql'
2025-09-02 13:53:53,377 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-09-02 13:53:53,377 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-09-02 13:53:53,377 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:53:53,377 - root - DEBUG - [common.py:105] - Directory already exists: files/format_sql
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['aaa_analysis.json', 'bbb_analysis.json', 'ccc_analysis.json', 'trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_analysis.json ===
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Source path: files/format_json\aaa_analysis.json
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Output path: files/format_sql\aaa_analysis.sql
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger aaa_analysis.json ===
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\aaa_analysis.json
2025-09-02 13:53:53,378 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - JSON contains 10 total statements
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:53,378 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:53,379 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:53,935 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:53,935 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:53,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:53,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:53,959 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:53,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:53,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 2 variables
2025-09-02 13:53:53,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 1 exceptions
2025-09-02 13:53:53,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:53,960 - root - DEBUG - [common.py:105] - Generated 4 lines of declarations
2025-09-02 13:53:53,960 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:53:53,961 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:53,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:53,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:53,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:53,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:53,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:53,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Generated 15 lines in main execution block
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Final SQL contains 24 lines, 1225 characters
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Oracle SQL generation: 24 lines generated in 0.003s
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - Rendered SQL length: 1225 characters
2025-09-02 13:53:53,962 - root - DEBUG - [common.py:105] - SQL rendering took: 0.004 seconds
2025-09-02 13:53:53,963 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\aaa_analysis.sql
2025-09-02 13:53:53,963 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\aaa_analysis.sql
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger aaa_analysis.json ===
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - ✓ Created aaa_analysis.sql
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_analysis.json ===
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - Source path: files/format_json\bbb_analysis.json
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - Output path: files/format_sql\bbb_analysis.sql
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger bbb_analysis.json ===
2025-09-02 13:53:53,964 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\bbb_analysis.json
2025-09-02 13:53:53,965 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:53,965 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:53,965 - root - DEBUG - [common.py:105] - JSON contains 33 total statements
2025-09-02 13:53:53,965 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:53,965 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:53,965 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:53,994 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:53,994 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,013 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,013 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,013 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,013 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,013 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,013 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:54,013 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,014 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 3 exceptions
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,014 - root - DEBUG - [common.py:105] - Generated 10 lines of declarations
2025-09-02 13:53:54,014 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:53:54,014 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,017 - root - DEBUG - [common.py:105] - Generated 49 lines in main execution block
2025-09-02 13:53:54,017 - root - DEBUG - [common.py:105] - Main block rendering took 0.003s
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - Final SQL contains 64 lines, 2577 characters
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - Oracle SQL generation: 64 lines generated in 0.004s
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - Rendered SQL length: 2577 characters
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-09-02 13:53:54,018 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\bbb_analysis.sql
2025-09-02 13:53:54,019 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\bbb_analysis.sql
2025-09-02 13:53:54,019 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger bbb_analysis.json ===
2025-09-02 13:53:54,019 - root - DEBUG - [common.py:105] - ✓ Created bbb_analysis.sql
2025-09-02 13:53:54,020 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_analysis.json ===
2025-09-02 13:53:54,020 - root - DEBUG - [common.py:105] - Source path: files/format_json\ccc_analysis.json
2025-09-02 13:53:54,020 - root - DEBUG - [common.py:105] - Output path: files/format_sql\ccc_analysis.sql
2025-09-02 13:53:54,020 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger ccc_analysis.json ===
2025-09-02 13:53:54,021 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\ccc_analysis.json
2025-09-02 13:53:54,024 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,024 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,024 - root - DEBUG - [common.py:105] - JSON contains 13 total statements
2025-09-02 13:53:54,024 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,024 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,024 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,067 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,067 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,098 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,098 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,099 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,099 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,099 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,099 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:54,099 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,099 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,099 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,101 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 1 exceptions
2025-09-02 13:53:54,101 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,102 - root - DEBUG - [common.py:105] - Generated 2 lines of declarations
2025-09-02 13:53:54,102 - root - DEBUG - [common.py:105] - Declarations rendering took 0.002s
2025-09-02 13:53:54,102 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:54,104 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,104 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1664 characters
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Oracle SQL generation: 28 lines generated in 0.005s
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,104 - root - DEBUG - [common.py:105] - Rendered SQL length: 1664 characters
2025-09-02 13:53:54,105 - root - DEBUG - [common.py:105] - SQL rendering took: 0.006 seconds
2025-09-02 13:53:54,105 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\ccc_analysis.sql
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\ccc_analysis.sql
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger ccc_analysis.json ===
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - ✓ Created ccc_analysis.sql
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_analysis.json ===
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger1_analysis.sql
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger1_analysis.json ===
2025-09-02 13:53:54,106 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-09-02 13:53:54,108 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,108 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,108 - root - DEBUG - [common.py:105] - JSON contains 188 total statements
2025-09-02 13:53:54,108 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,108 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,108 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,145 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,146 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,176 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,176 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,176 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,176 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,176 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,176 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:54,176 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,177 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 29 variables
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:360] - Rendering 2 constants
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 18 exceptions
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,177 - root - DEBUG - [common.py:105] - Generated 50 lines of declarations
2025-09-02 13:53:54,177 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:53:54,177 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:54,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,182 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,190 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,194 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,196 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,197 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,197 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,198 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,198 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,199 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,200 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,202 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,203 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,203 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:54,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,212 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:53:54,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:53:54,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Generated 257 lines in main execution block
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Main block rendering took 0.038s
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Final SQL contains 312 lines, 19766 characters
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Oracle SQL generation: 312 lines generated in 0.040s
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - Rendered SQL length: 19766 characters
2025-09-02 13:53:54,216 - root - DEBUG - [common.py:105] - SQL rendering took: 0.040 seconds
2025-09-02 13:53:54,218 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger1_analysis.sql
2025-09-02 13:53:54,222 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger1_analysis.sql
2025-09-02 13:53:54,222 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger1_analysis.json ===
2025-09-02 13:53:54,222 - root - DEBUG - [common.py:105] - ✓ Created trigger1_analysis.sql
2025-09-02 13:53:54,222 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_analysis.json ===
2025-09-02 13:53:54,223 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-09-02 13:53:54,223 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger2_analysis.sql
2025-09-02 13:53:54,223 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger2_analysis.json ===
2025-09-02 13:53:54,223 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-09-02 13:53:54,224 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,224 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,224 - root - DEBUG - [common.py:105] - JSON contains 69 total statements
2025-09-02 13:53:54,224 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,225 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,225 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,268 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,268 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,296 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,296 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,297 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,297 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:54,297 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,297 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:53:54,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 7 exceptions
2025-09-02 13:53:54,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,297 - root - DEBUG - [common.py:105] - Generated 14 lines of declarations
2025-09-02 13:53:54,298 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:54,298 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,302 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:54,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,302 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,303 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,303 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - Generated 101 lines in main execution block
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - Main block rendering took 0.007s
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - Final SQL contains 120 lines, 8293 characters
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - Oracle SQL generation: 120 lines generated in 0.009s
2025-09-02 13:53:54,305 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,306 - root - DEBUG - [common.py:105] - Rendered SQL length: 8293 characters
2025-09-02 13:53:54,306 - root - DEBUG - [common.py:105] - SQL rendering took: 0.009 seconds
2025-09-02 13:53:54,306 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger2_analysis.sql
2025-09-02 13:53:54,307 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger2_analysis.sql
2025-09-02 13:53:54,307 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger2_analysis.json ===
2025-09-02 13:53:54,307 - root - DEBUG - [common.py:105] - ✓ Created trigger2_analysis.sql
2025-09-02 13:53:54,307 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_analysis.json ===
2025-09-02 13:53:54,307 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-09-02 13:53:54,336 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger3_analysis.sql
2025-09-02 13:53:54,336 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger3_analysis.json ===
2025-09-02 13:53:54,336 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-09-02 13:53:54,337 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,337 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,337 - root - DEBUG - [common.py:105] - JSON contains 52 total statements
2025-09-02 13:53:54,337 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,337 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,337 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,366 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,366 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,385 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,385 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,385 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 6 exceptions
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Generated 13 lines of declarations
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:54,386 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (TO_CHAR(:NEW.VALID_FROM, ...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (V_COMPANY_TYPE_CD = 'L') ...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:53:54,388 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Generated 76 lines in main execution block
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Final SQL contains 94 lines, 7449 characters
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Oracle SQL generation: 94 lines generated in 0.005s
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - Rendered SQL length: 7449 characters
2025-09-02 13:53:54,390 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-09-02 13:53:54,391 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger3_analysis.sql
2025-09-02 13:53:54,392 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger3_analysis.sql
2025-09-02 13:53:54,392 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger3_analysis.json ===
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - ✓ Created trigger3_analysis.sql
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_analysis.json ===
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger4_analysis.sql
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger4_analysis.json ===
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-09-02 13:53:54,393 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,393 - root - DEBUG - [common.py:105] - JSON contains 10 total statements
2025-09-02 13:53:54,394 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,394 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,394 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,416 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,416 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,429 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,429 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,429 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,429 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:54,429 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,430 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,430 - root - DEBUG - [common.py:105] - Generated 7 lines of declarations
2025-09-02 13:53:54,430 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:54,430 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,431 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,431 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,431 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:54,431 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Generated 12 lines in main execution block
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Final SQL contains 24 lines, 4061 characters
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Oracle SQL generation: 24 lines generated in 0.002s
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Rendered SQL length: 4061 characters
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-09-02 13:53:54,431 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger4_analysis.sql
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger4_analysis.sql
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger4_analysis.json ===
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - ✓ Created trigger4_analysis.sql
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_analysis.json ===
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger5_analysis.sql
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger5_analysis.json ===
2025-09-02 13:53:54,432 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-09-02 13:53:54,432 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,433 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,433 - root - DEBUG - [common.py:105] - JSON contains 13 total statements
2025-09-02 13:53:54,433 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,433 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,433 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,448 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,448 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,460 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,460 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,460 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 2 variables
2025-09-02 13:53:54,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Generated 3 lines of declarations
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:54,461 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:54,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Generated 18 lines in main execution block
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 1250 characters
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Oracle SQL generation: 26 lines generated in 0.002s
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - Rendered SQL length: 1250 characters
2025-09-02 13:53:54,462 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger5_analysis.sql
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger5_analysis.sql
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger5_analysis.json ===
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - ✓ Created trigger5_analysis.sql
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_analysis.json ===
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger6_analysis.sql
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger6_analysis.json ===
2025-09-02 13:53:54,463 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-09-02 13:53:54,464 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,464 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,464 - root - DEBUG - [common.py:105] - JSON contains 23 total statements
2025-09-02 13:53:54,464 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,464 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,464 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,489 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,490 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,508 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:53:54,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 4 exceptions
2025-09-02 13:53:54,509 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,515 - root - DEBUG - [common.py:105] - Generated 11 lines of declarations
2025-09-02 13:53:54,516 - root - DEBUG - [common.py:105] - Declarations rendering took 0.007s
2025-09-02 13:53:54,516 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,517 - root - DEBUG - [common.py:105] - Generated 31 lines in main execution block
2025-09-02 13:53:54,517 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:54,517 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,517 - root - DEBUG - [common.py:105] - Final SQL contains 47 lines, 2483 characters
2025-09-02 13:53:54,518 - root - DEBUG - [common.py:105] - Oracle SQL generation: 47 lines generated in 0.009s
2025-09-02 13:53:54,518 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,518 - root - DEBUG - [common.py:105] - Rendered SQL length: 2483 characters
2025-09-02 13:53:54,518 - root - DEBUG - [common.py:105] - SQL rendering took: 0.010 seconds
2025-09-02 13:53:54,518 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger6_analysis.sql
2025-09-02 13:53:54,519 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger6_analysis.sql
2025-09-02 13:53:54,519 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger6_analysis.json ===
2025-09-02 13:53:54,519 - root - DEBUG - [common.py:105] - ✓ Created trigger6_analysis.sql
2025-09-02 13:53:54,519 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_analysis.json ===
2025-09-02 13:53:54,520 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-09-02 13:53:54,520 - root - DEBUG - [common.py:105] - Output path: files/format_sql\yyy_analysis.sql
2025-09-02 13:53:54,524 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger yyy_analysis.json ===
2025-09-02 13:53:54,524 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-09-02 13:53:54,525 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,525 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,525 - root - DEBUG - [common.py:105] - JSON contains 91 total statements
2025-09-02 13:53:54,526 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,526 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,526 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,551 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,551 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,577 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,577 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,577 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,577 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,577 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,578 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:54,578 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,578 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 9 variables
2025-09-02 13:53:54,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:360] - Rendering 1 constants
2025-09-02 13:53:54,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 11 exceptions
2025-09-02 13:53:54,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,578 - root - DEBUG - [common.py:105] - Generated 22 lines of declarations
2025-09-02 13:53:54,579 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:53:54,579 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,581 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,583 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:54,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:54,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Generated 122 lines in main execution block
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Main block rendering took 0.008s
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Final SQL contains 149 lines, 10436 characters
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Oracle SQL generation: 149 lines generated in 0.010s
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - Rendered SQL length: 10436 characters
2025-09-02 13:53:54,587 - root - DEBUG - [common.py:105] - SQL rendering took: 0.010 seconds
2025-09-02 13:53:54,588 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\yyy_analysis.sql
2025-09-02 13:53:54,588 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\yyy_analysis.sql
2025-09-02 13:53:54,588 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger yyy_analysis.json ===
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - ✓ Created yyy_analysis.sql
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_analysis.json ===
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - Output path: files/format_sql\zzz_analysis.sql
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger zzz_analysis.json ===
2025-09-02 13:53:54,589 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-09-02 13:53:54,590 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:54,590 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:53:54,590 - root - DEBUG - [common.py:105] - JSON contains 0 total statements
2025-09-02 13:53:54,590 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:53:54,590 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:54,591 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,614 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:54,615 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:54,628 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:54,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:54,628 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:54,628 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:53:54,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:54,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:53:54,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Generated 1 lines of declarations
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:54,629 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:54,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:53:54,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:54,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: 
2025-09-02 13:53:54,630 - utilities.FormatSQL - WARNING - [FormatSQL.py:839] - Unknown statement type: unknown
2025-09-02 13:53:54,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:53:54,630 - root - DEBUG - [common.py:105] - Generated 3 lines in main execution block
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Final SQL contains 9 lines, 168 characters
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Oracle SQL generation: 9 lines generated in 0.002s
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Rendered SQL length: 168 characters
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-02 13:53:54,631 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\zzz_analysis.sql
2025-09-02 13:53:54,632 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\zzz_analysis.sql
2025-09-02 13:53:54,632 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger zzz_analysis.json ===
2025-09-02 13:53:54,632 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis.sql
2025-09-02 13:53:54,632 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:53:54,633 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:53:54,633 - root - INFO - [common.py:110] - === Starting comparison with original files ===
2025-09-02 13:53:54,634 - root - DEBUG - [common.py:105] - Comparison complete for zzz.sql: 24 original, 9 generated lines
2025-09-02 13:53:54,634 - root - INFO - [common.py:110] - === Conversion Statistics ===
2025-09-02 13:53:54,634 - root - INFO - [common.py:110] - Total files processed: 1
2025-09-02 13:53:54,635 - root - INFO - [common.py:110] - Successful conversions: 0
2025-09-02 13:53:54,635 - root - INFO - [common.py:110] - Failed conversions: 0
2025-09-02 13:53:54,635 - root - INFO - [common.py:110] - Files with validation warnings: 1
2025-09-02 13:53:54,635 - root - INFO - [common.py:110] - === Comparison Results ===
2025-09-02 13:53:54,635 - root - WARNING - [common.py:115] - File zzz.sql: Significant line count difference: 69.6%
2025-09-02 13:53:54,636 - root - INFO - [common.py:110] - === JSON analysis to formatted Oracle SQL conversion complete ===
2025-09-02 13:53:54,636 - root - INFO - [common.py:110] - ✓ SQL formatting complete! (Duration: 1.26 seconds)
2025-09-02 13:53:54,636 - root - DEBUG - [common.py:105] - Step 2 completed in 1.26 seconds
2025-09-02 13:53:54,637 - root - INFO - [common.py:110] - Step 3: Cleaning JSON files...
2025-09-02 13:53:54,637 - root - DEBUG - [common.py:105] - Starting Step 3: Cleaning and optimizing JSON files
2025-09-02 13:53:54,637 - root - DEBUG - [common.py:105] - Starting JSON cleaning process in directory: files/format_json
2025-09-02 13:53:54,637 - root - DEBUG - [common.py:105] - Found 11 JSON files to clean
2025-09-02 13:53:54,637 - root - DEBUG - [common.py:105] - Processing file: aaa_analysis.json
2025-09-02 13:53:54,638 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (3125 bytes)
2025-09-02 13:53:54,638 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,639 - root - DEBUG - [common.py:358] - ✅ Cleaned aaa_analysis.json
2025-09-02 13:53:54,640 - root - DEBUG - [common.py:105] - Processing file: bbb_analysis.json
2025-09-02 13:53:54,642 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (7032 bytes)
2025-09-02 13:53:54,642 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,645 - root - DEBUG - [common.py:358] - ✅ Cleaned bbb_analysis.json
2025-09-02 13:53:54,646 - root - DEBUG - [common.py:105] - Processing file: ccc_analysis.json
2025-09-02 13:53:54,646 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (4677 bytes)
2025-09-02 13:53:54,648 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,658 - root - DEBUG - [common.py:358] - ✅ Cleaned ccc_analysis.json
2025-09-02 13:53:54,659 - root - DEBUG - [common.py:105] - Processing file: trigger1_analysis.json
2025-09-02 13:53:54,663 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (43474 bytes)
2025-09-02 13:53:54,664 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.001 seconds
2025-09-02 13:53:54,673 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger1_analysis.json
2025-09-02 13:53:54,673 - root - DEBUG - [common.py:105] - Processing file: trigger2_analysis.json
2025-09-02 13:53:54,674 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (20878 bytes)
2025-09-02 13:53:54,674 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,677 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger2_analysis.json
2025-09-02 13:53:54,677 - root - DEBUG - [common.py:105] - Processing file: trigger3_analysis.json
2025-09-02 13:53:54,678 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (18918 bytes)
2025-09-02 13:53:54,678 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,684 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger3_analysis.json
2025-09-02 13:53:54,684 - root - DEBUG - [common.py:105] - Processing file: trigger4_analysis.json
2025-09-02 13:53:54,685 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (6323 bytes)
2025-09-02 13:53:54,685 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,687 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger4_analysis.json
2025-09-02 13:53:54,687 - root - DEBUG - [common.py:105] - Processing file: trigger5_analysis.json
2025-09-02 13:53:54,687 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (3496 bytes)
2025-09-02 13:53:54,688 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,690 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger5_analysis.json
2025-09-02 13:53:54,690 - root - DEBUG - [common.py:105] - Processing file: trigger6_analysis.json
2025-09-02 13:53:54,693 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (6496 bytes)
2025-09-02 13:53:54,693 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,694 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger6_analysis.json
2025-09-02 13:53:54,694 - root - DEBUG - [common.py:105] - Processing file: yyy_analysis.json
2025-09-02 13:53:54,695 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (26061 bytes)
2025-09-02 13:53:54,696 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,700 - root - DEBUG - [common.py:358] - ✅ Cleaned yyy_analysis.json
2025-09-02 13:53:54,700 - root - DEBUG - [common.py:105] - Processing file: zzz_analysis.json
2025-09-02 13:53:54,701 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (1362 bytes)
2025-09-02 13:53:54,701 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:53:54,702 - root - DEBUG - [common.py:358] - ✅ Cleaned zzz_analysis.json
2025-09-02 13:53:54,702 - root - INFO - [common.py:110] - JSON cleaning complete: 11 files cleaned, 0 errors
2025-09-02 13:53:54,703 - root - INFO - [common.py:110] - ✓ JSON cleaning complete! (Duration: 0.07 seconds)
2025-09-02 13:53:54,703 - root - DEBUG - [common.py:105] - Step 3 completed in 0.07 seconds
2025-09-02 13:53:54,703 - root - INFO - [common.py:110] - Step 5: Converting JSON to PL/JSON...
2025-09-02 13:53:54,703 - root - DEBUG - [common.py:105] - Starting Step 5: JSON → PostgreSQL-compatible PL/JSON
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] - processing aaa_analysis.json
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:54,704 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,705 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_PK;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CORE.V_ACCOUNT_GROUPS_LOCAL ( SAPINST_NO, ACCOUNT_GROUP_CD, ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND, EMPLOYEE_IND, NUMBER_RANGE_CD, IGNORE_FOR_DNB, VALID_IND ) VALUES ( :NEW.SAPINST_NO , :NEW.ACCOUNT_GROUP_CD, :NEW.ACCOUNT_GROUP_DESC, :NEW.ONE_TIME_ACCOUNT_IND, :NEW.EMPLOYEE_IND, :NEW.NUMBER_RANGE_CD, :NEW.IGNORE_FOR_DNB, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CORE.V_ACCOUNT_GROUPS_LOCAL SET EMPLOYEE_IND = :NEW.EMPLOYEE_IND, ACCOUNT_GROUP_DESC = :NEW.ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND = :NEW.ONE_TIME_ACCOUNT_IND, IGNORE_FOR_DNB = :NEW.IGNORE_FOR_DNB, VALID_IND = :NEW.VALID_IND WHERE ACCOUNT_GROUP_CD = :NEW.ACCOUNT_GROUP_CD AND SAPINST_NO = :NEW.SAPINST_NO;', 'statement_indent': 8}]}], 'else_statements': []}]
2025-09-02 13:53:54,705 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,705 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,705 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,706 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,707 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,708 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,709 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,710 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,711 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,712 - root - DEBUG - [common.py:105] - Generated JSON string with 12256 characters
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,713 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_PK;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CORE.V_ACCOUNT_GROUPS_LOCAL ( SAPINST_NO, ACCOUNT_GROUP_CD, ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND, EMPLOYEE_IND, NUMBER_RANGE_CD, IGNORE_FOR_DNB, VALID_IND ) VALUES ( :NEW.SAPINST_NO , :NEW.ACCOUNT_GROUP_CD, :NEW.ACCOUNT_GROUP_DESC, :NEW.ONE_TIME_ACCOUNT_IND, :NEW.EMPLOYEE_IND, :NEW.NUMBER_RANGE_CD, :NEW.IGNORE_FOR_DNB, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CORE.V_ACCOUNT_GROUPS_LOCAL SET EMPLOYEE_IND = :NEW.EMPLOYEE_IND, ACCOUNT_GROUP_DESC = :NEW.ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND = :NEW.ONE_TIME_ACCOUNT_IND, IGNORE_FOR_DNB = :NEW.IGNORE_FOR_DNB, VALID_IND = :NEW.VALID_IND WHERE ACCOUNT_GROUP_CD = :NEW.ACCOUNT_GROUP_CD AND SAPINST_NO = :NEW.SAPINST_NO;', 'statement_indent': 8}]}], 'else_statements': []}]
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,713 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,715 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,716 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,717 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:53:54,718 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,719 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] - Generated JSON string with 12256 characters
2025-09-02 13:53:54,720 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,721 - root - DEBUG - [common.py:105] - Created aaa.json
2025-09-02 13:53:54,722 - root - DEBUG - [common.py:105] - processing bbb_analysis.json
2025-09-02 13:53:54,722 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,722 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,723 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,724 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_PATTERN', 'assignment_operator': ':=', 'expression': ':NEW.PATTERN;', 'assignment_indent': 4}, {'condition': '', 'type': 'case_when', 'case_indent': 4, 'when_clauses': [{'type': 'when_statement', 'when_indent': 8, 'condition': 'V_PATTERN IS NOT NULL', 'then_statements': [{'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD;', 'statement_indent': 4}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_indent': 8}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_RULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.RULE_ID;', 'assignment_indent': 8}]}, {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS;', 'statement_indent': 4}, {'condition': ' INSERTING AND V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :NEW.PATTERN_ID AND PATTERN = :OLD.PATTERN;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.VALID_IND );', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}]}], 'else_statements': []}]
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,724 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,725 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,726 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,727 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,729 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,732 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,732 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,732 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,733 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,733 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,733 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,733 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,734 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,735 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,736 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,737 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,738 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,739 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,740 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,740 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,740 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,740 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,740 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,741 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,742 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,742 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,744 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,744 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,744 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:53:54,744 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,745 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,746 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,746 - root - DEBUG - [common.py:105] - Generated JSON string with 32242 characters
2025-09-02 13:53:54,746 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,746 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,746 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,747 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,747 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,747 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:54,747 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,748 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_PATTERN', 'assignment_operator': ':=', 'expression': ':NEW.PATTERN;', 'assignment_indent': 4}, {'condition': '', 'type': 'case_when', 'case_indent': 4, 'when_clauses': [{'type': 'when_statement', 'when_indent': 8, 'condition': 'V_PATTERN IS NOT NULL', 'then_statements': [{'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD;', 'statement_indent': 4}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_indent': 8}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_RULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.RULE_ID;', 'assignment_indent': 8}]}, {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS;', 'statement_indent': 4}, {'condition': ' INSERTING AND V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :NEW.PATTERN_ID AND PATTERN = :OLD.PATTERN;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.VALID_IND );', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}]}], 'else_statements': []}]
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,748 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,749 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,750 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:53:54,751 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,752 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,753 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,755 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,757 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,759 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,760 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,760 - root - DEBUG - [common.py:105] - Generated JSON string with 32242 characters
2025-09-02 13:53:54,760 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,766 - root - DEBUG - [common.py:105] - Created bbb.json
2025-09-02 13:53:54,767 - root - DEBUG - [common.py:105] - processing ccc_analysis.json
2025-09-02 13:53:54,767 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,767 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,768 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, NVL(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );', 'statement_indent': 12}]}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': '(UPDATING)', 'then_statements': [{'condition': " :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR NVL(:NEW.PLAN_PERIOD, '-') != NVL(:OLD.PLAN_PERIOD, '-') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE E_UPD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;', 'statement_indent': 12}]}]}], 'else_statements': []}]
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,768 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,769 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,770 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,770 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,770 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,771 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,772 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,773 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,774 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,775 - root - DEBUG - [common.py:105] - Generated JSON string with 15172 characters
2025-09-02 13:53:54,775 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,775 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,775 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,776 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, NVL(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );', 'statement_indent': 12}]}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': '(UPDATING)', 'then_statements': [{'condition': " :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR NVL(:NEW.PLAN_PERIOD, '-') != NVL(:OLD.PLAN_PERIOD, '-') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE E_UPD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;', 'statement_indent': 12}]}]}], 'else_statements': []}]
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,776 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,778 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,779 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,780 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,780 - root - DEBUG - [common.py:105] - Generated JSON string with 15172 characters
2025-09-02 13:53:54,781 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,782 - root - DEBUG - [common.py:105] - Created ccc.json
2025-09-02 13:53:54,783 - root - DEBUG - [common.py:105] - processing trigger1_analysis.json
2025-09-02 13:53:54,783 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,784 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,790 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,790 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,790 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:54,791 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,792 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:54,792 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,792 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,792 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,792 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,792 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,793 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,794 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,797 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,798 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,799 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,800 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,801 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,802 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,803 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,804 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,805 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,806 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,807 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,808 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,809 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,810 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,811 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,812 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:54,813 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,814 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,815 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,817 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,819 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,821 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,822 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,823 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,825 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,826 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,827 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,828 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,829 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,830 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,831 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,832 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,833 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,834 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,835 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,836 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,838 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,839 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,839 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,839 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,839 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,839 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-09-02 13:53:54,840 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,841 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,842 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,843 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,844 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,845 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:54,846 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,847 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,849 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:54,850 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,851 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,852 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,853 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,855 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,856 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,857 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,869 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,870 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,871 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,871 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,871 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,871 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,871 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,872 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,872 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,872 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,872 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,872 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,873 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,874 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,875 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,876 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,877 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,878 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,879 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,880 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,880 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,880 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,881 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,882 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,884 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,885 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:54,886 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,887 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:54,888 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,889 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,890 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,891 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:54,891 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,891 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,891 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,891 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,892 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,893 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,894 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:54,896 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:54,898 - root - DEBUG - [common.py:105] - Generated JSON string with 197058 characters
2025-09-02 13:53:54,898 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:54,898 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:54,898 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:54,905 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:54,905 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:54,905 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:54,905 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:54,906 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,906 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,907 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,908 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,909 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,910 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,911 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,912 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,913 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,914 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,915 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,915 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,915 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,915 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,916 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,917 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,918 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,919 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,920 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,922 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,922 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,924 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,925 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-09-02 13:53:54,926 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,927 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,928 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,929 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,930 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,930 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,930 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,930 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,930 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,932 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,932 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,932 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,932 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,933 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,933 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,933 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,933 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,934 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,934 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,934 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,934 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,934 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,935 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,936 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,937 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,938 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,938 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,938 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,938 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,938 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,939 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,940 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,940 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,940 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,940 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,940 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,941 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,942 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,944 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:54,945 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,946 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,947 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:54,948 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,949 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:54,950 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,951 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,952 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,953 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,954 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,958 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,959 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,960 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,961 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,961 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,961 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,961 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,962 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-09-02 13:53:54,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,965 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,966 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,967 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,968 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,969 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,970 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,970 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,971 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,972 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:54,973 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,974 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,975 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:54,976 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,979 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,980 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,982 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:53:54,983 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,984 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:54,985 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:53:54,986 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:53:54,987 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,988 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,989 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,990 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,990 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,990 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:53:54,990 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,991 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,992 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,993 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,994 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,995 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:54,996 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,998 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:53:54,999 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:55,000 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,001 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,002 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:55,004 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,006 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:53:55,008 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:55,009 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:55,010 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:53:55,010 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:53:55,010 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,010 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:53:55,011 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:55,012 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,013 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,014 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,015 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,018 - root - DEBUG - [common.py:105] - Generated JSON string with 197058 characters
2025-09-02 13:53:55,018 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,020 - root - DEBUG - [common.py:105] - Created trigger1.json
2025-09-02 13:53:55,021 - root - DEBUG - [common.py:105] - processing trigger2_analysis.json
2025-09-02 13:53:55,021 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,022 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,026 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,026 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,026 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:55,026 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,027 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,028 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,030 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,031 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,032 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,033 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,033 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,033 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,033 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,033 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,034 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,035 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,036 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,037 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,038 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,039 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,040 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,041 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,041 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,041 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,042 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,043 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,044 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,045 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,046 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,047 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,048 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,049 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,050 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,051 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,052 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,053 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,054 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,055 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,056 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,057 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,058 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,059 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,060 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,061 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,062 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,063 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,064 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,065 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,066 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,067 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,068 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,069 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,072 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,075 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,075 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,075 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,076 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,077 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,078 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,079 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,080 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,081 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,082 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,083 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,084 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,085 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,086 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,087 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,088 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,089 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,090 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,091 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,091 - root - DEBUG - [common.py:105] - Generated JSON string with 76883 characters
2025-09-02 13:53:55,092 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,092 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,092 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,093 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,093 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,093 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:55,093 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,093 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,094 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,095 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,096 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,097 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,098 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,099 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,100 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,101 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,102 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,103 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,104 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,105 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,106 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,107 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:55,108 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,109 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,110 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,110 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,110 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,111 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,112 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,113 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,114 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,115 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,116 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,117 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,118 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,119 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,120 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,121 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,122 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,123 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,124 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,125 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,126 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,127 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,128 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,129 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:53:55,130 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,131 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,132 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,133 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,134 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:53:55,135 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,136 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,137 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,138 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:53:55,139 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,140 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,140 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,140 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,140 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,140 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:53:55,141 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,142 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,143 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,143 - root - DEBUG - [common.py:105] - Generated JSON string with 76883 characters
2025-09-02 13:53:55,143 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,144 - root - DEBUG - [common.py:105] - Created trigger2.json
2025-09-02 13:53:55,145 - root - DEBUG - [common.py:105] - processing trigger3_analysis.json
2025-09-02 13:53:55,145 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,145 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,146 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,146 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,147 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,147 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,148 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,149 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,151 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,152 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,153 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,154 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,155 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,156 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,157 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,158 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,159 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,160 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,161 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,162 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,163 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,164 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,165 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,166 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,167 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,168 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,169 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,170 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,171 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,172 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,173 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,174 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,175 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,176 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,177 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,178 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,179 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,181 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,182 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,183 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,184 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,185 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,186 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,187 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,188 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,189 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,190 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,193 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,194 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,194 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,194 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,195 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,196 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,197 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,197 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,197 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,198 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,199 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,199 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,199 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,199 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,199 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,201 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,201 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,202 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,202 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,203 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,204 - root - DEBUG - [common.py:105] - Generated JSON string with 85760 characters
2025-09-02 13:53:55,204 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,204 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,204 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,207 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,207 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,207 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:55,207 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,208 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,208 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,209 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:53:55,210 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,211 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,212 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,212 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,212 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,212 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,212 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,213 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,213 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,213 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,213 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,214 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,215 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,216 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,217 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,218 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,219 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,219 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,219 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,219 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,220 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,220 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,220 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,221 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,222 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,223 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,224 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,225 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,226 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,227 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,228 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,229 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,230 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,231 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,232 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,233 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,234 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,235 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,236 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,237 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,238 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,239 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,240 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,240 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,240 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:53:55,240 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,241 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:53:55,242 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,243 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:53:55,244 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,245 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,246 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:53:55,247 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,248 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,249 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,250 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,251 - root - DEBUG - [common.py:105] - Generated JSON string with 85760 characters
2025-09-02 13:53:55,252 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,253 - root - DEBUG - [common.py:105] - Created trigger3.json
2025-09-02 13:53:55,254 - root - DEBUG - [common.py:105] - processing trigger4_analysis.json
2025-09-02 13:53:55,254 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,254 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,255 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'function_calling', 'function_name': 'PERFORM MDMTOOL."mdmt_util_history$write_history"', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_ACTION', 'V_TABLE_NAME', 'V_SCHEMA_NAME', 'COL_NAMES', 'COL_NEW_VALUES', 'COL_OLD_VALUES'], 'named_params': {}, 'raw_text': 'V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES'}}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,255 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:53:55,256 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,257 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,258 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,259 - root - DEBUG - [common.py:105] - Generated JSON string with 22171 characters
2025-09-02 13:53:55,259 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,259 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,259 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,260 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,260 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,260 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,260 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,261 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'function_calling', 'function_name': 'PERFORM MDMTOOL."mdmt_util_history$write_history"', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_ACTION', 'V_TABLE_NAME', 'V_SCHEMA_NAME', 'COL_NAMES', 'COL_NEW_VALUES', 'COL_OLD_VALUES'], 'named_params': {}, 'raw_text': 'V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES'}}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,261 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,262 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,263 - root - DEBUG - [common.py:105] - Generated JSON string with 22171 characters
2025-09-02 13:53:55,264 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,264 - root - DEBUG - [common.py:105] - Created trigger4.json
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - processing trigger5_analysis.json
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,265 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,265 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,266 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,267 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,268 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,269 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,270 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,271 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,271 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,272 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,273 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,274 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,275 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - Generated JSON string with 15068 characters
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,276 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,277 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,277 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,278 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:53:55,279 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,280 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,280 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,280 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,281 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,282 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,283 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:53:55,284 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:53:55,285 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,286 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:53:55,287 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:53:55,288 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,290 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,290 - root - DEBUG - [common.py:105] - Generated JSON string with 15068 characters
2025-09-02 13:53:55,290 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,291 - root - DEBUG - [common.py:105] - Created trigger5.json
2025-09-02 13:53:55,292 - root - DEBUG - [common.py:105] - processing trigger6_analysis.json
2025-09-02 13:53:55,292 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,292 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,293 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,293 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,293 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:55,293 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,294 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,294 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,295 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,296 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,297 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,298 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,299 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,300 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,301 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,302 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,303 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,304 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,305 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,306 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,307 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,308 - root - DEBUG - [common.py:105] - Generated JSON string with 26867 characters
2025-09-02 13:53:55,308 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,308 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,308 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,309 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,309 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,310 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,311 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,312 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,313 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,314 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,315 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,316 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,317 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,318 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,319 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,323 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:53:55,324 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] - Generated JSON string with 26867 characters
2025-09-02 13:53:55,325 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,327 - root - DEBUG - [common.py:105] - Created trigger6.json
2025-09-02 13:53:55,327 - root - DEBUG - [common.py:105] - processing yyy_analysis.json
2025-09-02 13:53:55,327 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,327 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,330 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,330 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,330 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:55,330 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,331 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,331 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,331 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,331 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,331 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,332 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,333 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,334 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,335 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,336 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,337 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,338 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,339 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,340 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,341 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,342 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,343 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,344 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,345 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,346 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,347 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,348 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,349 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,350 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,351 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,351 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,351 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,351 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,352 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:53:55,353 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,354 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,355 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,356 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,357 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,358 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,359 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,360 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,360 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,360 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,360 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,361 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,361 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,362 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,363 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,364 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,365 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,366 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,367 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,368 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,369 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,370 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,371 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,372 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,373 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,374 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,375 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,376 - root - DEBUG - [common.py:105] - Generated JSON string with 116830 characters
2025-09-02 13:53:55,377 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,377 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,377 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,379 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,379 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,379 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:55,379 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,379 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:53:55,380 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,380 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,380 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,380 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,381 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,382 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,383 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,384 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,385 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,386 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,387 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,388 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,389 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,390 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,391 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,392 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,393 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,394 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,395 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,396 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,397 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,398 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,399 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,400 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,402 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,402 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,402 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,403 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,404 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,405 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,406 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,407 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,408 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,409 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,410 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,411 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,412 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,413 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,414 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,415 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,416 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:53:55,417 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,418 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,419 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:53:55,420 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:53:55,421 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:53:55,421 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,421 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,421 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,422 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,423 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,424 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,425 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,426 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,427 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:53:55,428 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,429 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:53:55,430 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:53:55,430 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:53:55,431 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:53:55,431 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,431 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:53:55,432 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,433 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:53:55,434 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:53:55,435 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,435 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,435 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:53:55,435 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,436 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,438 - root - DEBUG - [common.py:105] - Generated JSON string with 116830 characters
2025-09-02 13:53:55,438 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - Created yyy.json
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - processing zzz_analysis.json
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,443 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,444 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'indent': 4, 'line': '    IF DELETING THEN'}]
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - Generated JSON string with 3242 characters
2025-09-02 13:53:55,444 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:53:55,445 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'indent': 4, 'line': '    IF DELETING THEN'}]
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:53:55,445 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:53:55,446 - root - DEBUG - [common.py:105] - Generated JSON string with 3242 characters
2025-09-02 13:53:55,446 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:53:55,446 - root - DEBUG - [common.py:105] - Created zzz.json
2025-09-02 13:53:55,447 - root - INFO - [common.py:110] - ✓ PL/JSON conversion complete! (Duration: 0.74 seconds)
2025-09-02 13:53:55,447 - root - DEBUG - [common.py:105] - Step 5 completed in 0.74 seconds
2025-09-02 13:53:55,447 - root - INFO - [common.py:110] - Step 6: Converting PL/JSON to PostgreSQL format...
2025-09-02 13:53:55,448 - root - DEBUG - [common.py:105] - Starting Step 6: PL/JSON → PostgreSQL format JSON
2025-09-02 13:53:55,448 - root - INFO - [common.py:110] - === Starting PL/JSON to PostgreSQL format conversion ===
2025-09-02 13:53:55,448 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:53:55,449 - root - INFO - [common.py:110] - Source directory: 'files/format_pl_json'
2025-09-02 13:53:55,449 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:53:55,449 - root - INFO - [common.py:110] - File pattern: '.json'
2025-09-02 13:53:55,451 - root - INFO - [common.py:110] - Output suffix: '_postgresql.json'
2025-09-02 13:53:55,452 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:53:55,452 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:53:55,452 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:53:55,452 - root - DEBUG - [common.py:105] - Files matching pattern '.json': ['aaa.json', 'bbb.json', 'ccc.json', 'trigger1.json', 'trigger2.json', 'trigger3.json', 'trigger4.json', 'trigger5.json', 'trigger6.json', 'yyy.json', 'zzz.json']
2025-09-02 13:53:55,452 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa.json ===
2025-09-02 13:53:55,453 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\aaa.json
2025-09-02 13:53:55,453 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_postgresql.json
2025-09-02 13:53:55,453 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger aaa.json ===
2025-09-02 13:53:55,453 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\aaa.json
2025-09-02 13:53:55,454 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:55,454 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:55,454 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,454 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,487 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,488 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,516 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,517 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:55,518 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:53:55,518 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,527 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,529 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,538 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Main block rendering took 0.021s
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.022s
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,539 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,573 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,574 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,591 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,591 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,591 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,591 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,591 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,592 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:55,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:53:55,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,593 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,600 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,602 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,602 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,602 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Main block rendering took 0.011s
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.012s
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,602 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,603 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,623 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,624 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,635 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,635 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,635 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,636 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,636 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,636 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,636 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,640 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Main block rendering took 0.006s
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.007s
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:55,642 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\aaa_postgresql.json
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\aaa_postgresql.json
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger aaa.json ===
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - ✓ Created aaa_postgresql.json
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb.json ===
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\bbb.json
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_postgresql.json
2025-09-02 13:53:55,643 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger bbb.json ===
2025-09-02 13:53:55,644 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\bbb.json
2025-09-02 13:53:55,644 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:55,644 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:55,644 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,644 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,664 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,664 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,694 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,695 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:55,695 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,695 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,695 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,696 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,696 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:55,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:55,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:55,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,701 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,705 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,708 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,708 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,709 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,711 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:53:55,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:53:55,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,715 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:53:55,715 - root - DEBUG - [common.py:105] - Main block rendering took 0.020s
2025-09-02 13:53:55,715 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,715 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:53:55,716 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.021s
2025-09-02 13:53:55,716 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,716 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,716 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,737 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,738 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,753 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,754 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:55,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:55,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,760 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,761 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,762 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:53:55,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:53:55,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - Main block rendering took 0.015s
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.016s
2025-09-02 13:53:55,769 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,771 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,772 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,794 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,794 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,808 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:55,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:55,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:55,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,810 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,811 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,812 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,813 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,813 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,813 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,814 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,814 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,815 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,816 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:55,816 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:55,817 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,817 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,819 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,819 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,821 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:53:55,824 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,825 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:53:55,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,826 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:53:55,826 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:53:55,826 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,827 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:53:55,827 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.019s
2025-09-02 13:53:55,827 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,827 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:55,827 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\bbb_postgresql.json
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\bbb_postgresql.json
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger bbb.json ===
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - ✓ Created bbb_postgresql.json
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc.json ===
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\ccc.json
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_postgresql.json
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger ccc.json ===
2025-09-02 13:53:55,829 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\ccc.json
2025-09-02 13:53:55,830 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:55,830 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:55,830 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,830 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,849 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,849 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,864 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,864 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,864 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,864 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,864 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,864 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,865 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,865 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,865 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:55,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,866 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,867 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,873 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,873 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,875 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,876 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,876 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,876 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - Main block rendering took 0.011s
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.012s
2025-09-02 13:53:55,876 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,877 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,877 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,898 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,898 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,913 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,914 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:55,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,918 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,921 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,924 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,925 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Main block rendering took 0.012s
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.013s
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,927 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,954 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:55,954 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:55,969 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:55,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:55,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:55,970 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:55,970 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:55,970 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:55,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:55,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:55,971 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:55,971 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:55,971 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:55,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:55,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:55,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:55,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:55,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:55,982 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:55,986 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:55,986 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:55,986 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Main block rendering took 0.015s
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.017s
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:55,986 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\ccc_postgresql.json
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\ccc_postgresql.json
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger ccc.json ===
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - ✓ Created ccc_postgresql.json
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1.json ===
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger1.json
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger1.json ===
2025-09-02 13:53:55,988 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger1.json
2025-09-02 13:53:55,992 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:55,992 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:55,992 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:55,992 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,016 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,016 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,033 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,033 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:56,033 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,033 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,034 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,034 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,034 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:53:56,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,040 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,041 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,043 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,044 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,046 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,046 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,050 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,050 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,052 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,052 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,053 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,054 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,054 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,054 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,056 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,057 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,058 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,058 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,059 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,059 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,061 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,064 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,065 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,066 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,069 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,085 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,086 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,087 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,089 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,092 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,095 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,098 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,101 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,104 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,105 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,117 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,117 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,121 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,123 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,123 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,124 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,127 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,128 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,128 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,129 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,129 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,130 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,132 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,133 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,133 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,134 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,134 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,135 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,144 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,145 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,147 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,147 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,153 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,156 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,156 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,157 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,157 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,158 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,158 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,159 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,159 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,160 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,161 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,162 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,168 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,169 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,172 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,173 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,174 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,193 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,210 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,216 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,218 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,221 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,223 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,223 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,224 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,226 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,226 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,227 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:53:56,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:53:56,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,231 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,231 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,231 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,232 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - Main block rendering took 0.199s
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.200s
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,233 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,234 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,262 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,262 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,311 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,312 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:53:56,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,323 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,323 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,323 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,323 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,330 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,331 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,339 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,340 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,351 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,352 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,352 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,357 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,358 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,358 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,358 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,358 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,359 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,359 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,362 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,363 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,363 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,364 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,364 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,364 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,365 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,368 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,368 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,370 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,371 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,371 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,372 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,373 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,374 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,375 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,376 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,377 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,379 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,379 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,379 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,380 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,380 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,381 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,382 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,383 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,392 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,392 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,394 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,396 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,401 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,401 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,403 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,404 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,405 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,406 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,406 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,407 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,407 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,408 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,408 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,412 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,412 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,413 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,414 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,414 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,416 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,416 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,417 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,417 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,419 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,419 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,420 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,421 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,422 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,424 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,424 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,425 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:53:56,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:53:56,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,427 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,427 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:53:56,427 - root - DEBUG - [common.py:105] - Main block rendering took 0.115s
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.116s
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,428 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,446 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,446 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,457 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,457 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:56,457 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,457 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,457 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,458 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,458 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:53:56,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,459 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,476 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,476 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,479 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,479 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,482 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,483 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,483 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,486 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,486 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,487 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,489 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,489 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,491 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,493 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,493 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,495 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,495 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,496 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,496 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,497 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,497 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,498 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,498 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,498 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,500 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,503 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,506 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,507 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,508 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,509 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,509 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,509 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,511 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,512 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,512 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,513 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,513 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,513 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,518 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,519 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,519 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,523 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,524 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,525 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,525 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,525 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,526 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,528 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,528 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,529 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,529 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,530 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,530 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,533 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,533 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,533 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,534 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,534 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,537 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,539 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,539 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,540 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,545 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,547 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:56,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,550 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,552 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,552 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,553 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,554 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,554 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,558 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,559 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,560 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,561 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:56,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,565 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:53:56,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,566 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:53:56,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,568 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:53:56,568 - root - DEBUG - [common.py:105] - Main block rendering took 0.111s
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.112s
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:56,569 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger1_postgresql.json
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger1.json ===
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - ✓ Created trigger1_postgresql.json
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2.json ===
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger2.json
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:53:56,577 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger2.json ===
2025-09-02 13:53:56,578 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger2.json
2025-09-02 13:53:56,578 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:56,578 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:56,578 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,578 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,595 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,595 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,606 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,606 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,606 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,606 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:56,606 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,606 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,606 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,607 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,607 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,607 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:53:56,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,608 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,608 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,609 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,613 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,613 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,614 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,615 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,616 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,617 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,617 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,618 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,618 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,619 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,620 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,620 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,621 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,623 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,624 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,624 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,625 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,626 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,627 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,631 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,632 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,634 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,638 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,639 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,640 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,641 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,643 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:53:56,643 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,643 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,649 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,652 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,653 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,658 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,658 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Main block rendering took 0.052s
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.053s
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,659 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,677 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,677 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,694 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,694 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:56,694 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,695 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,695 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,695 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,695 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:53:56,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,700 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,701 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,702 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,705 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,705 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,709 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,711 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,717 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,718 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,718 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,720 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,721 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,723 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,723 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,724 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:53:56,724 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,724 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,725 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,726 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,726 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,727 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,728 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,730 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,730 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,732 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,733 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,733 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:53:56,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Main block rendering took 0.040s
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.041s
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,735 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,752 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,752 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,763 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,763 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:56,763 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,763 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,763 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,764 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,764 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:53:56,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,772 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,775 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,778 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,778 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:56,778 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,779 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,780 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,783 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,794 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,795 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,796 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:56,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,797 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:53:56,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,800 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,801 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,802 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,803 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:56,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:56,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:53:56,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,809 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,810 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,810 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,810 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - Main block rendering took 0.046s
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.047s
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,810 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:56,811 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger2_postgresql.json
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger2.json ===
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - ✓ Created trigger2_postgresql.json
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3.json ===
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger3.json
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger3.json ===
2025-09-02 13:53:56,815 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger3.json
2025-09-02 13:53:56,816 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:56,816 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:56,816 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,816 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,835 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,835 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,845 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,849 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,849 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,850 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,851 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,852 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,853 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,853 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,857 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:53:56,857 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,858 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:53:56,858 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,858 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,858 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:53:56,858 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,859 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,859 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,859 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,859 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:53:56,859 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,865 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:53:56,865 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:53:56,866 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:53:56,866 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:53:56,867 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,867 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,867 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,867 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Main block rendering took 0.024s
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.025s
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,870 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,887 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,887 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,898 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,898 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:56,898 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,898 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,899 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,899 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,899 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,900 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,900 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,901 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,901 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,901 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,902 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,902 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,903 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,903 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,903 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,904 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,904 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,905 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,905 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,907 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,907 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,907 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,908 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,909 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,909 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:53:56,909 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,910 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:53:56,910 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,911 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,912 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:53:56,912 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,913 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,913 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,913 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,913 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:53:56,913 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,914 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:53:56,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:53:56,914 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:53:56,914 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:53:56,914 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,915 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,915 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,915 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,915 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:53:56,916 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,917 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.019s
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,917 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,932 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,932 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,943 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:56,943 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,944 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:56,944 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,945 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,945 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,945 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,946 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,946 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,947 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,947 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,947 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,949 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,949 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,950 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,951 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,952 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,952 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,952 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,953 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,953 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,953 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,954 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,954 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:56,955 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:53:56,955 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,955 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:53:56,955 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,956 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,956 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:53:56,956 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,956 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:56,956 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,956 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,956 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:53:56,956 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,957 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:53:56,957 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:53:56,958 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:53:56,958 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:53:56,958 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:56,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:56,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:56,960 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - Main block rendering took 0.017s
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.018s
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:56,961 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger3_postgresql.json
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger3.json ===
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - ✓ Created trigger3_postgresql.json
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4.json ===
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger4.json
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger4.json ===
2025-09-02 13:53:56,963 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger4.json
2025-09-02 13:53:56,964 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:56,964 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:56,964 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:56,964 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,976 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:56,976 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:56,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:56,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:56,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:56,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:56,987 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:56,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:56,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:56,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:56,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:56,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:56,996 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,001 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:53:57,001 - root - DEBUG - [common.py:105] - Main block rendering took 0.014s
2025-09-02 13:53:57,001 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,001 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:53:57,002 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.014s
2025-09-02 13:53:57,002 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,002 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,002 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,016 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,016 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,028 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,029 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,029 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,030 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,032 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Main block rendering took 0.014s
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.015s
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,042 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,043 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,056 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,056 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,067 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,069 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,071 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Main block rendering took 0.016s
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.016s
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:57,083 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:53:57,084 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger4_postgresql.json
2025-09-02 13:53:57,084 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger4.json ===
2025-09-02 13:53:57,084 - root - DEBUG - [common.py:105] - ✓ Created trigger4_postgresql.json
2025-09-02 13:53:57,084 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5.json ===
2025-09-02 13:53:57,084 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger5.json
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger5.json ===
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger5.json
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,085 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,099 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,099 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,109 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,109 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,109 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,110 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,111 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,112 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,112 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,112 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:57,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,113 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,113 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,113 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,114 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,115 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,117 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Main block rendering took 0.005s
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.008s
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,117 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,132 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,132 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,141 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,141 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,141 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,141 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,142 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,142 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,142 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,144 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,144 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,145 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.005s
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,146 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,163 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,163 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,175 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,176 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,176 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,179 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:57,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Main block rendering took 0.006s
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.006s
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:57,181 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger5_postgresql.json
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger5.json ===
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - ✓ Created trigger5_postgresql.json
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6.json ===
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger6.json
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:53:57,182 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger6.json ===
2025-09-02 13:53:57,183 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger6.json
2025-09-02 13:53:57,183 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:57,183 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:57,183 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,183 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,199 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,199 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,211 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,212 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,216 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,216 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,216 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Main block rendering took 0.008s
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.009s
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,220 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,235 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,235 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,247 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,248 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,250 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,251 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,252 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,252 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,252 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,253 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,253 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,253 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:53:57,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.009s
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,256 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,257 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,275 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,275 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,286 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,287 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,288 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,289 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,289 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,290 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,292 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,292 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,294 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.009s
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:57,296 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger6_postgresql.json
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger6.json ===
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - ✓ Created trigger6_postgresql.json
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy.json ===
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\yyy.json
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_postgresql.json
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger yyy.json ===
2025-09-02 13:53:57,297 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\yyy.json
2025-09-02 13:53:57,299 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:57,299 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:57,299 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,299 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,314 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,314 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,325 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,326 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:57,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,330 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,330 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,331 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,331 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,339 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,339 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,340 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,342 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,342 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,351 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,352 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,352 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,352 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,356 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:53:57,356 - root - DEBUG - [common.py:105] - Main block rendering took 0.031s
2025-09-02 13:53:57,356 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,357 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:53:57,357 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.031s
2025-09-02 13:53:57,357 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,357 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,357 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,373 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,374 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,384 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,384 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:57,384 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,384 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,384 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,385 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,385 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:57,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,388 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,389 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,390 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,390 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,391 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,392 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,393 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,393 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,394 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,396 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,396 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,402 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,403 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,405 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,406 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,407 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,408 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,410 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,411 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,412 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,413 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,413 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,415 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,416 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,416 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,417 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,418 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,419 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,420 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,421 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,422 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,424 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,424 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,424 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,425 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:53:57,425 - root - DEBUG - [common.py:105] - Main block rendering took 0.041s
2025-09-02 13:53:57,425 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,426 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:53:57,426 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.041s
2025-09-02 13:53:57,426 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,426 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,426 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,442 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,442 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,454 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,454 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,454 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,455 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,456 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:57,456 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,456 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,456 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,459 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,459 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,461 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,478 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,479 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,480 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,481 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,486 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,486 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,487 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,488 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,491 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,492 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,493 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,494 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,495 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,496 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,497 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,497 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,498 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,499 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,500 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,500 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,500 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,501 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,502 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Main block rendering took 0.047s
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.048s
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:57,502 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\yyy_postgresql.json
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\yyy_postgresql.json
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger yyy.json ===
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - ✓ Created yyy_postgresql.json
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz.json ===
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\zzz.json
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_postgresql.json
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger zzz.json ===
2025-09-02 13:53:57,505 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\zzz.json
2025-09-02 13:53:57,506 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:53:57,506 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:53:57,506 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,506 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,525 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,526 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,543 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,543 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,543 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,543 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,543 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: 
2025-09-02 13:53:57,544 - utilities.FormatSQL - WARNING - [FormatSQL.py:839] - Unknown statement type: unknown
2025-09-02 13:53:57,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Generated 6 lines in main execution block
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Final SQL contains 11 lines, 203 characters
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 11 lines generated in 0.001s
2025-09-02 13:53:57,544 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,545 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,545 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,571 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,572 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,595 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,595 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,595 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,595 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,596 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,596 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,596 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: 
2025-09-02 13:53:57,596 - utilities.FormatSQL - WARNING - [FormatSQL.py:839] - Unknown statement type: unknown
2025-09-02 13:53:57,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,596 - root - DEBUG - [common.py:105] - Generated 6 lines in main execution block
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Final SQL contains 11 lines, 203 characters
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 11 lines generated in 0.002s
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:53:57,597 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,626 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,626 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,646 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,647 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: 
2025-09-02 13:53:57,648 - utilities.FormatSQL - WARNING - [FormatSQL.py:839] - Unknown statement type: unknown
2025-09-02 13:53:57,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,648 - root - DEBUG - [common.py:105] - Generated 6 lines in main execution block
2025-09-02 13:53:57,648 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:57,648 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,649 - root - DEBUG - [common.py:105] - Final SQL contains 11 lines, 203 characters
2025-09-02 13:53:57,649 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 11 lines generated in 0.002s
2025-09-02 13:53:57,649 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:53:57,649 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:53:57,649 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\zzz_postgresql.json
2025-09-02 13:53:57,651 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\zzz_postgresql.json
2025-09-02 13:53:57,651 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger zzz.json ===
2025-09-02 13:53:57,651 - root - DEBUG - [common.py:105] - ✓ Created zzz_postgresql.json
2025-09-02 13:53:57,652 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:53:57,652 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:53:57,652 - root - INFO - [common.py:110] - === PL/JSON to PostgreSQL format conversion complete ===
2025-09-02 13:53:57,652 - root - INFO - [common.py:110] - ✓ PostgreSQL format conversion complete! (Duration: 2.20 seconds)
2025-09-02 13:53:57,653 - root - DEBUG - [common.py:105] - Step 6 completed in 2.20 seconds
2025-09-02 13:53:57,653 - root - INFO - [common.py:110] - Step 7: Converting JSON analysis directly to PostgreSQL SQL...
2025-09-02 13:53:57,653 - root - DEBUG - [common.py:105] - Starting Step 7: JSON analysis → PostgreSQL SQL
2025-09-02 13:53:57,653 - root - INFO - [common.py:110] - === Starting JSON analysis to PostgreSQL SQL conversion ===
2025-09-02 13:53:57,653 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:53:57,653 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-09-02 13:53:57,654 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:53:57,654 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-09-02 13:53:57,654 - root - INFO - [common.py:110] - Output suffix: '_postgresql.sql'
2025-09-02 13:53:57,654 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['aaa_analysis.json', 'bbb_analysis.json', 'ccc_analysis.json', 'trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_analysis.json ===
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Source path: files/format_json\aaa_analysis.json
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger aaa_analysis.json ===
2025-09-02 13:53:57,655 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\aaa_analysis.json
2025-09-02 13:53:57,656 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:57,656 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:57,656 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,683 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,683 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:57,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,714 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,715 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,715 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,715 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:57,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:53:57,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,717 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,717 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,718 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,725 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:57,725 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,725 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,725 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:53:57,725 - root - DEBUG - [common.py:105] - Main block rendering took 0.010s
2025-09-02 13:53:57,725 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,725 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1231 characters
2025-09-02 13:53:57,725 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.011s
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - Rendered SQL length: 1231 characters
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger aaa_analysis.json ===
2025-09-02 13:53:57,726 - root - DEBUG - [common.py:105] - ✓ Created aaa_analysis_postgresql.sql
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_analysis.json ===
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - Source path: files/format_json\bbb_analysis.json
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger bbb_analysis.json ===
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\bbb_analysis.json
2025-09-02 13:53:57,727 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:57,727 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,755 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,755 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:57,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,773 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,774 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,774 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,774 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:57,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:57,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,775 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:57,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,778 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,779 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,780 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,781 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,783 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,783 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:57,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:53:57,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:53:57,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,797 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:53:57,797 - root - DEBUG - [common.py:105] - Main block rendering took 0.024s
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2547 characters
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.025s
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - Rendered SQL length: 2547 characters
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:53:57,798 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger bbb_analysis.json ===
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - ✓ Created bbb_analysis_postgresql.sql
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_analysis.json ===
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - Source path: files/format_json\ccc_analysis.json
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger ccc_analysis.json ===
2025-09-02 13:53:57,799 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\ccc_analysis.json
2025-09-02 13:53:57,800 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:57,800 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:57,800 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,842 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,842 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,882 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,882 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:57,883 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,883 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,883 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,883 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,884 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,884 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,884 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:57,884 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,884 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,887 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:57,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:57,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:57,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:57,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:57,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:57,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:57,906 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - Main block rendering took 0.023s
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1694 characters
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.024s
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - Rendered SQL length: 1694 characters
2025-09-02 13:53:57,907 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:53:57,908 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:53:57,908 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger ccc_analysis.json ===
2025-09-02 13:53:57,908 - root - DEBUG - [common.py:105] - ✓ Created ccc_analysis_postgresql.sql
2025-09-02 13:53:57,908 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_analysis.json ===
2025-09-02 13:53:57,908 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-09-02 13:53:57,909 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:53:57,909 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger1_analysis.json ===
2025-09-02 13:53:57,909 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-09-02 13:53:57,911 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:57,911 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:57,911 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,946 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:57,946 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:57,987 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:57,987 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:57,987 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:57,987 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:57,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:57,988 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:53:57,988 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:57,988 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:57,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:57,988 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:57,989 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:57,989 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:57,989 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:57,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:57,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:57,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:53:57,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,996 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:57,999 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,008 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,012 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,012 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:58,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:58,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:58,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:58,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,018 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,018 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,020 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,029 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,029 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,031 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,040 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,046 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,052 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,054 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,056 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,057 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,058 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,061 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,065 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,066 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,073 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,075 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,084 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,085 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,087 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,087 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,088 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,088 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,088 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,089 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,093 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,094 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,095 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,098 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,099 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,101 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,105 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,105 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,106 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,114 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,114 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,115 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,115 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,123 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,124 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,125 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,127 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,128 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,128 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,129 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,132 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,133 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,133 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,135 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,135 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,136 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,136 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,137 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,144 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,147 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,149 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,149 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,152 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,156 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,157 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,159 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,160 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,161 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,161 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,162 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,162 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,163 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,163 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,164 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,164 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,168 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,169 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,171 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,172 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,173 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,174 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,176 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,180 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:58,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:53:58,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:58,183 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:58,184 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,185 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:53:58,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:53:58,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Main block rendering took 0.199s
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21197 characters
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.200s
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Rendered SQL length: 21197 characters
2025-09-02 13:53:58,188 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger1_analysis.json ===
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - ✓ Created trigger1_analysis_postgresql.sql
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_analysis.json ===
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-09-02 13:53:58,189 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:53:58,190 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger2_analysis.json ===
2025-09-02 13:53:58,190 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-09-02 13:53:58,191 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,191 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,191 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,215 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,215 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,228 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,228 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,228 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,228 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,228 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,228 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:53:58,229 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,229 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,229 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,229 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,229 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,230 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:58,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:53:58,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,233 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,234 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,235 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,237 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,243 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,243 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,244 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,246 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,248 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,250 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,252 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,257 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,260 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,263 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,264 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,265 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,265 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,267 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,267 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,268 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,269 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,275 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:58,275 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,278 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:58,278 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,279 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,282 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:53:58,282 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,283 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:53:58,283 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,284 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,286 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,288 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,289 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,294 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,299 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,302 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Main block rendering took 0.073s
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8099 characters
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.074s
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Rendered SQL length: 8099 characters
2025-09-02 13:53:58,302 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:53:58,319 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:53:58,319 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger2_analysis.json ===
2025-09-02 13:53:58,320 - root - DEBUG - [common.py:105] - ✓ Created trigger2_analysis_postgresql.sql
2025-09-02 13:53:58,321 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_analysis.json ===
2025-09-02 13:53:58,321 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-09-02 13:53:58,321 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:53:58,321 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger3_analysis.json ===
2025-09-02 13:53:58,321 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-09-02 13:53:58,322 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,322 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,322 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,388 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,388 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,428 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,428 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,428 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,428 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,428 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,428 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:53:58,428 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,429 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,429 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,429 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,429 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:58,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:58,433 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:58,433 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,433 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:58,434 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:58,434 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,435 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:58,435 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,437 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,439 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,441 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,442 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,443 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,445 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,447 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,448 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,451 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,453 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,456 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,459 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,465 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:53:58,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,466 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (TO_CHAR(:NEW.VALID_FROM, ...'
2025-09-02 13:53:58,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,466 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:58,466 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:53:58,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,467 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:53:58,467 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:58,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,467 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:53:58,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,468 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (V_COMPANY_TYPE_CD = 'L') ...'
2025-09-02 13:53:58,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:53:58,469 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:53:58,469 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:53:58,469 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:53:58,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,469 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,476 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Main block rendering took 0.048s
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7759 characters
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.050s
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Rendered SQL length: 7759 characters
2025-09-02 13:53:58,478 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger3_analysis.json ===
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - ✓ Created trigger3_analysis_postgresql.sql
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_analysis.json ===
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-09-02 13:53:58,494 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:53:58,495 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger4_analysis.json ===
2025-09-02 13:53:58,495 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-09-02 13:53:58,495 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,495 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,495 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,524 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,524 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,535 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,536 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,536 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:58,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:58,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,537 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,537 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:58,550 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,550 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:53:58,550 - root - DEBUG - [common.py:105] - Main block rendering took 0.015s
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4100 characters
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.016s
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - Rendered SQL length: 4100 characters
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:53:58,551 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger4_analysis.json ===
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - ✓ Created trigger4_analysis_postgresql.sql
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_analysis.json ===
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger5_analysis.json ===
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-09-02 13:53:58,552 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,552 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,569 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,572 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,586 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,586 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,586 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,587 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:58,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,588 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,590 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,591 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,593 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:53:58,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Main block rendering took 0.008s
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1285 characters
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.009s
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Rendered SQL length: 1285 characters
2025-09-02 13:53:58,595 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger5_analysis.json ===
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - ✓ Created trigger5_analysis_postgresql.sql
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_analysis.json ===
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger6_analysis.json ===
2025-09-02 13:53:58,596 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-09-02 13:53:58,596 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,597 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,597 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,614 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,614 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,627 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,627 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,628 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:53:58,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,631 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,634 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,634 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:53:58,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,639 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:53:58,639 - root - DEBUG - [common.py:105] - Main block rendering took 0.011s
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2350 characters
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.012s
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - Rendered SQL length: 2350 characters
2025-09-02 13:53:58,640 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:53:58,641 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:53:58,641 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger6_analysis.json ===
2025-09-02 13:53:58,641 - root - DEBUG - [common.py:105] - ✓ Created trigger6_analysis_postgresql.sql
2025-09-02 13:53:58,641 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_analysis.json ===
2025-09-02 13:53:58,641 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-09-02 13:53:58,642 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:53:58,642 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger yyy_analysis.json ===
2025-09-02 13:53:58,642 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-09-02 13:53:58,642 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,643 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,643 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,659 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,659 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,672 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:58,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:53:58,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,678 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,678 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,679 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,680 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,681 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,686 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,686 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,687 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,687 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,692 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:53:58,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,701 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,702 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,705 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:53:58,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:53:58,708 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,709 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:53:58,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:53:58,711 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,712 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,712 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:53:58,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:53:58,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:53:58,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:53:58,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,714 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:53:58,714 - root - DEBUG - [common.py:105] - Main block rendering took 0.042s
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10885 characters
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.043s
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - Rendered SQL length: 10885 characters
2025-09-02 13:53:58,715 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger yyy_analysis.json ===
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - ✓ Created yyy_analysis_postgresql.sql
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_analysis.json ===
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger zzz_analysis.json ===
2025-09-02 13:53:58,716 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-09-02 13:53:58,716 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:53:58,717 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:53:58,717 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,736 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:53:58,736 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:53:58,749 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:53:58,750 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:53:58,750 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: 
2025-09-02 13:53:58,751 - utilities.FormatSQL - WARNING - [FormatSQL.py:839] - Unknown statement type: unknown
2025-09-02 13:53:58,751 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - Generated 6 lines in main execution block
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - Final SQL contains 11 lines, 203 characters
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 11 lines generated in 0.002s
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:53:58,751 - root - DEBUG - [common.py:105] - Rendered SQL length: 203 characters
2025-09-02 13:53:58,752 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:53:58,752 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:53:58,752 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger zzz_analysis.json ===
2025-09-02 13:53:58,752 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis_postgresql.sql
2025-09-02 13:53:58,752 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:53:58,753 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:53:58,753 - root - INFO - [common.py:110] - === JSON analysis to PostgreSQL SQL conversion complete ===
2025-09-02 13:53:58,753 - root - INFO - [common.py:110] - ✓ Direct PostgreSQL SQL conversion complete! (Duration: 1.10 seconds)
2025-09-02 13:53:58,753 - root - DEBUG - [common.py:105] - Step 7 completed in 1.10 seconds
2025-09-02 13:53:58,753 - root - INFO - [common.py:110] - Step 8: Converting PostgreSQL format JSON to final SQL...
2025-09-02 13:53:58,753 - root - DEBUG - [common.py:105] - Starting Step 8: PostgreSQL JSON → SQL output files
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - === Starting PostgreSQL format to SQL conversion ===
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - Source directory: 'files/format_plsql'
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - File pattern: '_postgresql.json'
2025-09-02 13:53:58,754 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Files matching pattern '_postgresql.json': ['aaa_postgresql.json', 'bbb_postgresql.json', 'ccc_postgresql.json', 'trigger1_postgresql.json', 'trigger2_postgresql.json', 'trigger3_postgresql.json', 'trigger4_postgresql.json', 'trigger5_postgresql.json', 'trigger6_postgresql.json', 'yyy_postgresql.json', 'zzz_postgresql.json']
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_postgresql.json ===
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\aaa_postgresql.json
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_postgresql.sql
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger aaa_postgresql.json ===
2025-09-02 13:53:58,755 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\aaa_postgresql.json
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\aaa_postgresql.sql
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\aaa_postgresql.sql
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger aaa_postgresql.json ===
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - ✓ Created aaa_postgresql.sql
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_postgresql.json ===
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\bbb_postgresql.json
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_postgresql.sql
2025-09-02 13:53:58,756 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger bbb_postgresql.json ===
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\bbb_postgresql.json
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\bbb_postgresql.sql
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\bbb_postgresql.sql
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger bbb_postgresql.json ===
2025-09-02 13:53:58,757 - root - DEBUG - [common.py:105] - ✓ Created bbb_postgresql.sql
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_postgresql.json ===
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\ccc_postgresql.json
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_postgresql.sql
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger ccc_postgresql.json ===
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\ccc_postgresql.json
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\ccc_postgresql.sql
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\ccc_postgresql.sql
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger ccc_postgresql.json ===
2025-09-02 13:53:58,758 - root - DEBUG - [common.py:105] - ✓ Created ccc_postgresql.sql
2025-09-02 13:53:58,759 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_postgresql.json ===
2025-09-02 13:53:58,759 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:53:58,759 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:53:58,759 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger1_postgresql.json ===
2025-09-02 13:53:58,759 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:53:58,760 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,760 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,761 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,761 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:53:58,761 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:53:58,761 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger1_postgresql.json ===
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - ✓ Created trigger1_postgresql.sql
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_postgresql.json ===
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger2_postgresql.json ===
2025-09-02 13:53:58,762 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger2_postgresql.json ===
2025-09-02 13:53:58,763 - root - DEBUG - [common.py:105] - ✓ Created trigger2_postgresql.sql
2025-09-02 13:53:58,764 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_postgresql.json ===
2025-09-02 13:53:58,764 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:53:58,764 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:53:58,764 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger3_postgresql.json ===
2025-09-02 13:53:58,764 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:53:58,765 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,765 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,765 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,765 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger3_postgresql.json ===
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - ✓ Created trigger3_postgresql.sql
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_postgresql.json ===
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger4_postgresql.json ===
2025-09-02 13:53:58,766 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger4_postgresql.json ===
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - ✓ Created trigger4_postgresql.sql
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_postgresql.json ===
2025-09-02 13:53:58,767 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger5_postgresql.json ===
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger5_postgresql.json ===
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - ✓ Created trigger5_postgresql.sql
2025-09-02 13:53:58,768 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_postgresql.json ===
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger6_postgresql.json ===
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,769 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger6_postgresql.json ===
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - ✓ Created trigger6_postgresql.sql
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_postgresql.json ===
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\yyy_postgresql.json
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_postgresql.sql
2025-09-02 13:53:58,772 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger yyy_postgresql.json ===
2025-09-02 13:53:58,773 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\yyy_postgresql.json
2025-09-02 13:53:58,773 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,773 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,773 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,773 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\yyy_postgresql.sql
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\yyy_postgresql.sql
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger yyy_postgresql.json ===
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - ✓ Created yyy_postgresql.sql
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_postgresql.json ===
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\zzz_postgresql.json
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_postgresql.sql
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger zzz_postgresql.json ===
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\zzz_postgresql.json
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:53:58,775 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\zzz_postgresql.sql
2025-09-02 13:53:58,776 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\zzz_postgresql.sql
2025-09-02 13:53:58,776 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger zzz_postgresql.json ===
2025-09-02 13:53:58,776 - root - DEBUG - [common.py:105] - ✓ Created zzz_postgresql.sql
2025-09-02 13:53:58,776 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:53:58,776 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:53:58,776 - root - INFO - [common.py:110] - === PostgreSQL format to SQL conversion complete ===
2025-09-02 13:53:58,777 - root - INFO - [common.py:110] - ✓ Final SQL generation complete! (Duration: 0.02 seconds)
2025-09-02 13:53:58,777 - root - DEBUG - [common.py:105] - Step 8 completed in 0.02 seconds
2025-09-02 13:53:58,777 - root - INFO - [common.py:110] - === Batch conversion finished successfully ===
2025-09-02 13:53:58,777 - root - INFO - [common.py:110] - Total execution time: 5.42 seconds
2025-09-02 13:53:58,777 - root - INFO - [common.py:110] - Performance breakdown by step:
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 1 (SQL → JSON):              0.01 seconds (0.2%)
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 2 (JSON → Oracle SQL):       1.26 seconds (23.3%)
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 3 (JSON cleaning):           0.07 seconds (1.2%)
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 5 (JSON → PL/JSON):          0.74 seconds (13.7%)
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 6 (PL/JSON → PostgreSQL):    2.20 seconds (40.7%)
2025-09-02 13:53:58,778 - root - INFO - [common.py:110] -   - Step 7 (JSON → PostgreSQL SQL):   1.10 seconds (20.3%)
2025-09-02 13:53:58,779 - root - INFO - [common.py:110] -   - Step 8 (PostgreSQL JSON → SQL):   0.02 seconds (0.4%)
2025-09-02 13:53:58,779 - root - DEBUG - [common.py:105] - Main conversion workflow completed successfully
