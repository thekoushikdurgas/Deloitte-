2025-09-02 13:52:22,254 - root - DEBUG - [common.py:105] - Starting main conversion workflow
2025-09-02 13:52:22,254 - root - INFO - [common.py:110] - === Starting Oracle Trigger Conversion Process ===
2025-09-02 13:52:22,254 - root - INFO - [common.py:110] - Logging to: output\oracle_conversion_20250902_135222.log
2025-09-02 13:52:22,254 - root - DEBUG - [common.py:105] - Logging system initialized
2025-09-02 13:52:22,254 - root - INFO - [common.py:110] - Step 1: Converting Oracle SQL files to JSON analysis...
2025-09-02 13:52:22,255 - root - DEBUG - [common.py:105] - Starting Step 1: Oracle SQL → JSON conversion
2025-09-02 13:52:22,255 - root - INFO - [common.py:110] - === Starting Oracle triggers to JSON conversion ===
2025-09-02 13:52:22,265 - root - DEBUG - [common.py:105] - Workflow Phase 1: Convert Oracle SQL files to JSON analysis structure
2025-09-02 13:52:22,265 - root - DEBUG - [common.py:105] - Source directory: files/oracle
2025-09-02 13:52:22,265 - root - DEBUG - [common.py:105] - Target directory: files/format_json
2025-09-02 13:52:22,265 - root - DEBUG - [common.py:105] - File details will be included in metadata for each processed file
2025-09-02 13:52:22,265 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:52:22,265 - root - INFO - [common.py:110] - Source directory: 'files/oracle'
2025-09-02 13:52:22,265 - root - INFO - [common.py:110] - Target directory: 'files/format_json'
2025-09-02 13:52:22,266 - root - INFO - [common.py:110] - File pattern: '.sql'
2025-09-02 13:52:22,266 - root - INFO - [common.py:110] - Output suffix: '_analysis.json'
2025-09-02 13:52:22,266 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:52:22,266 - root - DEBUG - [common.py:105] - Directory already exists: files/format_json
2025-09-02 13:52:22,266 - root - DEBUG - [common.py:105] - Found 1 files in source directory
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - Files matching pattern '.sql': ['zzz.sql']
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - === Processing file 1/1: zzz.sql ===
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - Source path: files/oracle\zzz.sql
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - Output path: files/format_json\zzz_analysis.json
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger zzz.sql ===
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance from file...
2025-09-02 13:52:22,267 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 20 characters of SQL
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:106] - structured lines conversion 0 lines processed
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:109] - SQL section parsing
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - structured lines conversion
2025-09-02 13:52:22,268 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-09-02 13:52:22,268 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 23 total, 6 with semicolons, 1 empty lines skipped
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:324] - structured lines conversion
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:261] - Block comment stripping complete: 2 comments extracted, 17 lines cleaned
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:328] - Removed block comments from main section
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:305] - Inline comment stripping complete: 0 comments extracted, 17 lines cleaned
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Removed inline comments from main section
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:344] - Found DECLARE at line 3
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:348] - Found BEGIN at line 4
2025-09-02 13:52:22,268 - root - DEBUG - [OracleTriggerAnalyzer.py:358] - DECLARE section: lines 3-3
2025-09-02 13:52:22,269 - root - DEBUG - [OracleTriggerAnalyzer.py:386] - Starting declaration parsing
2025-09-02 13:52:22,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1442] - Starting top-level BEGIN blocks parsing
2025-09-02 13:52:22,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1487] - Begin line: {'indent': 8, 'line': '        BEGIN', 'line_no': 6} 1
2025-09-02 13:52:22,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1067] - item: {'indent': 4, 'line': '    IF DELETING THEN', 'line_no': 5}
2025-09-02 13:52:22,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1071] - if_indent: 5
2025-09-02 13:52:22,744 - root - DEBUG - [OracleTriggerAnalyzer.py:657] - working_lines: []
2025-09-02 13:52:22,744 - root - DEBUG - [OracleTriggerAnalyzer.py:797] - working_lines: []
2025-09-02 13:52:22,744 - root - DEBUG - [OracleTriggerAnalyzer.py:111] - SQL section parsing
2025-09-02 13:52:22,744 - root - DEBUG - [OracleTriggerAnalyzer.py:114] - OracleTriggerAnalyzer initialization 0.477123498916626 seconds
2025-09-02 13:52:22,744 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully with file details
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - File details: zzz.sql
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-09-02 13:52:22,745 - root - DEBUG - [OracleTriggerAnalyzer.py:2078] - JSON conversion complete: 0 vars, 0 consts, 0 excs, 2 comments
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - File details in metadata: zzz.sql (679 bytes)
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - Analysis statistics: 0 vars, 0 consts, 0 excs, 2 comments
2025-09-02 13:52:22,745 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\zzz_analysis.json
2025-09-02 13:52:22,746 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\zzz_analysis.json
2025-09-02 13:52:22,746 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger zzz.sql ===
2025-09-02 13:52:22,746 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis.json
2025-09-02 13:52:22,746 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:52:22,747 - root - INFO - [common.py:110] - Successfully processed: 1 files
2025-09-02 13:52:22,747 - root - INFO - [common.py:110] - === Oracle triggers to JSON conversion complete ===
2025-09-02 13:52:22,747 - root - DEBUG - [common.py:105] - Phase 1 complete: Oracle SQL files converted to JSON analysis structure with file metadata
2025-09-02 13:52:22,747 - root - INFO - [common.py:110] - ✓ JSON conversion complete! (Duration: 0.49 seconds)
2025-09-02 13:52:22,747 - root - DEBUG - [common.py:105] - Step 1 completed in 0.49 seconds
2025-09-02 13:52:22,748 - root - INFO - [common.py:110] - Step 2: Converting JSON analysis back to formatted SQL...
2025-09-02 13:52:22,748 - root - DEBUG - [common.py:105] - Starting Step 2: JSON analysis → formatted Oracle SQL
2025-09-02 13:52:22,748 - root - INFO - [common.py:110] - === Starting JSON analysis to formatted Oracle SQL conversion ===
2025-09-02 13:52:22,748 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:52:22,748 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-09-02 13:52:22,749 - root - INFO - [common.py:110] - Target directory: 'files/format_sql'
2025-09-02 13:52:22,749 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-09-02 13:52:22,750 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-09-02 13:52:22,750 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:52:22,750 - root - DEBUG - [common.py:105] - Directory already exists: files/format_sql
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['aaa_analysis.json', 'bbb_analysis.json', 'ccc_analysis.json', 'trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_analysis.json ===
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - Source path: files/format_json\aaa_analysis.json
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - Output path: files/format_sql\aaa_analysis.sql
2025-09-02 13:52:22,751 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger aaa_analysis.json ===
2025-09-02 13:52:22,752 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\aaa_analysis.json
2025-09-02 13:52:22,752 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,752 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:22,752 - root - DEBUG - [common.py:105] - JSON contains 10 total statements
2025-09-02 13:52:22,753 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:22,753 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:22,753 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,787 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:22,787 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,806 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:22,806 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:22,806 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:22,806 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 2 variables
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 1 exceptions
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Generated 4 lines of declarations
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:22,807 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:52:22,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,808 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,808 - root - DEBUG - [common.py:105] - Generated 15 lines in main execution block
2025-09-02 13:52:22,808 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:52:22,808 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:22,808 - root - DEBUG - [common.py:105] - Final SQL contains 24 lines, 1225 characters
2025-09-02 13:52:22,809 - root - DEBUG - [common.py:105] - Oracle SQL generation: 24 lines generated in 0.002s
2025-09-02 13:52:22,809 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:22,809 - root - DEBUG - [common.py:105] - Rendered SQL length: 1225 characters
2025-09-02 13:52:22,809 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-09-02 13:52:22,809 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\aaa_analysis.sql
2025-09-02 13:52:22,810 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\aaa_analysis.sql
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger aaa_analysis.json ===
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - ✓ Created aaa_analysis.sql
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_analysis.json ===
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - Source path: files/format_json\bbb_analysis.json
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - Output path: files/format_sql\bbb_analysis.sql
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger bbb_analysis.json ===
2025-09-02 13:52:22,811 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\bbb_analysis.json
2025-09-02 13:52:22,812 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,812 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:22,812 - root - DEBUG - [common.py:105] - JSON contains 33 total statements
2025-09-02 13:52:22,813 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:22,813 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:22,813 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,852 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:22,852 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,877 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:22,877 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:22,877 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:22,877 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:22,877 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:22,878 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:22,878 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:22,878 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:22,878 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:22,878 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:52:22,878 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 3 exceptions
2025-09-02 13:52:22,878 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:22,878 - root - DEBUG - [common.py:105] - Generated 10 lines of declarations
2025-09-02 13:52:22,878 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:22,879 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,879 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,880 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:52:22,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,882 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Generated 49 lines in main execution block
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Main block rendering took 0.003s
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Final SQL contains 64 lines, 2577 characters
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Oracle SQL generation: 64 lines generated in 0.005s
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Rendered SQL length: 2577 characters
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-09-02 13:52:22,882 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\bbb_analysis.sql
2025-09-02 13:52:22,893 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\bbb_analysis.sql
2025-09-02 13:52:22,893 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger bbb_analysis.json ===
2025-09-02 13:52:22,893 - root - DEBUG - [common.py:105] - ✓ Created bbb_analysis.sql
2025-09-02 13:52:22,893 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_analysis.json ===
2025-09-02 13:52:22,893 - root - DEBUG - [common.py:105] - Source path: files/format_json\ccc_analysis.json
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - Output path: files/format_sql\ccc_analysis.sql
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger ccc_analysis.json ===
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\ccc_analysis.json
2025-09-02 13:52:22,894 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - JSON contains 13 total statements
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:22,894 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,914 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:22,914 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,926 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:22,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:22,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:22,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:22,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 1 exceptions
2025-09-02 13:52:22,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Generated 2 lines of declarations
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:22,927 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,929 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1664 characters
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - Oracle SQL generation: 28 lines generated in 0.003s
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:22,930 - root - DEBUG - [common.py:105] - Rendered SQL length: 1664 characters
2025-09-02 13:52:22,931 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-02 13:52:22,931 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\ccc_analysis.sql
2025-09-02 13:52:22,931 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\ccc_analysis.sql
2025-09-02 13:52:22,931 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger ccc_analysis.json ===
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - ✓ Created ccc_analysis.sql
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_analysis.json ===
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger1_analysis.sql
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger1_analysis.json ===
2025-09-02 13:52:22,932 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-09-02 13:52:22,933 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,933 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:22,933 - root - DEBUG - [common.py:105] - JSON contains 188 total statements
2025-09-02 13:52:22,933 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:22,933 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:22,933 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,950 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:22,950 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:22,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:22,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:22,966 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:22,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:22,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 29 variables
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:360] - Rendering 2 constants
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 18 exceptions
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:22,967 - root - DEBUG - [common.py:105] - Generated 50 lines of declarations
2025-09-02 13:52:22,967 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:22,967 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,969 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,970 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,973 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,974 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,975 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,976 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,977 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,978 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,979 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,980 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:22,980 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,982 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:22,984 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:22,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:22,985 - root - DEBUG - [common.py:105] - Generated 257 lines in main execution block
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - Main block rendering took 0.019s
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - Final SQL contains 312 lines, 19766 characters
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - Oracle SQL generation: 312 lines generated in 0.020s
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - Rendered SQL length: 19766 characters
2025-09-02 13:52:22,986 - root - DEBUG - [common.py:105] - SQL rendering took: 0.020 seconds
2025-09-02 13:52:22,987 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger1_analysis.sql
2025-09-02 13:52:22,991 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger1_analysis.sql
2025-09-02 13:52:22,991 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger1_analysis.json ===
2025-09-02 13:52:22,991 - root - DEBUG - [common.py:105] - ✓ Created trigger1_analysis.sql
2025-09-02 13:52:22,991 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_analysis.json ===
2025-09-02 13:52:22,991 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-09-02 13:52:22,992 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger2_analysis.sql
2025-09-02 13:52:22,992 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger2_analysis.json ===
2025-09-02 13:52:22,992 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-09-02 13:52:22,993 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:22,993 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:22,993 - root - DEBUG - [common.py:105] - JSON contains 69 total statements
2025-09-02 13:52:22,993 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:22,993 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:22,993 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,016 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,016 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,034 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 7 exceptions
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Generated 14 lines of declarations
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:23,035 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,037 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,038 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:52:23,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Generated 101 lines in main execution block
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Final SQL contains 120 lines, 8293 characters
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Oracle SQL generation: 120 lines generated in 0.005s
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - Rendered SQL length: 8293 characters
2025-09-02 13:52:23,039 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-09-02 13:52:23,040 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger2_analysis.sql
2025-09-02 13:52:23,049 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger2_analysis.sql
2025-09-02 13:52:23,049 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger2_analysis.json ===
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - ✓ Created trigger2_analysis.sql
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_analysis.json ===
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger3_analysis.sql
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger3_analysis.json ===
2025-09-02 13:52:23,050 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-09-02 13:52:23,051 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,051 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,051 - root - DEBUG - [common.py:105] - JSON contains 52 total statements
2025-09-02 13:52:23,051 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,051 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,051 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,065 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,065 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 6 exceptions
2025-09-02 13:52:23,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Generated 13 lines of declarations
2025-09-02 13:52:23,077 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:23,078 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,078 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,079 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,079 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (TO_CHAR(:NEW.VALID_FROM, ...'
2025-09-02 13:52:23,079 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,079 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-09-02 13:52:23,080 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:52:23,080 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,080 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-09-02 13:52:23,080 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:23,080 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,080 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:52:23,080 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,080 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (V_COMPANY_TYPE_CD = 'L') ...'
2025-09-02 13:52:23,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:52:23,081 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:52:23,081 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:52:23,081 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:23,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,081 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:52:23,082 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,083 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Generated 76 lines in main execution block
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Main block rendering took 0.005s
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Final SQL contains 94 lines, 7449 characters
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Oracle SQL generation: 94 lines generated in 0.006s
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Rendered SQL length: 7449 characters
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - SQL rendering took: 0.006 seconds
2025-09-02 13:52:23,083 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger3_analysis.sql
2025-09-02 13:52:23,084 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger3_analysis.sql
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger3_analysis.json ===
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - ✓ Created trigger3_analysis.sql
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_analysis.json ===
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger4_analysis.sql
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger4_analysis.json ===
2025-09-02 13:52:23,085 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-09-02 13:52:23,086 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,086 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,086 - root - DEBUG - [common.py:105] - JSON contains 10 total statements
2025-09-02 13:52:23,086 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,086 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,086 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,123 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,123 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,138 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:52:23,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,139 - root - DEBUG - [common.py:105] - Generated 7 lines of declarations
2025-09-02 13:52:23,139 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:23,139 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,139 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:23,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - Generated 12 lines in main execution block
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - Final SQL contains 24 lines, 4061 characters
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - Oracle SQL generation: 24 lines generated in 0.002s
2025-09-02 13:52:23,140 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,141 - root - DEBUG - [common.py:105] - Rendered SQL length: 4061 characters
2025-09-02 13:52:23,141 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-09-02 13:52:23,141 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger4_analysis.sql
2025-09-02 13:52:23,142 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger4_analysis.sql
2025-09-02 13:52:23,142 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger4_analysis.json ===
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - ✓ Created trigger4_analysis.sql
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_analysis.json ===
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger5_analysis.sql
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger5_analysis.json ===
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-09-02 13:52:23,143 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,143 - root - DEBUG - [common.py:105] - JSON contains 13 total statements
2025-09-02 13:52:23,144 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,144 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,144 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,166 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,166 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,187 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,187 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,187 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,187 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:23,188 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,188 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 2 variables
2025-09-02 13:52:23,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,188 - root - DEBUG - [common.py:105] - Generated 3 lines of declarations
2025-09-02 13:52:23,188 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:23,188 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:23,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,191 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,192 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:23,192 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,192 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:23,192 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,192 - root - DEBUG - [common.py:105] - Generated 18 lines in main execution block
2025-09-02 13:52:23,192 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-09-02 13:52:23,192 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 1250 characters
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - Oracle SQL generation: 26 lines generated in 0.005s
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - Rendered SQL length: 1250 characters
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-09-02 13:52:23,193 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger5_analysis.sql
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger5_analysis.sql
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger5_analysis.json ===
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - ✓ Created trigger5_analysis.sql
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_analysis.json ===
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger6_analysis.sql
2025-09-02 13:52:23,194 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger6_analysis.json ===
2025-09-02 13:52:23,195 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-09-02 13:52:23,195 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,195 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,195 - root - DEBUG - [common.py:105] - JSON contains 23 total statements
2025-09-02 13:52:23,195 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,196 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,196 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,216 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,216 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,238 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,238 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,238 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,239 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:23,239 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,239 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 6 variables
2025-09-02 13:52:23,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 4 exceptions
2025-09-02 13:52:23,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,240 - root - DEBUG - [common.py:105] - Generated 11 lines of declarations
2025-09-02 13:52:23,240 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:23,240 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:23,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,241 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,242 - root - DEBUG - [common.py:105] - Generated 31 lines in main execution block
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Final SQL contains 47 lines, 2483 characters
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Oracle SQL generation: 47 lines generated in 0.004s
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Rendered SQL length: 2483 characters
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - SQL rendering took: 0.004 seconds
2025-09-02 13:52:23,243 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger6_analysis.sql
2025-09-02 13:52:23,244 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger6_analysis.sql
2025-09-02 13:52:23,244 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger6_analysis.json ===
2025-09-02 13:52:23,244 - root - DEBUG - [common.py:105] - ✓ Created trigger6_analysis.sql
2025-09-02 13:52:23,244 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_analysis.json ===
2025-09-02 13:52:23,244 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-09-02 13:52:23,245 - root - DEBUG - [common.py:105] - Output path: files/format_sql\yyy_analysis.sql
2025-09-02 13:52:23,245 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger yyy_analysis.json ===
2025-09-02 13:52:23,245 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-09-02 13:52:23,246 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,246 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,246 - root - DEBUG - [common.py:105] - JSON contains 91 total statements
2025-09-02 13:52:23,246 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,246 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,246 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,278 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,278 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,305 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:344] - Rendering 9 variables
2025-09-02 13:52:23,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:360] - Rendering 1 constants
2025-09-02 13:52:23,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:372] - Rendering 11 exceptions
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,307 - root - DEBUG - [common.py:105] - Generated 22 lines of declarations
2025-09-02 13:52:23,307 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:23,307 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:23,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,310 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,310 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,310 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,310 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:23,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:52:23,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:23,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Generated 122 lines in main execution block
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Main block rendering took 0.010s
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Final SQL contains 149 lines, 10436 characters
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Oracle SQL generation: 149 lines generated in 0.012s
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,317 - root - DEBUG - [common.py:105] - Rendered SQL length: 10436 characters
2025-09-02 13:52:23,318 - root - DEBUG - [common.py:105] - SQL rendering took: 0.012 seconds
2025-09-02 13:52:23,318 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\yyy_analysis.sql
2025-09-02 13:52:23,319 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\yyy_analysis.sql
2025-09-02 13:52:23,319 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger yyy_analysis.json ===
2025-09-02 13:52:23,320 - root - DEBUG - [common.py:105] - ✓ Created yyy_analysis.sql
2025-09-02 13:52:23,320 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_analysis.json ===
2025-09-02 13:52:23,320 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-09-02 13:52:23,320 - root - DEBUG - [common.py:105] - Output path: files/format_sql\zzz_analysis.sql
2025-09-02 13:52:23,320 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger zzz_analysis.json ===
2025-09-02 13:52:23,321 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-09-02 13:52:23,321 - root - DEBUG - [main.py:363] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:23,321 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-02 13:52:23,321 - root - DEBUG - [common.py:105] - JSON contains 1 total statements
2025-09-02 13:52:23,322 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-02 13:52:23,322 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:23,322 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,366 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:23,366 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:23,396 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:23,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:23,397 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:23,397 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-02 13:52:23,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-02 13:52:23,397 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:23,397 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-02 13:52:23,397 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:23,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering Oracle declarations ===
2025-09-02 13:52:23,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === Oracle declarations complete ===
2025-09-02 13:52:23,398 - root - DEBUG - [common.py:105] - Generated 1 lines of declarations
2025-09-02 13:52:23,398 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:23,398 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:23,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for Oracle ===
2025-09-02 13:52:23,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for Oracle ===
2025-09-02 13:52:23,398 - root - DEBUG - [common.py:105] - Generated 2 lines in main execution block
2025-09-02 13:52:23,399 - root - DEBUG - [common.py:105] - Main block rendering took 0.000s
2025-09-02 13:52:23,399 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:23,399 - root - DEBUG - [common.py:105] - Final SQL contains 8 lines, 131 characters
2025-09-02 13:52:23,400 - root - DEBUG - [common.py:105] - Oracle SQL generation: 8 lines generated in 0.003s
2025-09-02 13:52:23,400 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-02 13:52:23,400 - root - DEBUG - [common.py:105] - Rendered SQL length: 131 characters
2025-09-02 13:52:23,400 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-02 13:52:23,401 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\zzz_analysis.sql
2025-09-02 13:52:23,404 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\zzz_analysis.sql
2025-09-02 13:52:23,404 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger zzz_analysis.json ===
2025-09-02 13:52:23,404 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis.sql
2025-09-02 13:52:23,404 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:52:23,404 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:52:23,405 - root - INFO - [common.py:110] - === Starting comparison with original files ===
2025-09-02 13:52:23,406 - root - DEBUG - [common.py:105] - Comparison complete for zzz.sql: 24 original, 8 generated lines
2025-09-02 13:52:23,406 - root - INFO - [common.py:110] - === Conversion Statistics ===
2025-09-02 13:52:23,407 - root - INFO - [common.py:110] - Total files processed: 1
2025-09-02 13:52:23,407 - root - INFO - [common.py:110] - Successful conversions: 0
2025-09-02 13:52:23,408 - root - INFO - [common.py:110] - Failed conversions: 0
2025-09-02 13:52:23,409 - root - INFO - [common.py:110] - Files with validation warnings: 1
2025-09-02 13:52:23,411 - root - INFO - [common.py:110] - === Comparison Results ===
2025-09-02 13:52:23,411 - root - WARNING - [common.py:115] - File zzz.sql: Significant line count difference: 73.9%
2025-09-02 13:52:23,412 - root - INFO - [common.py:110] - === JSON analysis to formatted Oracle SQL conversion complete ===
2025-09-02 13:52:23,412 - root - INFO - [common.py:110] - ✓ SQL formatting complete! (Duration: 0.66 seconds)
2025-09-02 13:52:23,412 - root - DEBUG - [common.py:105] - Step 2 completed in 0.66 seconds
2025-09-02 13:52:23,413 - root - INFO - [common.py:110] - Step 3: Cleaning JSON files...
2025-09-02 13:52:23,413 - root - DEBUG - [common.py:105] - Starting Step 3: Cleaning and optimizing JSON files
2025-09-02 13:52:23,413 - root - DEBUG - [common.py:105] - Starting JSON cleaning process in directory: files/format_json
2025-09-02 13:52:23,413 - root - DEBUG - [common.py:105] - Found 11 JSON files to clean
2025-09-02 13:52:23,413 - root - DEBUG - [common.py:105] - Processing file: aaa_analysis.json
2025-09-02 13:52:23,414 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (3520 bytes)
2025-09-02 13:52:23,414 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,416 - root - DEBUG - [common.py:358] - ✅ Cleaned aaa_analysis.json
2025-09-02 13:52:23,417 - root - DEBUG - [common.py:105] - Processing file: bbb_analysis.json
2025-09-02 13:52:23,418 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (8249 bytes)
2025-09-02 13:52:23,418 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,421 - root - DEBUG - [common.py:358] - ✅ Cleaned bbb_analysis.json
2025-09-02 13:52:23,421 - root - DEBUG - [common.py:105] - Processing file: ccc_analysis.json
2025-09-02 13:52:23,422 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (5193 bytes)
2025-09-02 13:52:23,422 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,424 - root - DEBUG - [common.py:358] - ✅ Cleaned ccc_analysis.json
2025-09-02 13:52:23,424 - root - DEBUG - [common.py:105] - Processing file: trigger1_analysis.json
2025-09-02 13:52:23,427 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (50178 bytes)
2025-09-02 13:52:23,428 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.001 seconds
2025-09-02 13:52:23,452 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger1_analysis.json
2025-09-02 13:52:23,452 - root - DEBUG - [common.py:105] - Processing file: trigger2_analysis.json
2025-09-02 13:52:23,454 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (23455 bytes)
2025-09-02 13:52:23,455 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.001 seconds
2025-09-02 13:52:23,462 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger2_analysis.json
2025-09-02 13:52:23,463 - root - DEBUG - [common.py:105] - Processing file: trigger3_analysis.json
2025-09-02 13:52:23,464 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (20673 bytes)
2025-09-02 13:52:23,465 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.001 seconds
2025-09-02 13:52:23,469 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger3_analysis.json
2025-09-02 13:52:23,469 - root - DEBUG - [common.py:105] - Processing file: trigger4_analysis.json
2025-09-02 13:52:23,470 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (6642 bytes)
2025-09-02 13:52:23,471 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,472 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger4_analysis.json
2025-09-02 13:52:23,473 - root - DEBUG - [common.py:105] - Processing file: trigger5_analysis.json
2025-09-02 13:52:23,474 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (3949 bytes)
2025-09-02 13:52:23,474 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,475 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger5_analysis.json
2025-09-02 13:52:23,475 - root - DEBUG - [common.py:105] - Processing file: trigger6_analysis.json
2025-09-02 13:52:23,476 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (7259 bytes)
2025-09-02 13:52:23,477 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,480 - root - DEBUG - [common.py:358] - ✅ Cleaned trigger6_analysis.json
2025-09-02 13:52:23,480 - root - DEBUG - [common.py:105] - Processing file: yyy_analysis.json
2025-09-02 13:52:23,482 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (29024 bytes)
2025-09-02 13:52:23,484 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.001 seconds
2025-09-02 13:52:23,492 - root - DEBUG - [common.py:358] - ✅ Cleaned yyy_analysis.json
2025-09-02 13:52:23,492 - root - DEBUG - [common.py:105] - Processing file: zzz_analysis.json
2025-09-02 13:52:23,493 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (1303 bytes)
2025-09-02 13:52:23,493 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-09-02 13:52:23,494 - root - DEBUG - [common.py:358] - ✅ Cleaned zzz_analysis.json
2025-09-02 13:52:23,494 - root - INFO - [common.py:110] - JSON cleaning complete: 11 files cleaned, 0 errors
2025-09-02 13:52:23,494 - root - INFO - [common.py:110] - ✓ JSON cleaning complete! (Duration: 0.08 seconds)
2025-09-02 13:52:23,495 - root - DEBUG - [common.py:105] - Step 3 completed in 0.08 seconds
2025-09-02 13:52:23,495 - root - INFO - [common.py:110] - Step 5: Converting JSON to PL/JSON...
2025-09-02 13:52:23,495 - root - DEBUG - [common.py:105] - Starting Step 5: JSON → PostgreSQL-compatible PL/JSON
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] - processing aaa_analysis.json
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:23,496 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,497 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_PK;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CORE.V_ACCOUNT_GROUPS_LOCAL ( SAPINST_NO, ACCOUNT_GROUP_CD, ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND, EMPLOYEE_IND, NUMBER_RANGE_CD, IGNORE_FOR_DNB, VALID_IND ) VALUES ( :NEW.SAPINST_NO , :NEW.ACCOUNT_GROUP_CD, :NEW.ACCOUNT_GROUP_DESC, :NEW.ONE_TIME_ACCOUNT_IND, :NEW.EMPLOYEE_IND, :NEW.NUMBER_RANGE_CD, :NEW.IGNORE_FOR_DNB, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CORE.V_ACCOUNT_GROUPS_LOCAL SET EMPLOYEE_IND = :NEW.EMPLOYEE_IND, ACCOUNT_GROUP_DESC = :NEW.ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND = :NEW.ONE_TIME_ACCOUNT_IND, IGNORE_FOR_DNB = :NEW.IGNORE_FOR_DNB, VALID_IND = :NEW.VALID_IND WHERE ACCOUNT_GROUP_CD = :NEW.ACCOUNT_GROUP_CD AND SAPINST_NO = :NEW.SAPINST_NO;', 'statement_indent': 8}]}], 'else_statements': []}]
2025-09-02 13:52:23,497 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,497 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,497 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,499 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,499 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,500 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,501 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,502 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,502 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,502 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,503 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,504 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,505 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,506 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,507 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,508 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,509 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,510 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,511 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,511 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,511 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,511 - root - DEBUG - [common.py:105] - Generated JSON string with 12256 characters
2025-09-02 13:52:23,512 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,512 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,512 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,512 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,513 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_PK;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CORE.V_ACCOUNT_GROUPS_LOCAL ( SAPINST_NO, ACCOUNT_GROUP_CD, ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND, EMPLOYEE_IND, NUMBER_RANGE_CD, IGNORE_FOR_DNB, VALID_IND ) VALUES ( :NEW.SAPINST_NO , :NEW.ACCOUNT_GROUP_CD, :NEW.ACCOUNT_GROUP_DESC, :NEW.ONE_TIME_ACCOUNT_IND, :NEW.EMPLOYEE_IND, :NEW.NUMBER_RANGE_CD, :NEW.IGNORE_FOR_DNB, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CORE.V_ACCOUNT_GROUPS_LOCAL SET EMPLOYEE_IND = :NEW.EMPLOYEE_IND, ACCOUNT_GROUP_DESC = :NEW.ACCOUNT_GROUP_DESC, ONE_TIME_ACCOUNT_IND = :NEW.ONE_TIME_ACCOUNT_IND, IGNORE_FOR_DNB = :NEW.IGNORE_FOR_DNB, VALID_IND = :NEW.VALID_IND WHERE ACCOUNT_GROUP_CD = :NEW.ACCOUNT_GROUP_CD AND SAPINST_NO = :NEW.SAPINST_NO;', 'statement_indent': 8}]}], 'else_statements': []}]
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,513 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,514 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,515 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,516 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,517 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,518 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,519 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,522 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD '
2025-09-02 13:52:23,522 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.SAPINST_NO != :OLD.SAPINST_NO OR :NEW.ACCOUNT_GROUP_CD != :OLD.ACCOUNT_GROUP_CD'
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,523 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,524 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,525 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,525 - root - DEBUG - [common.py:105] - Generated JSON string with 12256 characters
2025-09-02 13:52:23,525 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,526 - root - DEBUG - [common.py:105] - Created aaa.json
2025-09-02 13:52:23,526 - root - DEBUG - [common.py:105] - processing bbb_analysis.json
2025-09-02 13:52:23,526 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,526 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,527 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_PATTERN', 'assignment_operator': ':=', 'expression': ':NEW.PATTERN;', 'assignment_indent': 4}, {'condition': '', 'type': 'case_when', 'case_indent': 4, 'when_clauses': [{'type': 'when_statement', 'when_indent': 8, 'condition': 'V_PATTERN IS NOT NULL', 'then_statements': [{'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD;', 'statement_indent': 4}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_indent': 8}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_RULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.RULE_ID;', 'assignment_indent': 8}]}, {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS;', 'statement_indent': 4}, {'condition': ' INSERTING AND V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :NEW.PATTERN_ID AND PATTERN = :OLD.PATTERN;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.VALID_IND );', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}]}], 'else_statements': []}]
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,527 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,528 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,529 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,530 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,531 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,531 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,532 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,533 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,534 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,535 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,536 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,537 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,538 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,539 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,540 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,541 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,542 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,543 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,544 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,545 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,545 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,545 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,546 - root - DEBUG - [common.py:105] - Generated JSON string with 32242 characters
2025-09-02 13:52:23,546 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,546 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,546 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,547 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,547 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,547 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:23,547 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,548 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_PATTERN', 'assignment_operator': ':=', 'expression': ':NEW.PATTERN;', 'assignment_indent': 4}, {'condition': '', 'type': 'case_when', 'case_indent': 4, 'when_clauses': [{'type': 'when_statement', 'when_indent': 8, 'condition': 'V_PATTERN IS NOT NULL', 'then_statements': [{'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD;', 'statement_indent': 4}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_indent': 8}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_RULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.RULE_ID;', 'assignment_indent': 8}]}, {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS;', 'statement_indent': 4}, {'condition': ' INSERTING AND V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': 'UPDATING', 'then_statements': [{'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :NEW.PATTERN_ID AND PATTERN = :OLD.PATTERN;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.VALID_IND );', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}]}], 'else_statements': []}]
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,548 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,549 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,550 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,551 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,552 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,553 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,554 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,555 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,556 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,557 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,558 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Starting condition modification: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Stripped condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'N' '
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,559 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'N''
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Starting condition modification: ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) '
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Stripped condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Final modified condition: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN)'
2025-09-02 13:52:23,560 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.RULE_FLAG = 'M' '
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,561 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.RULE_FLAG = 'M''
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:23,562 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING AND V_PATTERN IS NOT NULL '
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING AND V_PATTERN IS NOT NULL' → ' AND V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND V_PATTERN IS NOT NULL' → 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Final modified condition: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_PATTERN IS NOT NULL'
2025-09-02 13:52:23,563 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,564 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,565 - root - DEBUG - [common.py:105] - Generated JSON string with 32242 characters
2025-09-02 13:52:23,565 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,566 - root - DEBUG - [common.py:105] - Created bbb.json
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] - processing ccc_analysis.json
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,567 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,568 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, NVL(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );', 'statement_indent': 12}]}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': '(UPDATING)', 'then_statements': [{'condition': " :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR NVL(:NEW.PLAN_PERIOD, '-') != NVL(:OLD.PLAN_PERIOD, '-') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE E_UPD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;', 'statement_indent': 12}]}]}], 'else_statements': []}]
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,568 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,569 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,569 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,569 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,570 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,570 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,570 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,570 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,570 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,571 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,572 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,573 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,574 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,575 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,576 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,577 - root - DEBUG - [common.py:105] - Generated JSON string with 15172 characters
2025-09-02 13:52:23,577 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,577 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,577 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,580 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,581 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,581 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:23,581 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,581 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO CER_EXCHANGE_RATES ( XRT_CD, CURRENCY_CD, RATE_PERIOD, PLAN_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.RATE_PERIOD, NVL(:NEW.PLAN_PERIOD, '-'), :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO CER_V_CENTRAL_GOV_RATES ( XRT_CD, CURRENCY_CD_1, CURRENCY_CD_2, RATE_PERIOD, RATE, SCALING_FACTOR, VALID_IND ) VALUES ( :NEW.XRT_CD, :NEW.CURRENCY_CD, :NEW.CURRENCY_CD_2, :NEW.RATE_PERIOD, :NEW.RATE, :NEW.SCALING_FACTOR, :NEW.VALID_IND );', 'statement_indent': 12}]}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': '(UPDATING)', 'then_statements': [{'condition': " :NEW.XRT_CD != :OLD.XRT_CD OR :NEW.CURRENCY_CD != :OLD.CURRENCY_CD OR :NEW.RATE_PERIOD != :OLD.RATE_PERIOD OR NVL(:NEW.PLAN_PERIOD, '-') != NVL(:OLD.PLAN_PERIOD, '-') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE E_UPD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.XRT_CD NOT LIKE 'G0%' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_EXCHANGE_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD = :NEW.CURRENCY_CD AND RATE_PERIOD = :NEW.RATE_PERIOD AND PLAN_PERIOD = :NEW.PLAN_PERIOD;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE CER_V_CENTRAL_GOV_RATES SET RATE = :NEW.RATE, SCALING_FACTOR = :NEW.SCALING_FACTOR, VALID_IND = :NEW.VALID_IND WHERE XRT_CD = :NEW.XRT_CD AND CURRENCY_CD_1 = :NEW.CURRENCY_CD AND CURRENCY_CD_2 = :NEW.CURRENCY_CD_2 AND RATE_PERIOD = :NEW.RATE_PERIOD;', 'statement_indent': 12}]}]}], 'else_statements': []}]
2025-09-02 13:52:23,581 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,581 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,582 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,583 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,584 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,585 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,586 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.XRT_CD NOT LIKE 'G0%' '
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,587 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.XRT_CD NOT LIKE 'G0%''
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,588 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,589 - root - DEBUG - [common.py:105] - Generated JSON string with 15172 characters
2025-09-02 13:52:23,590 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,591 - root - DEBUG - [common.py:105] - Created ccc.json
2025-09-02 13:52:23,594 - root - DEBUG - [common.py:105] - processing trigger1_analysis.json
2025-09-02 13:52:23,594 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,594 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,602 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,602 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,603 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:23,603 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,604 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:23,604 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,604 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,605 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,606 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,607 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,607 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,607 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,607 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,607 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,608 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,609 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,609 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,609 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,610 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,610 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,610 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,610 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,610 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,611 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,612 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,612 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,612 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,612 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,612 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,613 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,614 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,615 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,616 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,617 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,618 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,619 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,619 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,619 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,619 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,619 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,620 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,621 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,622 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,623 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,624 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,625 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,626 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,627 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,628 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,629 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,630 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,630 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,630 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,631 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,632 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,633 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,634 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,635 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,636 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,637 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,638 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,639 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,639 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:52:23,639 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,640 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,640 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,640 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,641 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,641 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,641 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,641 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,641 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,642 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,643 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,644 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,645 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,646 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,647 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,648 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,649 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,650 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,650 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,650 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,650 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,650 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,651 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,652 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,653 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,654 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,655 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,655 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,655 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,655 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,656 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,657 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,658 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,659 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,659 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,659 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,659 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,659 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,661 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,661 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,661 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,662 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,662 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,662 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,662 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,663 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,664 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,665 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,666 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,667 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,668 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,669 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,669 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,669 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,669 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,670 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,671 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,672 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,673 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,674 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,675 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,676 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,677 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,678 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,679 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,680 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,681 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,681 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,681 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,682 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,683 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,684 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,685 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,686 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,687 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,688 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,689 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,689 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,689 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,689 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,689 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,690 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,690 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,691 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,691 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,691 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,692 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,693 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,694 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,695 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,696 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,697 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,698 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,698 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,698 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,698 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,698 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,699 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,699 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,699 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,699 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,700 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,701 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,701 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,701 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,702 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,702 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,703 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,704 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,705 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,706 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,707 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,708 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,709 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,709 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,709 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,709 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,709 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,712 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,712 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,713 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,714 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,715 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,716 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,717 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,717 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,717 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,717 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,717 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,718 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,719 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,719 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,721 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,722 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,722 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,722 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,722 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,723 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,725 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,725 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,726 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,726 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,728 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,729 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,729 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,731 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,731 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,731 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,731 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,731 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,739 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,742 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,742 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,743 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,743 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-09-02 13:52:23,743 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,744 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,744 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,744 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,744 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,744 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,745 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,745 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,745 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,745 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,746 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,747 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,748 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,749 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,749 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,750 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,750 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,752 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,752 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,752 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,753 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,754 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,755 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,756 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,757 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,758 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,758 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,759 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,760 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,760 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,761 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,762 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,764 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,764 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,764 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,764 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,765 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,766 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,766 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,766 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,766 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,766 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,767 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,767 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,767 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,767 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,768 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,770 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,770 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,771 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,771 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,774 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,775 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:23,775 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,775 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,775 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,776 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,776 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,776 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,776 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,776 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,777 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,777 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,777 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,777 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,778 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,782 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,783 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,784 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,784 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,784 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,784 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,784 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,785 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,786 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,786 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,787 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,788 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,789 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,789 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,790 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,790 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,790 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,790 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,791 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,791 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,791 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,791 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,791 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,792 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,793 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,793 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,793 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,793 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,794 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,795 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,797 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,797 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,797 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,797 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,797 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,798 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,804 - root - DEBUG - [common.py:105] - Generated JSON string with 197058 characters
2025-09-02 13:52:23,804 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,804 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,804 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,813 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,813 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,813 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:23,813 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,814 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:23,815 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,815 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,815 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,816 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,817 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,819 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,819 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,819 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,820 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,821 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,822 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,823 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,824 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,825 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,826 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,827 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,828 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,829 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,830 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,831 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,832 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,833 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,834 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,835 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,836 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,837 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,838 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,839 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,840 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,840 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,840 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,841 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,841 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,841 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,841 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,841 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,842 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,844 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,845 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,846 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,848 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,849 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,850 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,850 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,850 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,850 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,851 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,851 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,852 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,853 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,855 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,856 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:23,857 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,858 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,859 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,860 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,866 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,866 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,866 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,866 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,867 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,868 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,869 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,869 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,869 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,869 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,870 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,870 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,871 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,871 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,871 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,872 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,873 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,874 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,875 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,876 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,880 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,880 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,880 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,880 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,881 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,881 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,881 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,882 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,883 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,883 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,884 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,885 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,886 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,887 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,888 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,889 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,889 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,889 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,889 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,889 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,890 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,891 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,891 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,891 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,891 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,892 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,896 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,896 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,896 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,897 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,898 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,899 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,899 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,900 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,901 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,901 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,901 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,902 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,903 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,904 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,905 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,906 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,907 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,908 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,909 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,910 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,910 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,911 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,911 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,911 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,911 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,911 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,912 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,912 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,912 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,912 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,913 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,913 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,913 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,913 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,914 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,915 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,916 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,917 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-09-02 13:52:23,918 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,919 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,919 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-09-02 13:52:23,919 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-09-02 13:52:23,919 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,920 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,921 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,921 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,921 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,922 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,922 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,922 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,922 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,922 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,923 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,924 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-09-02 13:52:23,925 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-09-02 13:52:23,926 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-09-02 13:52:23,927 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,928 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,929 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,929 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,929 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,929 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,930 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,930 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,930 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,930 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,930 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,931 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,932 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,933 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,934 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,935 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,936 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,937 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,938 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,939 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-09-02 13:52:23,939 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-09-02 13:52:23,939 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-09-02 13:52:23,939 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,940 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,940 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,943 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,944 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,945 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-09-02 13:52:23,946 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,947 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,949 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,950 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,950 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,950 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-09-02 13:52:23,950 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,950 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-09-02 13:52:23,951 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,952 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,953 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,954 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,955 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-09-02 13:52:23,956 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,957 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-09-02 13:52:23,958 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,959 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,960 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,961 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,962 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' → '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,964 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,965 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,965 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,965 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,965 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:23,966 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:23,968 - root - DEBUG - [common.py:105] - Generated JSON string with 197058 characters
2025-09-02 13:52:23,968 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:23,971 - root - DEBUG - [common.py:105] - Created trigger1.json
2025-09-02 13:52:23,973 - root - DEBUG - [common.py:105] - processing trigger2_analysis.json
2025-09-02 13:52:23,973 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:23,973 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:23,975 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:23,975 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:23,975 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:23,975 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:23,976 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:23,976 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,977 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:23,978 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,979 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,983 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,985 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,989 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,990 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,991 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:23,992 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,993 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:23,994 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:23,995 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:23,996 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:23,997 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:23,998 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:23,999 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:23,999 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:23,999 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:23,999 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,000 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,001 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,002 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,005 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,006 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,008 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,009 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,010 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,011 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,012 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,013 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,014 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,015 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:24,015 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,016 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,017 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,018 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,019 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,020 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,020 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,021 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,021 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,021 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,021 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,022 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,022 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,022 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,022 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,024 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,024 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,024 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,024 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,025 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,025 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,025 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,025 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,026 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,026 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,026 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,026 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,026 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,028 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,029 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,029 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,029 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,029 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,030 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,030 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,031 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,031 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,031 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,031 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,032 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,032 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,032 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,033 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:24,033 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,033 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,034 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,035 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,036 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,037 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,038 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,039 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,040 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,041 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,041 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,041 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,041 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,041 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,042 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,042 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,042 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,042 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,042 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,043 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,044 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,045 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,046 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,047 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,048 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,049 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,050 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,051 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:24,052 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,053 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,054 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,055 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,056 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,057 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,058 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,059 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,059 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,059 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,059 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,060 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,061 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,062 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,063 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:24,064 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,065 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,066 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,067 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,068 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,069 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,070 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,071 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,071 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,072 - root - DEBUG - [common.py:105] - Generated JSON string with 76883 characters
2025-09-02 13:52:24,072 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,072 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,072 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,073 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,073 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,073 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:24,073 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,074 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,074 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:24,075 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,076 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,077 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:24,078 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,079 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,079 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,079 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:24,079 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,080 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,083 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,086 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,086 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,086 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,087 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,088 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,089 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,089 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,089 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,089 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,090 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,090 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,090 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,091 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,092 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,093 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,094 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,095 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:24,096 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,097 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,098 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,099 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,100 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,101 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,102 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,103 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,104 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,105 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,106 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,107 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,108 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:24,109 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,110 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,111 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,112 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,113 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,114 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,115 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,116 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,117 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,118 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,119 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,120 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,121 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,122 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,123 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,124 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,125 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,126 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,127 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,128 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,129 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,130 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,131 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,132 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,133 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,134 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,135 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,136 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' → '()'
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,137 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-09-02 13:52:24,138 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,139 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,140 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,141 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,142 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,143 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,144 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,145 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,146 - root - DEBUG - [common.py:105] - Generated JSON string with 76883 characters
2025-09-02 13:52:24,146 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,148 - root - DEBUG - [common.py:105] - Created trigger2.json
2025-09-02 13:52:24,148 - root - DEBUG - [common.py:105] - processing trigger3_analysis.json
2025-09-02 13:52:24,149 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,149 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,153 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,153 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,153 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:24,153 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,154 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,154 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,155 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,156 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:52:24,157 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,158 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,159 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,160 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,161 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,162 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,163 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,163 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,164 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,165 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,166 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,167 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,168 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,169 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,170 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,171 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,172 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,173 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,174 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,175 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,176 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,177 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,178 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,179 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,180 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,181 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,182 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,183 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,184 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,185 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,186 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,187 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,188 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,189 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,191 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,191 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,191 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,192 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,193 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,194 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,195 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,196 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,197 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,198 - root - DEBUG - [common.py:105] - Generated JSON string with 85760 characters
2025-09-02 13:52:24,198 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,199 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,199 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,204 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,204 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,204 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:24,204 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,205 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,205 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,206 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,207 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,208 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,209 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,209 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,209 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,209 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,209 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,210 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,210 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,210 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,210 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,210 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,211 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,212 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,213 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,214 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,215 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,216 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,217 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,217 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,217 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,217 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,217 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,218 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,219 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,220 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,220 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,220 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,220 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,220 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,221 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,222 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,223 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,224 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-09-02 13:52:24,225 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,226 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,227 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,228 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,229 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,230 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,230 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,230 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,230 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,230 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,231 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,232 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,233 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,234 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,235 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,236 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,237 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,238 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,239 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,240 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,240 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,240 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,241 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,241 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,241 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,241 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,242 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' → '( OR UPDATING)'
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' → '( OR )'
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-09-02 13:52:24,243 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,244 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,245 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,246 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-09-02 13:52:24,247 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,248 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,249 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,250 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,250 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,250 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,250 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-09-02 13:52:24,250 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,251 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,252 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-09-02 13:52:24,253 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,254 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' → '()'
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-09-02 13:52:24,255 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,256 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,258 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,258 - root - DEBUG - [common.py:105] - Generated JSON string with 85760 characters
2025-09-02 13:52:24,259 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,260 - root - DEBUG - [common.py:105] - Created trigger3.json
2025-09-02 13:52:24,260 - root - DEBUG - [common.py:105] - processing trigger4_analysis.json
2025-09-02 13:52:24,261 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,261 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,262 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,262 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,263 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'function_calling', 'function_name': 'PERFORM MDMTOOL."mdmt_util_history$write_history"', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_ACTION', 'V_TABLE_NAME', 'V_SCHEMA_NAME', 'COL_NAMES', 'COL_NEW_VALUES', 'COL_OLD_VALUES'], 'named_params': {}, 'raw_text': 'V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES'}}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,263 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,264 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,265 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,266 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - Generated JSON string with 22171 characters
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,267 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,268 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'function_calling', 'function_name': 'PERFORM MDMTOOL."mdmt_util_history$write_history"', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_ACTION', 'V_TABLE_NAME', 'V_SCHEMA_NAME', 'COL_NAMES', 'COL_NEW_VALUES', 'COL_OLD_VALUES'], 'named_params': {}, 'raw_text': 'V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES'}}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,268 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-09-02 13:52:24,269 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-09-02 13:52:24,272 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' → 'TG_OP = '''
2025-09-02 13:52:24,273 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,273 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:52:24,273 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,274 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,275 - root - DEBUG - [common.py:105] - Generated JSON string with 22171 characters
2025-09-02 13:52:24,275 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,276 - root - DEBUG - [common.py:105] - Created trigger4.json
2025-09-02 13:52:24,276 - root - DEBUG - [common.py:105] - processing trigger5_analysis.json
2025-09-02 13:52:24,277 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,277 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,277 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,278 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,278 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,279 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,280 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,281 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,282 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,283 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,284 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,285 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,286 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,287 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,288 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,289 - root - DEBUG - [common.py:105] - Generated JSON string with 15068 characters
2025-09-02 13:52:24,289 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,289 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,289 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,290 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,290 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,290 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,290 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,290 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-09-02 13:52:24,290 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,291 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,292 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,293 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,294 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,295 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,296 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,297 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,298 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' → 'TG_OP = '''
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,299 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,300 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,301 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,302 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,303 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-09-02 13:52:24,303 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,303 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,303 - root - DEBUG - [common.py:105] - Generated JSON string with 15068 characters
2025-09-02 13:52:24,303 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,304 - root - DEBUG - [common.py:105] - Created trigger5.json
2025-09-02 13:52:24,305 - root - DEBUG - [common.py:105] - processing trigger6_analysis.json
2025-09-02 13:52:24,305 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,305 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,307 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,307 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,308 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,309 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,309 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,309 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,309 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,310 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,311 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,311 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,311 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,311 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,311 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,312 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,313 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,314 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,315 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,316 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,317 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,318 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,319 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,320 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,320 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,320 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,321 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,322 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,323 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,324 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,325 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,326 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,327 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,328 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,329 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,330 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,330 - root - DEBUG - [common.py:105] - Generated JSON string with 26867 characters
2025-09-02 13:52:24,331 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,331 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,331 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,332 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,333 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,333 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,334 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,335 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,336 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,337 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,338 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,339 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,340 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,341 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,342 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,343 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,343 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,343 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,344 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-09-02 13:52:24,345 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,346 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,347 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' → '()'
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' → ''
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,348 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,349 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,350 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,351 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,351 - root - DEBUG - [common.py:105] - Generated JSON string with 26867 characters
2025-09-02 13:52:24,351 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,352 - root - DEBUG - [common.py:105] - Created trigger6.json
2025-09-02 13:52:24,353 - root - DEBUG - [common.py:105] - processing yyy_analysis.json
2025-09-02 13:52:24,353 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,354 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,359 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,360 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,360 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:24,360 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,364 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,364 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,364 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,364 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,364 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,365 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,366 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,367 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,368 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,369 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,369 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,369 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,369 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,369 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,370 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,371 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,372 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,372 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,372 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,372 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,373 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,374 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,375 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,376 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,377 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,378 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,379 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,379 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,379 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,380 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,381 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,381 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,381 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,381 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,381 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,382 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,383 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,384 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,385 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,386 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,387 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,388 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,389 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,390 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:52:24,391 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,392 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,393 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,394 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,395 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,396 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,397 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,398 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,399 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,399 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,399 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,399 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,399 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,400 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,400 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,402 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,403 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,403 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,404 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,405 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,405 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,405 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,406 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,407 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,408 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,409 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,409 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,409 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,409 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,409 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,410 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,410 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,410 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,410 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,410 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,411 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,412 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,413 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,414 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,415 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,416 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,417 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,418 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,419 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,420 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,421 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,422 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,423 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,424 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,425 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,426 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,427 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,428 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,429 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,430 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,431 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,432 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,433 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,434 - root - DEBUG - [common.py:105] - Generated JSON string with 116830 characters
2025-09-02 13:52:24,434 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,435 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,435 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,436 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,437 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,437 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,438 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-09-02 13:52:24,439 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,444 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,447 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,447 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,447 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,447 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,448 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,449 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,450 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,451 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,451 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,451 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,451 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,451 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,452 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,453 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,454 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,455 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,456 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,457 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,458 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,459 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,460 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,460 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,460 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,460 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,461 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,462 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,463 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,464 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,465 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,466 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,467 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,468 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,469 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,470 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,471 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,471 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,471 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,471 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,472 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,473 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,474 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,475 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,476 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,477 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,478 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,479 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,480 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,481 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-09-02 13:52:24,482 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' → ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-09-02 13:52:24,483 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' → ''
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-09-02 13:52:24,484 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' → ' OR UPDATING'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' → ' OR '
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' → ''
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,485 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,486 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,487 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,488 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,489 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,490 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,490 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-09-02 13:52:24,490 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,491 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,491 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-09-02 13:52:24,491 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-09-02 13:52:24,492 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,493 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-09-02 13:52:24,494 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,495 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-09-02 13:52:24,496 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,497 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,498 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-09-02 13:52:24,499 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-09-02 13:52:24,500 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,500 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,500 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-09-02 13:52:24,500 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,502 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,503 - root - DEBUG - [common.py:105] - Generated JSON string with 116830 characters
2025-09-02 13:52:24,503 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,504 - root - DEBUG - [common.py:105] - Created yyy.json
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - processing zzz_analysis.json
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,505 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: []
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,505 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Generated JSON string with 2969 characters
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - JSON data structure:
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] -   - Declarations: 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-09-02 13:52:24,506 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: []
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Building final converted structure
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - Generated JSON string with 2969 characters
2025-09-02 13:52:24,506 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-09-02 13:52:24,507 - root - DEBUG - [common.py:105] - Created zzz.json
2025-09-02 13:52:24,507 - root - INFO - [common.py:110] - ✓ PL/JSON conversion complete! (Duration: 1.01 seconds)
2025-09-02 13:52:24,507 - root - DEBUG - [common.py:105] - Step 5 completed in 1.01 seconds
2025-09-02 13:52:24,507 - root - INFO - [common.py:110] - Step 6: Converting PL/JSON to PostgreSQL format...
2025-09-02 13:52:24,508 - root - DEBUG - [common.py:105] - Starting Step 6: PL/JSON → PostgreSQL format JSON
2025-09-02 13:52:24,508 - root - INFO - [common.py:110] - === Starting PL/JSON to PostgreSQL format conversion ===
2025-09-02 13:52:24,508 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:52:24,508 - root - INFO - [common.py:110] - Source directory: 'files/format_pl_json'
2025-09-02 13:52:24,509 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:52:24,509 - root - INFO - [common.py:110] - File pattern: '.json'
2025-09-02 13:52:24,509 - root - INFO - [common.py:110] - Output suffix: '_postgresql.json'
2025-09-02 13:52:24,510 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:52:24,510 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:52:24,511 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:52:24,511 - root - DEBUG - [common.py:105] - Files matching pattern '.json': ['aaa.json', 'bbb.json', 'ccc.json', 'trigger1.json', 'trigger2.json', 'trigger3.json', 'trigger4.json', 'trigger5.json', 'trigger6.json', 'yyy.json', 'zzz.json']
2025-09-02 13:52:24,511 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa.json ===
2025-09-02 13:52:24,511 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\aaa.json
2025-09-02 13:52:24,511 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_postgresql.json
2025-09-02 13:52:24,512 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger aaa.json ===
2025-09-02 13:52:24,512 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\aaa.json
2025-09-02 13:52:24,512 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:24,512 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:24,512 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,513 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,548 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,548 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,572 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,572 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,572 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,572 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:24,572 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,573 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,573 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,573 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:24,573 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:52:24,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,577 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,579 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:24,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Main block rendering took 0.011s
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.012s
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,584 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,628 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,628 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,670 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,670 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,671 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,672 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:24,672 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,673 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,675 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,675 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:24,675 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:24,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:52:24,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,678 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,680 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,687 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:24,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - Main block rendering took 0.020s
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.024s
2025-09-02 13:52:24,695 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,696 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,696 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,742 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,742 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,758 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,758 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:24,758 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,758 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,759 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,759 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:24,759 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:24,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:52:24,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,760 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,761 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,762 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:24,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,767 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:52:24,767 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:52:24,767 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,768 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1214 characters
2025-09-02 13:52:24,768 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.009s
2025-09-02 13:52:24,768 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,768 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:24,768 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\aaa_postgresql.json
2025-09-02 13:52:24,769 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\aaa_postgresql.json
2025-09-02 13:52:24,769 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger aaa.json ===
2025-09-02 13:52:24,769 - root - DEBUG - [common.py:105] - ✓ Created aaa_postgresql.json
2025-09-02 13:52:24,772 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb.json ===
2025-09-02 13:52:24,773 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\bbb.json
2025-09-02 13:52:24,773 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_postgresql.json
2025-09-02 13:52:24,773 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger bbb.json ===
2025-09-02 13:52:24,773 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\bbb.json
2025-09-02 13:52:24,774 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:24,774 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:24,774 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,774 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,793 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,794 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,822 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,822 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:24,822 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,822 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,823 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,823 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:24,823 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:24,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:24,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,824 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:24,824 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,825 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,826 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,827 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,828 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,829 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,830 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,832 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,833 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,833 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,834 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:52:24,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:52:24,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,845 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:52:24,845 - root - DEBUG - [common.py:105] - Main block rendering took 0.023s
2025-09-02 13:52:24,845 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,845 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:52:24,845 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.023s
2025-09-02 13:52:24,846 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,846 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,846 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,873 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,873 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,888 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,888 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,888 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,888 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:24,888 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,888 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,888 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,888 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,888 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,889 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:24,889 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:24,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:24,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,890 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:24,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,895 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,895 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,896 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,896 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,905 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,908 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,909 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,910 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,912 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:52:24,913 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,913 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:52:24,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,914 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:52:24,914 - root - DEBUG - [common.py:105] - Main block rendering took 0.026s
2025-09-02 13:52:24,914 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,914 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:52:24,915 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.026s
2025-09-02 13:52:24,915 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,915 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,915 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,935 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,935 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:24,948 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:24,948 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:24,949 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,949 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:24,950 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,951 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,952 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,953 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,953 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,954 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:24,954 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,955 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,955 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,956 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,956 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:24,957 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:24,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,963 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,963 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,964 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:24,965 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:52:24,965 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:24,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:24,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:52:24,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:24,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2523 characters
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.019s
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:24,967 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\bbb_postgresql.json
2025-09-02 13:52:24,968 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\bbb_postgresql.json
2025-09-02 13:52:24,968 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger bbb.json ===
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - ✓ Created bbb_postgresql.json
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc.json ===
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\ccc.json
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_postgresql.json
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger ccc.json ===
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\ccc.json
2025-09-02 13:52:24,969 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:24,970 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:24,970 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:24,970 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:24,988 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:24,988 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,004 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,004 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:25,004 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,004 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,004 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,005 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:25,005 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,009 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,012 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,013 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - Main block rendering took 0.012s
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.013s
2025-09-02 13:52:25,017 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,018 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,018 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,044 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,044 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,062 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:25,062 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,065 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,066 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,069 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,072 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,072 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,072 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,072 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:52:25,072 - root - DEBUG - [common.py:105] - Main block rendering took 0.010s
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.011s
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,073 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,093 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,093 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:25,107 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,112 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,114 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,120 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - Main block rendering took 0.013s
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1685 characters
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.013s
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,120 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:25,121 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\ccc_postgresql.json
2025-09-02 13:52:25,123 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\ccc_postgresql.json
2025-09-02 13:52:25,123 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger ccc.json ===
2025-09-02 13:52:25,123 - root - DEBUG - [common.py:105] - ✓ Created ccc_postgresql.json
2025-09-02 13:52:25,123 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1.json ===
2025-09-02 13:52:25,124 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger1.json
2025-09-02 13:52:25,124 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:52:25,124 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger1.json ===
2025-09-02 13:52:25,124 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger1.json
2025-09-02 13:52:25,126 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:25,126 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:25,126 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,126 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,148 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,148 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,185 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,185 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,185 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:25,186 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,186 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,187 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,187 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:25,188 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:52:25,189 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,193 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,194 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,197 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,199 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,202 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,203 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,205 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,207 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,211 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,218 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,220 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,223 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,224 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,228 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,234 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,237 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,240 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,242 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,245 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,254 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,260 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,261 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,263 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,264 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,268 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,275 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,276 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,278 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,285 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,292 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,294 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,300 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,319 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,322 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,340 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,357 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,367 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,369 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,371 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,374 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,375 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,375 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,376 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,376 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,377 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,379 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,382 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,383 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,386 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,394 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,396 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,397 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,405 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,406 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,415 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,417 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,420 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,423 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,425 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,426 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,428 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,428 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,429 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,430 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,433 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,434 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,437 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,438 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,447 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,452 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,455 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,457 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,458 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,460 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,471 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:52:25,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Main block rendering took 0.286s
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.289s
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,474 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,518 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,518 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,535 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:25,536 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:52:25,536 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,537 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,539 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,540 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,541 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,541 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,542 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,542 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,547 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,547 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,550 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,551 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,552 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,553 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,554 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,558 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,558 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,559 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,560 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,566 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,569 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,572 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,573 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,574 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,575 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,577 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,578 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,580 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,582 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,584 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,585 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,586 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,587 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,590 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,592 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,593 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,593 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,594 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,595 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,596 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,598 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,599 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,599 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,600 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,601 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,602 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,604 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,604 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,604 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,605 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,605 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,606 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,609 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,610 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,613 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,614 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,615 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,615 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,616 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,617 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,618 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,620 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,624 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,625 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,625 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,626 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,626 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,627 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,627 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,632 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,649 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,653 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,656 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,657 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,658 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,661 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,663 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,664 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,666 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,667 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,668 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,669 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,670 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,671 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,678 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,681 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,683 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,687 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,687 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,687 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:52:25,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:52:25,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,694 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:52:25,694 - root - DEBUG - [common.py:105] - Main block rendering took 0.159s
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.159s
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,695 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,725 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,725 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,745 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:25,746 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,747 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:52:25,747 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,747 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,749 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,752 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,760 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,760 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,762 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,775 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,779 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,780 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,782 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,783 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,800 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,800 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,802 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,803 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,803 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,806 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,806 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,807 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,813 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,813 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,814 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,815 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,815 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,816 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,817 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,817 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,819 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,822 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,823 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,824 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,825 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,827 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,844 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,844 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,849 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,851 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,853 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,857 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,858 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,858 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,859 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,862 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,873 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,874 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,875 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:25,876 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,881 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:25,883 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:25,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,896 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,901 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,902 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,904 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,906 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,907 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,910 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,911 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,914 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,915 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:25,918 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,920 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,922 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,924 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,925 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:25,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:25,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:25,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:25,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:25,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:25,930 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:25,930 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:25,931 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:52:25,932 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,932 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,936 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,937 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,938 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,938 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,938 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,938 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:25,938 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:25,938 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:52:25,938 - root - DEBUG - [common.py:105] - Main block rendering took 0.192s
2025-09-02 13:52:25,938 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:25,939 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21091 characters
2025-09-02 13:52:25,939 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.193s
2025-09-02 13:52:25,939 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:25,940 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:25,943 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:52:25,960 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger1_postgresql.json
2025-09-02 13:52:25,961 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger1.json ===
2025-09-02 13:52:25,961 - root - DEBUG - [common.py:105] - ✓ Created trigger1_postgresql.json
2025-09-02 13:52:25,962 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2.json ===
2025-09-02 13:52:25,962 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger2.json
2025-09-02 13:52:25,962 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:52:25,962 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger2.json ===
2025-09-02 13:52:25,962 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger2.json
2025-09-02 13:52:25,964 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:25,964 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:25,964 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:25,964 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:25,993 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:25,993 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,005 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,006 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:52:26,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,008 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,011 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,012 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,013 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,013 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,014 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,015 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,016 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,017 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,018 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,019 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,028 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,030 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,033 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,034 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,035 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,036 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,037 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,038 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,040 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,044 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,046 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,049 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,050 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,052 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,052 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,052 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,053 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,054 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,055 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:52:26,055 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,055 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,056 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,058 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,058 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,060 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,063 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,065 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,067 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,068 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,069 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,072 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,072 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,074 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:52:26,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,076 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,077 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Main block rendering took 0.071s
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.071s
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,077 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,109 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,109 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,139 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,140 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:26,140 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,141 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,141 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,141 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,141 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:52:26,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,145 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,152 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,156 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,158 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,159 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,161 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,164 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,165 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,168 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,170 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,173 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,175 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,177 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,178 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,181 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,186 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,187 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,188 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,192 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,196 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,197 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,198 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,199 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,201 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,204 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,206 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,210 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,214 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,217 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,218 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,219 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,223 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:52:26,223 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,224 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,226 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,232 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,234 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,235 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,244 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,244 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,246 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,248 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:52:26,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,250 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,250 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,250 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,251 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,251 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,251 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:52:26,251 - root - DEBUG - [common.py:105] - Main block rendering took 0.110s
2025-09-02 13:52:26,252 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,252 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:52:26,252 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.112s
2025-09-02 13:52:26,252 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,252 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,253 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,302 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,302 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,332 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,332 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:26,332 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,332 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,332 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,333 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,333 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:52:26,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,342 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,356 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,358 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,359 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,364 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,367 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,369 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,370 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,371 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,372 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,375 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,377 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,382 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,385 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,387 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,387 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,390 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,390 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,391 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,393 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:26,393 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,394 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:52:26,394 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,395 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,396 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,398 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,400 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,402 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,403 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,404 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,404 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,405 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,406 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,407 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,408 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,408 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,409 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,409 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:52:26,409 - root - DEBUG - [common.py:105] - Main block rendering took 0.077s
2025-09-02 13:52:26,409 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,409 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8013 characters
2025-09-02 13:52:26,410 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.078s
2025-09-02 13:52:26,410 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,410 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:26,410 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:52:26,414 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger2_postgresql.json
2025-09-02 13:52:26,414 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger2.json ===
2025-09-02 13:52:26,414 - root - DEBUG - [common.py:105] - ✓ Created trigger2_postgresql.json
2025-09-02 13:52:26,414 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3.json ===
2025-09-02 13:52:26,415 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger3.json
2025-09-02 13:52:26,415 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:52:26,415 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger3.json ===
2025-09-02 13:52:26,415 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger3.json
2025-09-02 13:52:26,416 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:26,416 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:26,416 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,416 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,443 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,443 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,462 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,462 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:26,463 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,464 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,465 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,466 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,467 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,468 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,470 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,471 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,472 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,475 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:52:26,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,475 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:52:26,475 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,476 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,476 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:52:26,476 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,477 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,477 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,477 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:52:26,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,477 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:52:26,477 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:52:26,478 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:52:26,478 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:52:26,478 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,478 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,478 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,482 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,483 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,483 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,483 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,484 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,485 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Main block rendering took 0.023s
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.023s
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,485 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,486 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,512 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,512 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,529 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,530 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,530 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,530 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:26,530 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,530 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,530 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,531 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,531 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,531 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,531 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:26,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:26,532 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,533 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:26,533 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,534 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,534 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,535 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,537 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,538 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,539 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,540 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,541 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,542 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,543 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,544 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,545 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,545 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,545 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,546 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,547 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,548 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,549 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:52:26,549 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,550 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:52:26,550 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,552 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,552 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:52:26,553 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,554 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,554 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,555 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:52:26,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,556 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:52:26,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:52:26,560 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:52:26,560 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:52:26,560 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,560 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,560 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,566 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Main block rendering took 0.037s
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.038s
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,568 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,596 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,597 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,617 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,618 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,620 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,621 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,621 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,621 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,621 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,621 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:26,622 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,623 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:26,623 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,624 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,624 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,625 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,627 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,628 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,629 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,630 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,631 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,632 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,633 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,634 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,634 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,635 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,636 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,637 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,638 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:26,639 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:52:26,639 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,640 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (TO_CHAR(:NEW.VALID_FROM, '...'
2025-09-02 13:52:26,640 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,641 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,641 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:52:26,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,642 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:26,642 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,642 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:52:26,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,643 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF (V_COMPANY_TYPE_CD = 'L') T...'
2025-09-02 13:52:26,643 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:52:26,644 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:52:26,644 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:52:26,644 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:26,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:52:26,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Main block rendering took 0.025s
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7699 characters
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.027s
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:26,647 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger3_postgresql.json
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger3.json ===
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - ✓ Created trigger3_postgresql.json
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4.json ===
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger4.json
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:52:26,652 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger4.json ===
2025-09-02 13:52:26,653 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger4.json
2025-09-02 13:52:26,653 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:26,653 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:26,653 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,654 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,676 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,676 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,693 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,694 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,696 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,704 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,711 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,711 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:52:26,711 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:52:26,711 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,711 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:52:26,711 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.018s
2025-09-02 13:52:26,712 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,712 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,712 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,734 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,734 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,745 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,745 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,745 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,746 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,746 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,747 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,747 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,748 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,763 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.019s
2025-09-02 13:52:26,764 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,765 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,765 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,783 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,783 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,794 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,794 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,794 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,795 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,795 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,795 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,795 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,811 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,812 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,812 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - Main block rendering took 0.017s
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4092 characters
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.018s
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,812 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:26,813 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger4_postgresql.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger4.json ===
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - ✓ Created trigger4_postgresql.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5.json ===
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger5.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger5.json ===
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger5.json
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:26,814 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:26,815 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,815 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,835 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,835 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,845 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:26,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,849 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,850 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:26,850 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,851 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,851 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,851 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:52:26,851 - root - DEBUG - [common.py:105] - Main block rendering took 0.006s
2025-09-02 13:52:26,851 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,851 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:52:26,852 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.007s
2025-09-02 13:52:26,852 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,852 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,852 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,868 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,868 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,885 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,885 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,885 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,886 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,886 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,886 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,886 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,887 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,887 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,888 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,889 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,891 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:26,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,892 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,893 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Main block rendering took 0.007s
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.008s
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,893 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,910 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,910 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,922 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,922 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,922 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,922 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:26,922 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,922 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,922 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,922 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,923 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,923 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,923 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:26,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:26,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,923 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,924 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,924 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,925 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:26,925 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:26,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:26,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:26,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Main block rendering took 0.005s
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1275 characters
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.006s
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:26,928 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:52:26,929 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger5_postgresql.json
2025-09-02 13:52:26,929 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger5.json ===
2025-09-02 13:52:26,929 - root - DEBUG - [common.py:105] - ✓ Created trigger5_postgresql.json
2025-09-02 13:52:26,930 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6.json ===
2025-09-02 13:52:26,930 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger6.json
2025-09-02 13:52:26,930 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:52:26,930 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger6.json ===
2025-09-02 13:52:26,930 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger6.json
2025-09-02 13:52:26,931 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:26,931 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:26,931 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,931 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,947 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,947 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:26,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:26,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:26,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:26,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:26,960 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:26,961 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:26,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:26,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:26,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:26,961 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,962 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,965 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,965 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,966 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,967 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:26,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:26,968 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:26,971 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:26,972 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:26,972 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:52:26,972 - root - DEBUG - [common.py:105] - Main block rendering took 0.012s
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.013s
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:26,973 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:26,989 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:26,989 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,000 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,000 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,000 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,000 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:27,000 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,000 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,001 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,001 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:27,001 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:27,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,002 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,003 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,004 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,005 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,006 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,007 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,009 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,009 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,010 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.010s
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,010 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,027 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,027 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,038 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,039 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:27,039 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,040 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,042 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,043 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,043 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,044 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,044 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,045 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,046 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:52:27,047 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,048 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2331 characters
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.009s
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:27,048 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:52:27,049 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger6_postgresql.json
2025-09-02 13:52:27,049 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger6.json ===
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - ✓ Created trigger6_postgresql.json
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy.json ===
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\yyy.json
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_postgresql.json
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger yyy.json ===
2025-09-02 13:52:27,050 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\yyy.json
2025-09-02 13:52:27,051 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:27,052 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:27,052 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,052 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,068 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,068 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,089 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,089 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,090 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,090 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:27,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,091 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,092 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,092 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,093 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,093 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,094 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,094 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,095 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,096 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,097 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,097 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,098 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,098 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,099 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,100 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,101 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,102 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,103 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,105 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,107 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,116 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,117 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,119 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,120 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,120 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,121 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,122 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,124 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,125 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,129 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,130 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,133 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,135 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,140 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,141 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,143 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,144 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,145 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,145 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,146 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,147 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,149 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,152 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,153 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,153 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,156 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,157 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,159 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,160 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,161 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,162 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,162 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,163 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,164 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,164 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,166 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,167 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,167 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:52:27,167 - root - DEBUG - [common.py:105] - Main block rendering took 0.077s
2025-09-02 13:52:27,167 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,167 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:52:27,168 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.078s
2025-09-02 13:52:27,168 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,168 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,168 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,189 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,189 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,208 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,208 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,209 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,210 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,210 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,212 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,213 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,214 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,215 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,216 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,217 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,218 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,218 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,219 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,222 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,224 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,225 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,227 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,228 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,228 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,229 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,233 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,234 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,235 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,236 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,237 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,237 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,238 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,239 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,243 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,244 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,245 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,246 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,246 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,246 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,247 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,248 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,248 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,249 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,252 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,253 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,254 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,254 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,255 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,256 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,257 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,258 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,260 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,260 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,260 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,261 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,261 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,261 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,262 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,263 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Main block rendering took 0.054s
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.055s
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,263 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,287 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,287 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,304 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,305 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:27,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,308 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,310 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,314 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,316 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,317 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,320 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,322 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,323 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,334 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,340 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,351 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,353 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,354 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,355 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,355 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:52:27,355 - root - DEBUG - [common.py:105] - Main block rendering took 0.050s
2025-09-02 13:52:27,355 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,356 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10812 characters
2025-09-02 13:52:27,356 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.052s
2025-09-02 13:52:27,356 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,356 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:27,356 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\yyy_postgresql.json
2025-09-02 13:52:27,363 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\yyy_postgresql.json
2025-09-02 13:52:27,363 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger yyy.json ===
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - ✓ Created yyy_postgresql.json
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz.json ===
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\zzz.json
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_postgresql.json
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger zzz.json ===
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\zzz.json
2025-09-02 13:52:27,364 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete', 'metadata']
2025-09-02 13:52:27,365 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-09-02 13:52:27,365 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,365 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,384 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,385 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,398 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,399 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:27,399 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,399 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,399 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,399 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,399 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,402 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,402 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,402 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,402 - root - DEBUG - [common.py:105] - Generated 5 lines in main execution block
2025-09-02 13:52:27,402 - root - DEBUG - [common.py:105] - Main block rendering took 0.000s
2025-09-02 13:52:27,402 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,402 - root - DEBUG - [common.py:105] - Final SQL contains 10 lines, 166 characters
2025-09-02 13:52:27,403 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 10 lines generated in 0.004s
2025-09-02 13:52:27,403 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,403 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,403 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,422 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,422 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,435 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,435 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,435 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,436 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Generated 5 lines in main execution block
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Main block rendering took 0.000s
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Final SQL contains 10 lines, 166 characters
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 10 lines generated in 0.001s
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-09-02 13:52:27,436 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,458 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,458 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,473 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,473 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,474 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Generated 5 lines in main execution block
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Main block rendering took 0.000s
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Final SQL contains 10 lines, 166 characters
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 10 lines generated in 0.001s
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-09-02 13:52:27,474 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\zzz_postgresql.json
2025-09-02 13:52:27,475 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\zzz_postgresql.json
2025-09-02 13:52:27,475 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger zzz.json ===
2025-09-02 13:52:27,475 - root - DEBUG - [common.py:105] - ✓ Created zzz_postgresql.json
2025-09-02 13:52:27,475 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:52:27,476 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:52:27,476 - root - INFO - [common.py:110] - === PL/JSON to PostgreSQL format conversion complete ===
2025-09-02 13:52:27,476 - root - INFO - [common.py:110] - ✓ PostgreSQL format conversion complete! (Duration: 2.97 seconds)
2025-09-02 13:52:27,476 - root - DEBUG - [common.py:105] - Step 6 completed in 2.97 seconds
2025-09-02 13:52:27,477 - root - INFO - [common.py:110] - Step 7: Converting JSON analysis directly to PostgreSQL SQL...
2025-09-02 13:52:27,477 - root - DEBUG - [common.py:105] - Starting Step 7: JSON analysis → PostgreSQL SQL
2025-09-02 13:52:27,477 - root - INFO - [common.py:110] - === Starting JSON analysis to PostgreSQL SQL conversion ===
2025-09-02 13:52:27,477 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:52:27,477 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-09-02 13:52:27,478 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:52:27,478 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-09-02 13:52:27,478 - root - INFO - [common.py:110] - Output suffix: '_postgresql.sql'
2025-09-02 13:52:27,478 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:52:27,478 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['aaa_analysis.json', 'bbb_analysis.json', 'ccc_analysis.json', 'trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_analysis.json ===
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - Source path: files/format_json\aaa_analysis.json
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger aaa_analysis.json ===
2025-09-02 13:52:27,479 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\aaa_analysis.json
2025-09-02 13:52:27,480 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,480 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,480 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,497 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,497 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,514 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,514 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 1 exceptions
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,515 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 2 statements in main block
2025-09-02 13:52:27,515 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,516 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,517 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,519 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,524 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,524 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,524 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Generated 20 lines in main execution block
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Main block rendering took 0.009s
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 1231 characters
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 25 lines generated in 0.009s
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Rendered SQL length: 1231 characters
2025-09-02 13:52:27,524 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:52:27,525 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\aaa_analysis_postgresql.sql
2025-09-02 13:52:27,525 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger aaa_analysis.json ===
2025-09-02 13:52:27,525 - root - DEBUG - [common.py:105] - ✓ Created aaa_analysis_postgresql.sql
2025-09-02 13:52:27,525 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_analysis.json ===
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - Source path: files/format_json\bbb_analysis.json
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger bbb_analysis.json ===
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\bbb_analysis.json
2025-09-02 13:52:27,526 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,526 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,544 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,544 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,555 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,555 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,556 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,556 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,556 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,556 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,557 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,558 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,558 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,559 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,560 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,561 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,561 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,562 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,563 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,564 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,565 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,566 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,566 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,567 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: delete_statement
2025-09-02 13:52:27,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,568 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,569 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 3 exception handlers
2025-09-02 13:52:27,569 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,569 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,570 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,572 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,572 - root - DEBUG - [common.py:105] - Generated 58 lines in main execution block
2025-09-02 13:52:27,572 - root - DEBUG - [common.py:105] - Main block rendering took 0.016s
2025-09-02 13:52:27,572 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,572 - root - DEBUG - [common.py:105] - Final SQL contains 63 lines, 2547 characters
2025-09-02 13:52:27,572 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 63 lines generated in 0.017s
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - Rendered SQL length: 2547 characters
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\bbb_analysis_postgresql.sql
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger bbb_analysis.json ===
2025-09-02 13:52:27,573 - root - DEBUG - [common.py:105] - ✓ Created bbb_analysis_postgresql.sql
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_analysis.json ===
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - Source path: files/format_json\ccc_analysis.json
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger ccc_analysis.json ===
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\ccc_analysis.json
2025-09-02 13:52:27,574 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,574 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,588 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,589 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 1 exceptions
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,603 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,603 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,604 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,604 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,605 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,606 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,607 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,608 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,609 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,612 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,613 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,613 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Generated 24 lines in main execution block
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Main block rendering took 0.010s
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Final SQL contains 29 lines, 1694 characters
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 29 lines generated in 0.010s
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Rendered SQL length: 1694 characters
2025-09-02 13:52:27,613 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\ccc_analysis_postgresql.sql
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger ccc_analysis.json ===
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - ✓ Created ccc_analysis_postgresql.sql
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_analysis.json ===
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger1_analysis.json ===
2025-09-02 13:52:27,614 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-09-02 13:52:27,615 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,615 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,615 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,629 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,629 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,640 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,640 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,640 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,640 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,641 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 19 statements in main block
2025-09-02 13:52:27,641 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,642 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,644 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,645 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,646 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:27,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,647 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,648 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,649 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,649 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,650 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,651 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,651 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,652 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,652 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,653 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,653 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,654 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,654 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,655 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,656 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,656 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,656 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,657 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,657 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,659 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,660 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,661 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,662 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,662 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,663 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,663 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,663 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,664 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,664 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,665 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,666 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,667 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,667 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,668 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,670 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,671 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,672 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,673 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,674 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,675 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,676 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,677 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,679 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,680 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,681 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,682 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,683 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,684 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,685 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,688 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,691 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,692 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,693 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,694 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,695 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,697 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,698 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,699 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,700 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,701 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,702 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,702 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,702 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,703 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,705 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,706 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,707 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,710 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,711 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,712 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,713 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,714 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,715 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:27,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,716 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,717 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,717 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,718 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,723 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,724 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,724 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,725 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,726 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,726 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,727 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,728 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,728 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 29 variables for PostgreSQL
2025-09-02 13:52:27,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,729 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,733 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,733 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,734 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-09-02 13:52:27,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,734 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 18 exception handlers
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,735 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,736 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,736 - root - DEBUG - [common.py:105] - Generated 353 lines in main execution block
2025-09-02 13:52:27,736 - root - DEBUG - [common.py:105] - Main block rendering took 0.095s
2025-09-02 13:52:27,736 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,736 - root - DEBUG - [common.py:105] - Final SQL contains 358 lines, 21197 characters
2025-09-02 13:52:27,736 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 358 lines generated in 0.096s
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Rendered SQL length: 21197 characters
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger1_analysis_postgresql.sql
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger1_analysis.json ===
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - ✓ Created trigger1_analysis_postgresql.sql
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_analysis.json ===
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger2_analysis.json ===
2025-09-02 13:52:27,737 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-09-02 13:52:27,738 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,738 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,738 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,754 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,754 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,764 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,764 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,764 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,764 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,765 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 5 statements in main block
2025-09-02 13:52:27,765 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,766 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,767 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,768 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,769 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,772 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,772 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,773 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,774 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,775 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,775 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,776 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,777 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,778 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,779 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,781 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,782 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,783 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,784 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,785 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,789 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:27,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,791 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:27,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,793 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-02 13:52:27,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,794 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-09-02 13:52:27,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,800 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,802 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:27,803 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,803 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 exception handlers
2025-09-02 13:52:27,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,804 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,805 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Generated 110 lines in main execution block
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Main block rendering took 0.040s
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Final SQL contains 115 lines, 8099 characters
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 115 lines generated in 0.040s
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Rendered SQL length: 8099 characters
2025-09-02 13:52:27,805 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:52:27,806 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger2_analysis_postgresql.sql
2025-09-02 13:52:27,806 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger2_analysis.json ===
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - ✓ Created trigger2_analysis_postgresql.sql
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_analysis.json ===
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger3_analysis.json ===
2025-09-02 13:52:27,807 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-09-02 13:52:27,807 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,808 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,808 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,827 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,827 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,838 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:27,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:27,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,843 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,844 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,844 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,845 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,846 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,847 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,848 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:27,849 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-09-02 13:52:27,849 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,850 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (TO_CHAR(:NEW.VALID_FROM, ...'
2025-09-02 13:52:27,850 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,851 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:27,851 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-09-02 13:52:27,851 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,852 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_TIMESTAMP(A...'
2025-09-02 13:52:27,852 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:27,852 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,852 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-09-02 13:52:27,852 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,853 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (V_COMPANY_TYPE_CD = 'L') ...'
2025-09-02 13:52:27,853 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: for_loop
2025-09-02 13:52:27,853 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-09-02 13:52:27,854 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-09-02 13:52:27,854 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-09-02 13:52:27,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,854 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,855 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 exception handlers
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,856 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Generated 94 lines in main execution block
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Final SQL contains 99 lines, 7759 characters
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 99 lines generated in 0.019s
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Rendered SQL length: 7759 characters
2025-09-02 13:52:27,856 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger3_analysis_postgresql.sql
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger3_analysis.json ===
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - ✓ Created trigger3_analysis_postgresql.sql
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_analysis.json ===
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger4_analysis.json ===
2025-09-02 13:52:27,857 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-09-02 13:52:27,857 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,858 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,858 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,873 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,873 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,884 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,885 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:27,885 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,886 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,887 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,894 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:27,899 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:27,902 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Generated 21 lines in main execution block
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Main block rendering took 0.017s
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Final SQL contains 26 lines, 4100 characters
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 26 lines generated in 0.017s
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Rendered SQL length: 4100 characters
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger4_analysis_postgresql.sql
2025-09-02 13:52:27,902 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger4_analysis.json ===
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - ✓ Created trigger4_analysis_postgresql.sql
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_analysis.json ===
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger5_analysis.json ===
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-09-02 13:52:27,903 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:27,903 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,946 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:27,946 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:27,983 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:27,983 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:27,983 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:27,983 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:27,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:27,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:27,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:27,984 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:27,984 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:27,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 2 variables for PostgreSQL
2025-09-02 13:52:27,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:27,985 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,986 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:27,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:27,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:27,996 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:27,998 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:28,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:28,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,001 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: return_statement
2025-09-02 13:52:28,002 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:28,002 - root - DEBUG - [common.py:105] - Generated 23 lines in main execution block
2025-09-02 13:52:28,002 - root - DEBUG - [common.py:105] - Main block rendering took 0.018s
2025-09-02 13:52:28,002 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:28,002 - root - DEBUG - [common.py:105] - Final SQL contains 28 lines, 1285 characters
2025-09-02 13:52:28,003 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 28 lines generated in 0.019s
2025-09-02 13:52:28,003 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:28,003 - root - DEBUG - [common.py:105] - Rendered SQL length: 1285 characters
2025-09-02 13:52:28,003 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:52:28,005 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger5_analysis_postgresql.sql
2025-09-02 13:52:28,005 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger5_analysis.json ===
2025-09-02 13:52:28,005 - root - DEBUG - [common.py:105] - ✓ Created trigger5_analysis_postgresql.sql
2025-09-02 13:52:28,005 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_analysis.json ===
2025-09-02 13:52:28,005 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-09-02 13:52:28,006 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:52:28,006 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger6_analysis.json ===
2025-09-02 13:52:28,006 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-09-02 13:52:28,006 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:28,007 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:28,007 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,067 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:28,067 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:28,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:28,108 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:28,108 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:28,109 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:28,109 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:28,109 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 6 variables for PostgreSQL
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 6 statements in main block
2025-09-02 13:52:28,109 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,114 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,117 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,118 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,120 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,124 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,125 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,126 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,127 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,138 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,142 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: insert_statement
2025-09-02 13:52:28,148 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,154 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 exception handlers
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,155 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:28,155 - root - DEBUG - [common.py:105] - Generated 40 lines in main execution block
2025-09-02 13:52:28,155 - root - DEBUG - [common.py:105] - Main block rendering took 0.047s
2025-09-02 13:52:28,155 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:28,156 - root - DEBUG - [common.py:105] - Final SQL contains 45 lines, 2350 characters
2025-09-02 13:52:28,156 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 45 lines generated in 0.047s
2025-09-02 13:52:28,156 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:28,156 - root - DEBUG - [common.py:105] - Rendered SQL length: 2350 characters
2025-09-02 13:52:28,156 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger6_analysis_postgresql.sql
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger6_analysis.json ===
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - ✓ Created trigger6_analysis_postgresql.sql
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_analysis.json ===
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger yyy_analysis.json ===
2025-09-02 13:52:28,158 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-09-02 13:52:28,161 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:28,161 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:28,161 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,234 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:28,234 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,285 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:28,286 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:28,286 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:28,286 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:28,286 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:28,286 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-02 13:52:28,287 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:28,287 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:28,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:28,287 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:28,287 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:28,287 - root - DEBUG - [common.py:105] - Declarations rendering took 0.001s
2025-09-02 13:52:28,287 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:28,290 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:28,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:28,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 4 statements in main block
2025-09-02 13:52:28,291 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: begin_end
2025-09-02 13:52:28,292 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:28,292 - utilities.FormatSQL - DEBUG - [FormatSQL.py:413] - Rendering 9 variables for PostgreSQL
2025-09-02 13:52:28,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:444] - Processing 1 statements in main block
2025-09-02 13:52:28,293 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,294 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 exception handlers
2025-09-02 13:52:28,295 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:28,296 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,297 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,298 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,301 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,303 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,304 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,305 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,306 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,307 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,309 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,311 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,312 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,313 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,315 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,318 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,321 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,321 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:28,324 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:28,325 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:28,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:28,326 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,327 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,328 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,329 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,330 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:28,332 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,333 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: update_statement
2025-09-02 13:52:28,334 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,335 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,336 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,337 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,338 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,339 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,339 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,340 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,341 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,342 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,343 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,344 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: raise_statement
2025-09-02 13:52:28,345 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: select_statement
2025-09-02 13:52:28,346 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: assignment
2025-09-02 13:52:28,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,347 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: if_else
2025-09-02 13:52:28,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,348 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: case_when
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: null_statement
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 11 exception handlers
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,349 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - Rendering statement type: function_calling
2025-09-02 13:52:28,350 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Generated 146 lines in main execution block
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Main block rendering took 0.060s
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Final SQL contains 151 lines, 10885 characters
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 151 lines generated in 0.065s
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Rendered SQL length: 10885 characters
2025-09-02 13:52:28,351 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:52:28,352 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\yyy_analysis_postgresql.sql
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger yyy_analysis.json ===
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - ✓ Created yyy_analysis_postgresql.sql
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_analysis.json ===
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger zzz_analysis.json ===
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-09-02 13:52:28,353 - root - DEBUG - [main.py:831] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-02 13:52:28,353 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-02 13:52:28,354 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,371 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-02 13:52:28,371 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-02 13:52:28,383 - utilities.FormatSQL - DEBUG - [FormatSQL.py:115] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-09-02 13:52:28,383 - utilities.FormatSQL - DEBUG - [FormatSQL.py:273] - SQL generation: Converting JSON analysis to formatted PostgreSQL SQL
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for PostgreSQL
2025-09-02 13:52:28,383 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-02 13:52:28,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:334] - === Rendering PostgreSQL declarations ===
2025-09-02 13:52:28,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:384] - === PostgreSQL declarations complete ===
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Generated 0 lines of declarations
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-02 13:52:28,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:403] - === Rendering main block for PostgreSQL ===
2025-09-02 13:52:28,384 - utilities.FormatSQL - DEBUG - [FormatSQL.py:464] - === Main block complete for PostgreSQL ===
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Generated 5 lines in main execution block
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Main block rendering took 0.000s
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Final SQL contains 10 lines, 166 characters
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation: 10 lines generated in 0.001s
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Rendered SQL length: 166 characters
2025-09-02 13:52:28,384 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:52:28,385 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\zzz_analysis_postgresql.sql
2025-09-02 13:52:28,385 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger zzz_analysis.json ===
2025-09-02 13:52:28,385 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis_postgresql.sql
2025-09-02 13:52:28,385 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:52:28,385 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:52:28,386 - root - INFO - [common.py:110] - === JSON analysis to PostgreSQL SQL conversion complete ===
2025-09-02 13:52:28,386 - root - INFO - [common.py:110] - ✓ Direct PostgreSQL SQL conversion complete! (Duration: 0.91 seconds)
2025-09-02 13:52:28,386 - root - DEBUG - [common.py:105] - Step 7 completed in 0.91 seconds
2025-09-02 13:52:28,386 - root - INFO - [common.py:110] - Step 8: Converting PostgreSQL format JSON to final SQL...
2025-09-02 13:52:28,386 - root - DEBUG - [common.py:105] - Starting Step 8: PostgreSQL JSON → SQL output files
2025-09-02 13:52:28,386 - root - INFO - [common.py:110] - === Starting PostgreSQL format to SQL conversion ===
2025-09-02 13:52:28,387 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-02 13:52:28,387 - root - INFO - [common.py:110] - Source directory: 'files/format_plsql'
2025-09-02 13:52:28,387 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-09-02 13:52:28,387 - root - INFO - [common.py:110] - File pattern: '_postgresql.json'
2025-09-02 13:52:28,387 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-09-02 13:52:28,387 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Found 11 files in source directory
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Files matching pattern '_postgresql.json': ['aaa_postgresql.json', 'bbb_postgresql.json', 'ccc_postgresql.json', 'trigger1_postgresql.json', 'trigger2_postgresql.json', 'trigger3_postgresql.json', 'trigger4_postgresql.json', 'trigger5_postgresql.json', 'trigger6_postgresql.json', 'yyy_postgresql.json', 'zzz_postgresql.json']
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - === Processing file 1/11: aaa_postgresql.json ===
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\aaa_postgresql.json
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\aaa_postgresql.sql
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger aaa_postgresql.json ===
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\aaa_postgresql.json
2025-09-02 13:52:28,388 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,389 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,389 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,389 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\aaa_postgresql.sql
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\aaa_postgresql.sql
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger aaa_postgresql.json ===
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - ✓ Created aaa_postgresql.sql
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - === Processing file 2/11: bbb_postgresql.json ===
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\bbb_postgresql.json
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\bbb_postgresql.sql
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger bbb_postgresql.json ===
2025-09-02 13:52:28,390 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\bbb_postgresql.json
2025-09-02 13:52:28,391 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,391 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,391 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,391 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\bbb_postgresql.sql
2025-09-02 13:52:28,392 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\bbb_postgresql.sql
2025-09-02 13:52:28,392 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger bbb_postgresql.json ===
2025-09-02 13:52:28,392 - root - DEBUG - [common.py:105] - ✓ Created bbb_postgresql.sql
2025-09-02 13:52:28,392 - root - DEBUG - [common.py:105] - === Processing file 3/11: ccc_postgresql.json ===
2025-09-02 13:52:28,392 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\ccc_postgresql.json
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\ccc_postgresql.sql
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger ccc_postgresql.json ===
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\ccc_postgresql.json
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\ccc_postgresql.sql
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\ccc_postgresql.sql
2025-09-02 13:52:28,393 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger ccc_postgresql.json ===
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - ✓ Created ccc_postgresql.sql
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - === Processing file 4/11: trigger1_postgresql.json ===
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger1_postgresql.json ===
2025-09-02 13:52:28,394 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger1_postgresql.json
2025-09-02 13:52:28,395 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,395 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,395 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,395 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger1_postgresql.sql
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger1_postgresql.json ===
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - ✓ Created trigger1_postgresql.sql
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - === Processing file 5/11: trigger2_postgresql.json ===
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger2_postgresql.json ===
2025-09-02 13:52:28,397 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger2_postgresql.json
2025-09-02 13:52:28,398 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,398 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,398 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,398 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:52:28,399 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger2_postgresql.sql
2025-09-02 13:52:28,399 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger2_postgresql.json ===
2025-09-02 13:52:28,399 - root - DEBUG - [common.py:105] - ✓ Created trigger2_postgresql.sql
2025-09-02 13:52:28,399 - root - DEBUG - [common.py:105] - === Processing file 6/11: trigger3_postgresql.json ===
2025-09-02 13:52:28,400 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:52:28,400 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:52:28,400 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger3_postgresql.json ===
2025-09-02 13:52:28,400 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger3_postgresql.json
2025-09-02 13:52:28,401 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,401 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,402 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,402 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger3_postgresql.sql
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger3_postgresql.json ===
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - ✓ Created trigger3_postgresql.sql
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - === Processing file 7/11: trigger4_postgresql.json ===
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger4_postgresql.json ===
2025-09-02 13:52:28,403 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger4_postgresql.json
2025-09-02 13:52:28,404 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,404 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,404 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,404 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger4_postgresql.sql
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger4_postgresql.json ===
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - ✓ Created trigger4_postgresql.sql
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - === Processing file 8/11: trigger5_postgresql.json ===
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger5_postgresql.json ===
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger5_postgresql.json
2025-09-02 13:52:28,405 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,406 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,406 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,406 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger5_postgresql.sql
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger5_postgresql.json ===
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - ✓ Created trigger5_postgresql.sql
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - === Processing file 9/11: trigger6_postgresql.json ===
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger trigger6_postgresql.json ===
2025-09-02 13:52:28,407 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\trigger6_postgresql.json
2025-09-02 13:52:28,408 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,408 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,408 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,408 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\trigger6_postgresql.sql
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger trigger6_postgresql.json ===
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - ✓ Created trigger6_postgresql.sql
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - === Processing file 10/11: yyy_postgresql.json ===
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\yyy_postgresql.json
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_postgresql.sql
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger yyy_postgresql.json ===
2025-09-02 13:52:28,409 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\yyy_postgresql.json
2025-09-02 13:52:28,410 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,411 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,411 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,411 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\yyy_postgresql.sql
2025-09-02 13:52:28,411 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\yyy_postgresql.sql
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger yyy_postgresql.json ===
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - ✓ Created yyy_postgresql.sql
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - === Processing file 11/11: zzz_postgresql.json ===
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Source path: files/format_plsql\zzz_postgresql.json
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_postgresql.sql
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - === Converting PostgreSQL format to SQL for trigger zzz_postgresql.json ===
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Reading PostgreSQL format file: files/format_plsql\zzz_postgresql.json
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Successfully loaded PostgreSQL format data with keys: ['on_insert', 'on_update', 'on_delete']
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Extracting SQL content...
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - SQL content extraction completed
2025-09-02 13:52:28,412 - root - DEBUG - [common.py:105] - Writing SQL to: files/format_plsql\zzz_postgresql.sql
2025-09-02 13:52:28,413 - root - DEBUG - [common.py:105] - Successfully wrote SQL to files/format_plsql\zzz_postgresql.sql
2025-09-02 13:52:28,413 - root - DEBUG - [common.py:105] - === PostgreSQL format to SQL conversion complete for trigger zzz_postgresql.json ===
2025-09-02 13:52:28,414 - root - DEBUG - [common.py:105] - ✓ Created zzz_postgresql.sql
2025-09-02 13:52:28,414 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-02 13:52:28,414 - root - INFO - [common.py:110] - Successfully processed: 11 files
2025-09-02 13:52:28,414 - root - INFO - [common.py:110] - === PostgreSQL format to SQL conversion complete ===
2025-09-02 13:52:28,414 - root - INFO - [common.py:110] - ✓ Final SQL generation complete! (Duration: 0.03 seconds)
2025-09-02 13:52:28,415 - root - DEBUG - [common.py:105] - Step 8 completed in 0.03 seconds
2025-09-02 13:52:28,415 - root - INFO - [common.py:110] - === Batch conversion finished successfully ===
2025-09-02 13:52:28,415 - root - INFO - [common.py:110] - Total execution time: 6.16 seconds
2025-09-02 13:52:28,415 - root - INFO - [common.py:110] - Performance breakdown by step:
2025-09-02 13:52:28,415 - root - INFO - [common.py:110] -   - Step 1 (SQL → JSON):              0.49 seconds (8.0%)
2025-09-02 13:52:28,416 - root - INFO - [common.py:110] -   - Step 2 (JSON → Oracle SQL):       0.66 seconds (10.8%)
2025-09-02 13:52:28,416 - root - INFO - [common.py:110] -   - Step 3 (JSON cleaning):           0.08 seconds (1.3%)
2025-09-02 13:52:28,416 - root - INFO - [common.py:110] -   - Step 5 (JSON → PL/JSON):          1.01 seconds (16.4%)
2025-09-02 13:52:28,417 - root - INFO - [common.py:110] -   - Step 6 (PL/JSON → PostgreSQL):    2.97 seconds (48.2%)
2025-09-02 13:52:28,417 - root - INFO - [common.py:110] -   - Step 7 (JSON → PostgreSQL SQL):   0.91 seconds (14.8%)
2025-09-02 13:52:28,417 - root - INFO - [common.py:110] -   - Step 8 (PostgreSQL JSON → SQL):   0.03 seconds (0.5%)
2025-09-02 13:52:28,417 - root - DEBUG - [common.py:105] - Main conversion workflow completed successfully
