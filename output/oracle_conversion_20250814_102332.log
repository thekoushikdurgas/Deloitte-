2025-08-14 10:23:32,423 - root - INFO - [common.py:73] - === Starting Oracle Trigger Conversion Process ===
2025-08-14 10:23:32,424 - root - INFO - [common.py:73] - Logging to: output\oracle_conversion_20250814_102332.log
2025-08-14 10:23:32,424 - root - INFO - [common.py:73] - Step 1: Converting Oracle SQL files to JSON analysis...
2025-08-14 10:23:32,424 - root - INFO - [common.py:73] - === Starting Oracle triggers to JSON conversion ===
2025-08-14 10:23:32,424 - root - INFO - [common.py:73] - === Starting file processing ===
2025-08-14 10:23:32,424 - root - INFO - [common.py:73] - Source directory: 'files/oracle'
2025-08-14 10:23:32,425 - root - INFO - [common.py:73] - Target directory: 'files/format_json'
2025-08-14 10:23:32,426 - root - INFO - [common.py:73] - File pattern: '.sql'
2025-08-14 10:23:32,426 - root - INFO - [common.py:73] - Output suffix: '_analysis.json'
2025-08-14 10:23:32,426 - root - DEBUG - [common.py:69] - Ensuring target directory exists...
2025-08-14 10:23:32,426 - root - DEBUG - [common.py:69] - Directory already exists: files/format_json
2025-08-14 10:23:32,427 - root - DEBUG - [common.py:69] - Found 6 files in source directory
2025-08-14 10:23:32,427 - root - DEBUG - [common.py:69] - Files matching pattern '.sql': ['trigger1.sql', 'trigger2.sql', 'trigger3.sql', 'trigger4.sql', 'trigger5.sql', 'trigger6.sql']
2025-08-14 10:23:32,427 - root - DEBUG - [common.py:69] - === Processing file 1/6: trigger1.sql ===
2025-08-14 10:23:32,427 - root - DEBUG - [common.py:69] - Extracted trigger number: 1
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger1.sql
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger1_analysis.json
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 1 ===
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger1.sql
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Successfully read 29058 characters from files/oracle\trigger1.sql
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,428 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 29058 characters of SQL
2025-08-14 10:23:32,428 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,429 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,429 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,429 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,430 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 750 total, 213 with semicolons, 69 empty lines skipped
2025-08-14 10:23:32,430 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 0 comments extracted, 750 lines cleaned
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 63 comments extracted, 697 lines cleaned
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 51
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-50
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 51
2025-08-14 10:23:32,431 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: INVALID_THEME_NO
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: DELETE_NO_MORE_POSSIBLE
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEME_NO_ONLY_INSERT
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: DESCRIPTION_TOO_LONG
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEME_DESC_PROPOSAL_TOO_LONG
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEME_DESC_ALT_TOO_LONG
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEME_NO_CANNOT_BE_INSERTED
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ONLYONEOFFICIALCHANGEPERDAY
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: INSERTSMUSTBEOFFICIAL
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEMEDESCRIPTIONMANDATORY
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: THEME_DESC_NOT_UNIQUE
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: IN_PREP_NOT_PORTF_PROJ
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: IN_PREP_NOT_CLOSED
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: INVALID_MOLECULE_ID
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: SEC_MOL_LIST_NOT_EMPTY
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ADMIN_UPDATE_ONLY
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: PORTF_PROJ_MOL_CRE_ERR
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: DEBUGGING
2025-08-14 10:23:32,432 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COUNTER
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_CODE
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_ODG_NO
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_RESGRP_CD
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_RESLIN_CD
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_STATUS_CD
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_DBA_CD
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_PORTF_PROJ_CD
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_DESCRIPTION
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_RESLIN_DESC
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_THEME_DESC_LENGTH
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_D_REGISTRAT_DATE
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_D_INS_DATE
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_FUTURE_REGISTRAT
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_VALID_TO
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_USERID
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_IS_ADMIN_CNT
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_SEC_MOL_CNT
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MOLECULE_ID
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MOLECULE_RG_NO
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MOLEC_IN_LIC_PRTNR
2025-08-14 10:23:32,433 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_NEW_RG_NO
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COMPARATOR_IND
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_THEME_DESC_PROPOSAL
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_SHORT_NAME
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:417] - Processed constant: C_MOLECULE_TYPE_ID
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:417] - Processed constant: C_PHARMACOLOGICAL_TYPE_ID
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_EVOLVED_NMP_CNT
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_TRADEMARK_NO
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MOLECULE_TYPE_ID
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_PHARMACOLOGICAL_TYPE_ID
2025-08-14 10:23:32,434 - root - DEBUG - [common.py:69] - Processing main section from lines 51
2025-08-14 10:23:32,434 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,434 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 647 lines from main section
2025-08-14 10:23:32,435 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 51 (indent 0)
2025-08-14 10:23:32,435 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 51 (indent 0)
2025-08-14 10:23:32,436 - root - DEBUG - [OracleTriggerAnalyzer.py:926] - Found EXCEPTION at line 782
2025-08-14 10:23:32,436 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 819
2025-08-14 10:23:32,436 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ADMIN_UPDATE_ONLY
2025-08-14 10:23:32,436 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20115', 'handler_string': "'MDM_V_THEMES_IOF'"}
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: IN_PREP_NOT_PORTF_PROJ
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20116', 'handler_string': "'MDM_V_THEMES_IOF'"}
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: IN_PREP_NOT_CLOSED
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20117', 'handler_string': "'MDM_V_THEMES_IOF'"}
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: INVALID_MOLECULE_ID
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20118', 'handler_string': "'This is not a valid Molecule ID'"}
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: SEC_MOL_LIST_NOT_EMPTY
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20119', 'handler_string': "'MDM_V_THEMES_IOF'"}
2025-08-14 10:23:32,437 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: INVALID_THEME_NO
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20101', 'handler_string': "'This is not a valid Theme No'"}
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: DELETE_NO_MORE_POSSIBLE
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted'"}
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEME_NO_ONLY_INSERT
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'Theme No cannot be updated'"}
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: DESCRIPTION_TOO_LONG
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': '\'The automatically generated Theme Description "\' || V_DESCRIPTION || \'" is too long\''}
2025-08-14 10:23:32,438 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEME_DESC_PROPOSAL_TOO_LONG
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': '\'The automatically generated Short Description Proposal "\' || :OLD.THEME_DESC_PROPOSAL || \'" is too long\''}
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEME_DESC_ALT_TOO_LONG
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': '\'The automatically generated Downstream Theme Description "\' || :OLD.THEME_DESC_ALT || \'" is too long\''}
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEME_NO_CANNOT_BE_INSERTED
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'This Theme No already exists'"}
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ONLYONEOFFICIALCHANGEPERDAY
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'Official Change for this Theme No and Day already exists'"}
2025-08-14 10:23:32,439 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: INSERTSMUSTBEOFFICIAL
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'New Themes can only be inserted by Official Changes'"}
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEMEDESCRIPTIONMANDATORY
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': '\'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\''}
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: THEME_DESC_NOT_UNIQUE
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20400', 'handler_string': "'This Theme Description already exists'"}
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: PORTF_PROJ_MOL_CRE_ERR
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20120', 'handler_string': "'MDM_V_THEMES_IOF'"}
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: DEBUGGING
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20900', 'handler_string': "'Debug in Themes IOF standard'"}
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:3664] - Parsed exception section: 18 handlers
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 608 statements, 18 exception handlers
2025-08-14 10:23:32,440 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 51 to 819
2025-08-14 10:23:32,441 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,441 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,441 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,441 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,441 - root - DEBUG - [OracleTriggerAnalyzer.py:2555] - Found CASE statement at line 241 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,441 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 210
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: with expression, Expression: 'LENGTH(:NEW.THEME_NO)', Indent: 6
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 252 (indent 6)
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 242 (indent 9, case indent 6)
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 246 (indent 9, case indent 6)
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 250 (indent 9, case indent 6)
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: 4
2025-08-14 10:23:32,442 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: 5
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 250, end at line 252
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:2567] - Parsed complete CASE statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:2555] - Found CASE statement at line 555 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 474
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 6
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 606 (indent 6)
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 556 (indent 9, case indent 6)
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 570 (indent 9, case indent 6)
2025-08-14 10:23:32,443 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 581 (indent 9, case indent 6)
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 592 (indent 12, case indent 6)
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 604 (indent 9, case indent 6)
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 3 when clauses, ELSE at line 604, end at line 606
2025-08-14 10:23:32,444 - root - DEBUG - [OracleTriggerAnalyzer.py:2567] - Parsed complete CASE statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,445 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,445 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 95 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 87
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.IN_PREP_IND = 'Y')', Indent: 3
2025-08-14 10:23:32,445 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 107 (indent 3)
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 107
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 96 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 88
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PORTF_PROJ_CD <> 'Y')', Indent: 6
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 98 (indent 6)
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 98
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 100 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 91
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)', Indent: 6
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 102 (indent 6)
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 102
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 104 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 94
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID IS NULL)', Indent: 6
2025-08-14 10:23:32,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 106 (indent 6)
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 106
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 111 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 98
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID IS NOT NULL)', Indent: 3
2025-08-14 10:23:32,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 140 (indent 3)
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 140
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 127 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 113
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_MOLECULE_RG_NO IS NULL)', Indent: 6
2025-08-14 10:23:32,449 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 139 (indent 6)
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 139
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 128 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 114
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COMPARATOR_IND = 'Y')', Indent: 9
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 138 (indent 9)
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 130 (indent 9)
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 5 statements
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 130, end at line 138
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,450 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 149 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 129
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.STATUS_DESC IS NOT NULL)', Indent: 3
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 158 (indent 3)
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 156 (indent 3)
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 156, end at line 158
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 160 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 139
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', Indent: 3
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 171 (indent 3)
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 169 (indent 3)
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,451 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 169, end at line 171
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 174 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 152
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.OFFICIAL_IND = 'N')', Indent: 3
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 178 (indent 3)
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 176 (indent 3)
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 176, end at line 178
2025-08-14 10:23:32,452 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 181 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 158
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', Indent: 3
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 183 (indent 3)
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 183
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 186 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 162
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING)', Indent: 3
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 624 (indent 3)
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1691] - Found ELSIF clause at line 406 (indent 3)
2025-08-14 10:23:32,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1691] - Found ELSIF clause at line 607 (indent 3)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2002] - Parsed ELSIF clause: (UPDATING)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2002] - Parsed ELSIF clause: (DELETING)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 210
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: with expression, Expression: 'LENGTH(:NEW.THEME_NO)', Indent: 6
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 252 (indent 6)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 242 (indent 9, case indent 6)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 246 (indent 9, case indent 6)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 250 (indent 9, case indent 6)
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: 4
2025-08-14 10:23:32,454 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: 5
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 250, end at line 252
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 474
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 6
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 606 (indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 556 (indent 9, case indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 570 (indent 9, case indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 581 (indent 9, case indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 592 (indent 12, case indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 604 (indent 9, case indent 6)
2025-08-14 10:23:32,455 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 3 when clauses, ELSE at line 604, end at line 606
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 2 else_if clauses, ELSE at line None, end at line 624
2025-08-14 10:23:32,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 187 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 163
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)', Indent: 6
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 189 (indent 6)
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 189
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 195 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 167
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)', Indent: 6
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 239 (indent 6)
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 239
2025-08-14 10:23:32,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 196 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 168
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', Indent: 9
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 238 (indent 9)
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 198 (indent 9)
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 37 statements
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 198, end at line 238
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 243 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 212
2025-08-14 10:23:32,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', Indent: 12
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 245 (indent 12)
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 245
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 247 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 216
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', Indent: 12
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 249 (indent 12)
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 249
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 274 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 240
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNTER > 0)', Indent: 6
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 276 (indent 6)
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 276
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 282 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 245
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.OFFICIAL_IND = 'N')', Indent: 6
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 284 (indent 6)
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 284
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 286 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 248
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')', Indent: 6
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 290 (indent 6)
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 290
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 287 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 249
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', Indent: 9
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 289 (indent 9)
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 289
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 294 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 253
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')', Indent: 6
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 319 (indent 6)
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 314 (indent 6)
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 2 statements
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 314, end at line 319
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 308 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 267
2025-08-14 10:23:32,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(LENGTH(V_DESCRIPTION) > 90)', Indent: 9
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 310 (indent 9)
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 310
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 328 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 283
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNTER > 0)', Indent: 6
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 330 (indent 6)
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 330
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 388 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 342
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', Indent: 6
2025-08-14 10:23:32,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 402 (indent 6)
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 402
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 409 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 356
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0', Indent: 6
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 411 (indent 6)
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 411
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 413 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 359
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.THEME_NO <> :OLD.THEME_NO)', Indent: 6
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 415 (indent 6)
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 415
2025-08-14 10:23:32,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 421 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 362
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.OFFICIAL_IND = 'N')', Indent: 6
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 428 (indent 6)
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 425 (indent 6)
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 425, end at line 428
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 430 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 367
2025-08-14 10:23:32,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD)', Indent: 6
2025-08-14 10:23:32,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 453 (indent 6)
2025-08-14 10:23:32,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 446 (indent 6)
2025-08-14 10:23:32,468 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 6 statements
2025-08-14 10:23:32,468 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 446, end at line 453
2025-08-14 10:23:32,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 447 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements
2025-08-14 10:23:32,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 384
2025-08-14 10:23:32,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', Indent: 9
2025-08-14 10:23:32,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 452 (indent 9)
2025-08-14 10:23:32,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 449 (indent 9)
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 2 statements
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 449, end at line 452
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements.else_statements
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 455 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 391
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(LENGTH(V_DESCRIPTION) > 90)', Indent: 6
2025-08-14 10:23:32,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 457 (indent 6)
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 457
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 470 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 402
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNTER > 0)', Indent: 6
2025-08-14 10:23:32,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 472 (indent 6)
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 472
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 477 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 406
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.OFFICIAL_IND = 'N')', Indent: 6
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 550 (indent 6)
2025-08-14 10:23:32,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 504 (indent 6)
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 39 statements
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 504, end at line 550
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 518 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 442
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNTER > 0)', Indent: 9
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 520 (indent 9)
2025-08-14 10:23:32,473 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 520
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements.else_statements
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 590 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 505
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_SEC_MOL_CNT > 0)', Indent: 12
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 603 (indent 12)
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 592 (indent 12)
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 8 statements
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 592, end at line 603
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements.then_statements
2025-08-14 10:23:32,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 608 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 521
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0)', Indent: 6
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 610 (indent 6)
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 610
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 616 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 524
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE))', Indent: 6
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 623 (indent 6)
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 621 (indent 6)
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,475 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 621, end at line 623
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 243 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 212
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', Indent: 12
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 245 (indent 12)
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 245
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 247 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,477 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 216
2025-08-14 10:23:32,477 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', Indent: 12
2025-08-14 10:23:32,477 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 249 (indent 12)
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 249
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 590 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 505
2025-08-14 10:23:32,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_SEC_MOL_CNT > 0)', Indent: 12
2025-08-14 10:23:32,479 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 603 (indent 12)
2025-08-14 10:23:32,479 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 592 (indent 12)
2025-08-14 10:23:32,479 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 8 statements
2025-08-14 10:23:32,479 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,479 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 592, end at line 603
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 628 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 533
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING OR UPDATING)', Indent: 3
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 709 (indent 3)
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 709
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 629 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 534
2025-08-14 10:23:32,480 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', Indent: 6
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 683 (indent 6)
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 653 (indent 6)
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 25 statements
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 653, end at line 683
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 643 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 542
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_EVOLVED_NMP_CNT = 0)', Indent: 9
2025-08-14 10:23:32,481 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 652 (indent 9)
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 652
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 654 in main_section_lines.begin_end_statements.then_statements.else_statements
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 553
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', Indent: 9
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 682 (indent 9)
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 661 (indent 9)
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 16 statements
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 661, end at line 682
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.else_statements
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 662 in main_section_lines.begin_end_statements.then_statements.else_statements.else_statements
2025-08-14 10:23:32,482 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 561
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', Indent: 12
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 681 (indent 12)
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 681
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.else_statements.else_statements
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 687 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 579
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))', Indent: 6
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 708 (indent 6)
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 708
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 697 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 587
2025-08-14 10:23:32,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_EVOLVED_NMP_CNT > 0)', Indent: 9
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 707 (indent 9)
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 707
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 713 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 598
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')', Indent: 3
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 761 (indent 3)
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 761
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 714 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 599
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_ID IS NOT NULL)', Indent: 6
2025-08-14 10:23:32,484 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 723 (indent 6)
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 723
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 727 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 609
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', Indent: 6
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 760 (indent 6)
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 760
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 728 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 610
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID IS NOT NULL)', Indent: 9
2025-08-14 10:23:32,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 743 (indent 9)
2025-08-14 10:23:32,486 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,486 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 743
2025-08-14 10:23:32,486 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,486 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,486 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,486 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2699] - Found nested BEGIN block at line 112 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2824] - Parsing BEGIN-END block starting at line 112
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2880] - Found EXCEPTION section at line 122
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2891] - Parsed exception handler: NO_DATA_FOUND
2025-08-14 10:23:32,487 - root - DEBUG - [OracleTriggerAnalyzer.py:2871] - Ended main BEGIN block at line 125
2025-08-14 10:23:32,488 - root - DEBUG - [OracleTriggerAnalyzer.py:2712] - Parsed complete nested BEGIN block structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,488 - root - DEBUG - [OracleTriggerAnalyzer.py:2699] - Found nested BEGIN block at line 729 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2824] - Parsing BEGIN-END block starting at line 729
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2880] - Found EXCEPTION section at line 739
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2891] - Parsed exception handler: NO_DATA_FOUND
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2871] - Ended main BEGIN block at line 742
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2712] - Parsed complete nested BEGIN block structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2699] - Found nested BEGIN block at line 763 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2824] - Parsing BEGIN-END block starting at line 763
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2871] - Ended main BEGIN block at line 781
2025-08-14 10:23:32,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2712] - Parsed complete nested BEGIN block structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,490 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,490 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,490 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,490 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,490 - root - DEBUG - [OracleTriggerAnalyzer.py:1150] - Found FOR loop at line 767 in main_section_lines.begin_end_statements.begin_end_statements
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:1274] - Parsing FOR loop structure starting at line 767: FOR I1 IN (
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:1352] - Found END LOOP at line 780
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:1381] - Successfully parsed FOR loop: I1 IN (SELECT A.THEME_NO, A.REGISTRAT)
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:1162] - Parsed complete FOR loop structure in main_section_lines.begin_end_statements.begin_end_statements
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,491 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,491 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 145 in main_section_lines.begin_end_statements: V_ODG_NO := SUBSTR(:NEW.RESLIN
2025-08-14 10:23:32,491 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_ODG_NO
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 146 in main_section_lines.begin_end_statements: V_RESGRP_CD := SUBSTR(:NEW.RES
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_RESGRP_CD
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 147 in main_section_lines.begin_end_statements: V_RESLIN_CD := SUBSTR(:NEW.RES
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_RESLIN_CD
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 148 in main_section_lines.begin_end_statements: V_RESLIN_DESC := SUBSTR(:NEW.R
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_RESLIN_DESC
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 157 in main_section_lines.begin_end_statements.else_statements: V_STATUS_CD := NULL;
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_STATUS_CD
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 170 in main_section_lines.begin_end_statements.else_statements: V_DBA_CD := NULL;
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_DBA_CD
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 173 in main_section_lines.begin_end_statements: V_MOLEC_IN_LIC_PRTNR := GMD_UT
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_MOLEC_IN_LIC_PRTNR
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 175 in main_section_lines.begin_end_statements.then_statements: V_TRADEMARK_NO := :NEW.TRADEMA
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_TRADEMARK_NO
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 177 in main_section_lines.begin_end_statements.else_statements: V_TRADEMARK_NO := :OLD.TRADEMA
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_TRADEMARK_NO
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 180 in main_section_lines.begin_end_statements: V_THEME_DESC_PROPOSAL := GMD_U
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_THEME_DESC_PROPOSAL
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 185 in main_section_lines.begin_end_statements: V_SHORT_NAME := COALESCE(:NEW.
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_SHORT_NAME
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 194 in main_section_lines.begin_end_statements.then_statements: V_MOLECULE_ID := :NEW.MOLECULE
2025-08-14 10:23:32,492 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_MOLECULE_ID
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 254 in main_section_lines.begin_end_statements.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 278 in main_section_lines.begin_end_statements.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 279 in main_section_lines.begin_end_statements.then_statements: V_D_REGISTRAT_DATE := SYSDATE;
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_D_REGISTRAT_DATE
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 295 in main_section_lines.begin_end_statements.then_statements.then_statements: V_DESCRIPTION := GMD.GMD_UTIL_
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2243] - Parsed multi-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 312 in main_section_lines.begin_end_statements.then_statements.then_statements: V_DESCRIPTION := TRIM(V_DESCRI
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 313 in main_section_lines.begin_end_statements.then_statements.then_statements: V_PORTF_PROJ_CD := 'Y';
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_PORTF_PROJ_CD
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 317 in main_section_lines.begin_end_statements.then_statements.else_statements: V_DESCRIPTION := :NEW.THEME_DE
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 318 in main_section_lines.begin_end_statements.then_statements.else_statements: V_PORTF_PROJ_CD := 'N';
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_PORTF_PROJ_CD
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 321 in main_section_lines.begin_end_statements.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 332 in main_section_lines.begin_end_statements.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,493 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 333 in main_section_lines.begin_end_statements.then_statements: V_VALID_TO := TO_DATE('09.09.9
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_VALID_TO
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 334 in main_section_lines.begin_end_statements.then_statements: V_SHORT_NAME := NVL(:NEW.MANUA
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_SHORT_NAME
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 424 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: V_D_REGISTRAT_DATE := TO_DATE(
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_D_REGISTRAT_DATE
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 427 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: V_D_REGISTRAT_DATE := SYSDATE;
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_D_REGISTRAT_DATE
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 431 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: V_DESCRIPTION := GMD.GMD_UTIL_
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2243] - Parsed multi-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 444 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: V_DESCRIPTION := TRIM(V_DESCRI
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 445 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: V_PORTF_PROJ_CD := 'Y';
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_PORTF_PROJ_CD
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 450 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements.else_statements: V_DESCRIPTION := :NEW.THEME_DE
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_DESCRIPTION
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 451 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements.else_statements: V_PORTF_PROJ_CD := :NEW.PORTF_
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_PORTF_PROJ_CD
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 462 in main_section_lines.begin_end_statements.else_if.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,494 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 474 in main_section_lines.begin_end_statements.else_if.then_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 508 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 522 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: V_COUNTER := NULL;
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_COUNTER
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,495 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,495 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 54 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,495 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 61 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 70 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 97 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE IN_PREP_NOT_PO
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 101 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE IN_PREP_NOT_CL
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 113 in main_section_lines.begin_end_statements.then_statements.begin_end_statements: SELECT
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 124 in main_section_lines.begin_end_statements.then_statements.exception_statements: RAISE INVALID_MOLECU
2025-08-14 10:23:32,496 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,497 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 133 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: UPDATE V_THEME_MOLEC
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 150 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 161 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 182 in main_section_lines.begin_end_statements.then_statements: RAISE THEME_DESC_PRO
2025-08-14 10:23:32,498 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 188 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE ADMIN_UPDATE_O
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 197 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE PORTF_PROJ_MOL
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 199 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: INSERT INTO MDM_V_TH
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 214 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: SELECT
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 227 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 244 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 248 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 251 in main_section_lines.begin_end_statements.then_statements.else_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 257 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 275 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE THEME_NO_CANNO
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 283 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE INSERTSMUSTBEO
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 288 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE THEMEDESCRIPTI
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 309 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE DESCRIPTION_TO
2025-08-14 10:23:32,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 322 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 329 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE THEME_DESC_NOT
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 335 in main_section_lines.begin_end_statements.then_statements: INSERT INTO GMD.THEM
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 391 in main_section_lines.begin_end_statements.then_statements.then_statements: INSERT INTO MDM_V_TH
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 410 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: RAISE ADMIN_UPDATE_O
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 414 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: RAISE THEME_NO_ONLY_
2025-08-14 10:23:32,501 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 448 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements.then_statements: RAISE THEMEDESCRIPTI
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 456 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: RAISE DESCRIPTION_TO
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 463 in main_section_lines.begin_end_statements.else_if.then_statements: SELECT
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 471 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: RAISE THEME_DESC_NOT
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 478 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: UPDATE GMD.THEMES
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 511 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: SELECT
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 519 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements.then_statements: RAISE ONLYONEOFFICIA
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 523 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: UPDATE GMD.THEMES
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 559 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: INSERT INTO MDM_V_TH
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,502 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 573 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: UPDATE MDM_V_THEME_M
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 582 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: SELECT
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 591 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements.then_statements: RAISE SEC_MOL_LIST_N
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 595 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements.else_statements: UPDATE MDM_V_THEME_M
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 609 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: RAISE ADMIN_UPDATE_O
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 617 in main_section_lines.begin_end_statements.else_if.then_statements.then_statements: DELETE FROM GMD.THEM
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: delete_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 622 in main_section_lines.begin_end_statements.else_if.then_statements.else_statements: RAISE DELETE_NO_MORE
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 244 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 248 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 251 in main_section_lines.begin_end_statements.else_statements: RAISE INVALID_THEME_
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 559 in main_section_lines.begin_end_statements.then_statements: INSERT INTO MDM_V_TH
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 573 in main_section_lines.begin_end_statements.then_statements: UPDATE MDM_V_THEME_M
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 582 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 591 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE SEC_MOL_LIST_N
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 595 in main_section_lines.begin_end_statements.then_statements.else_statements: UPDATE MDM_V_THEME_M
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 632 in main_section_lines.begin_end_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 644 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE MDM_V_NEW_MED
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 655 in main_section_lines.begin_end_statements.then_statements.else_statements.then_statements: UPDATE MDM_V_NEW_MED
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 665 in main_section_lines.begin_end_statements.then_statements.else_statements.else_statements.then_statements: UPDATE MDM_V_NEW_MED
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 673 in main_section_lines.begin_end_statements.then_statements.else_statements.else_statements.then_statements: UPDATE MDM_V_NEW_MED
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 690 in main_section_lines.begin_end_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 700 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE MDM_V_NEW_MED
2025-08-14 10:23:32,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 715 in main_section_lines.begin_end_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 730 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.begin_end_statements: SELECT
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 741 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.exception_statements: RAISE INVALID_MOLECU
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 745 in main_section_lines.begin_end_statements.then_statements.then_statements: INSERT INTO MDM_V_NE
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 776 in main_section_lines.begin_end_statements.begin_end_statements.loop_statements: DELETE FROM GMD.THEM
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: delete_statement
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,505 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,505 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,505 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: TXO_UTIL.SET_WARNING('No Molec
2025-08-14 10:23:32,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,506 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=241, end_case_line_no=252
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3895] - Adding new case_when structure: lines 241-252
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=555, end_case_line_no=606
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3895] - Adding new case_when structure: lines 555-606
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=241, end_case_line_no=252
2025-08-14 10:23:32,508 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 241-252
2025-08-14 10:23:32,509 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=555, end_case_line_no=606
2025-08-14 10:23:32,509 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 555-606
2025-08-14 10:23:32,509 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,509 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,509 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,509 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,510 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,511 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.082s
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,511 - root - INFO - [common.py:73] - JSON conversion complete: 29 vars, 2 consts, 18 excs, 63 comments
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,511 - root - DEBUG - [common.py:69] - Analysis statistics: 29 vars, 2 consts, 18 excs, 63 comments
2025-08-14 10:23:32,512 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger1_analysis.json
2025-08-14 10:23:32,517 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger1_analysis.json
2025-08-14 10:23:32,517 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 1 ===
2025-08-14 10:23:32,518 - root - INFO - [common.py:73] - ✓ Created trigger1_analysis.json
2025-08-14 10:23:32,518 - root - DEBUG - [common.py:69] - === Processing file 2/6: trigger2.sql ===
2025-08-14 10:23:32,518 - root - DEBUG - [common.py:69] - Extracted trigger number: 2
2025-08-14 10:23:32,518 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger2.sql
2025-08-14 10:23:32,518 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger2_analysis.json
2025-08-14 10:23:32,519 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 2 ===
2025-08-14 10:23:32,519 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger2.sql
2025-08-14 10:23:32,520 - root - DEBUG - [common.py:69] - Successfully read 18805 characters from files/oracle\trigger2.sql
2025-08-14 10:23:32,520 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,520 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 18805 characters of SQL
2025-08-14 10:23:32,520 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,521 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,521 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,521 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,522 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 422 total, 89 with semicolons, 43 empty lines skipped
2025-08-14 10:23:32,522 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,525 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 6 comments extracted, 364 lines cleaned
2025-08-14 10:23:32,525 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,525 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 67 comments extracted, 315 lines cleaned
2025-08-14 10:23:32,525 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,526 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,526 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 18
2025-08-14 10:23:32,526 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-17
2025-08-14 10:23:32,526 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 18
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_MAP_EXISTS
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_MOLEC_ID_MISSING
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_NO_PORTF_MOLECULE_LEFT
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_UPD_INV_MAP
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_INS_INV_MAP
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_INV_MOL_SEQUENCE
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: UPDATE_UPD
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COUNT_T_MAPPINGS
2025-08-14 10:23:32,527 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COUNT_T_MOL_MAP
2025-08-14 10:23:32,528 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MOLECULE_SEQ_NO
2025-08-14 10:23:32,528 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_SEQ_NO_DUPLICATE_CNT
2025-08-14 10:23:32,528 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: INVALID_MAPPING_EXISTS
2025-08-14 10:23:32,528 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_MANUAL_SHORT_DESC
2025-08-14 10:23:32,528 - root - DEBUG - [common.py:69] - Processing main section from lines 18
2025-08-14 10:23:32,528 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,529 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,529 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 301 lines from main section
2025-08-14 10:23:32,529 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 18 (indent 0)
2025-08-14 10:23:32,530 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 18 (indent 0)
2025-08-14 10:23:32,530 - root - DEBUG - [OracleTriggerAnalyzer.py:926] - Found EXCEPTION at line 439
2025-08-14 10:23:32,530 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 465
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_MAP_EXISTS
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20110', 'handler_string': "'MDM_THEME_MOLECULE_MAP_IOF'"}
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_MOLEC_ID_MISSING
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20111', 'handler_string': "'MDM_THEME_MOLECULE_MAP_IOF'"}
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_UPD_INV_MAP
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20112', 'handler_string': "'MDM_THEME_MOLECULE_MAP_IOF'"}
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_INS_INV_MAP
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20113', 'handler_string': "'MDM_THEME_MOLECULE_MAP_IOF'"}
2025-08-14 10:23:32,531 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_INV_MOL_SEQUENCE
2025-08-14 10:23:32,532 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20120', 'handler_string': "'MDM_THEME_MOLECULE_MAP_IOF'"}
2025-08-14 10:23:32,532 - root - DEBUG - [OracleTriggerAnalyzer.py:3664] - Parsed exception section: 5 handlers
2025-08-14 10:23:32,532 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 288 statements, 5 exception handlers
2025-08-14 10:23:32,532 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 18 to 465
2025-08-14 10:23:32,532 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,532 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,532 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2555] - Found CASE statement at line 125 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 83
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 200 (indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 126 (indent 16, case indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 137 (indent 20, case indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 156 (indent 16, case indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 177 (indent 20, case indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 196 (indent 16, case indent 12)
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,533 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 196, end at line 200
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:2567] - Parsed complete CASE statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,534 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,534 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 27 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,534 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 21
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(DELETING)', Indent: 4
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 58 (indent 4)
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 58
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 60 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 42
2025-08-14 10:23:32,535 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING OR UPDATING)', Indent: 4
2025-08-14 10:23:32,536 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 401 (indent 4)
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 83
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 200 (indent 12)
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 126 (indent 16, case indent 12)
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 137 (indent 20, case indent 12)
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 156 (indent 16, case indent 12)
2025-08-14 10:23:32,537 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 177 (indent 20, case indent 12)
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 196 (indent 16, case indent 12)
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,538 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 196, end at line 200
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 401
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 68 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 50
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID IS NULL)', Indent: 8
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 87 (indent 8)
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 87
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 89 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 53
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(UPDATING)', Indent: 8
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 93 (indent 8)
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 93
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 90 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 54
2025-08-14 10:23:32,540 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', Indent: 12
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 92 (indent 12)
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 92
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 98 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 58
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))', Indent: 8
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 122 (indent 8)
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 122
2025-08-14 10:23:32,541 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 107 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 67
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNT_T_MOL_MAP > 0)', Indent: 12
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 109 (indent 12)
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 109
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 119 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,542 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 78
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COUNT_T_MOL_MAP > 0)', Indent: 12
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 121 (indent 12)
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 121
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,543 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 124 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,544 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 82
2025-08-14 10:23:32,544 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING)', Indent: 8
2025-08-14 10:23:32,544 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 201 (indent 8)
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 83
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 200 (indent 12)
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 126 (indent 16, case indent 12)
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 137 (indent 20, case indent 12)
2025-08-14 10:23:32,545 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 156 (indent 16, case indent 12)
2025-08-14 10:23:32,546 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 177 (indent 20, case indent 12)
2025-08-14 10:23:32,546 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 196 (indent 16, case indent 12)
2025-08-14 10:23:32,546 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 196, end at line 200
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 201
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 127 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 85
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 152 (indent 20)
2025-08-14 10:23:32,547 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 137 (indent 20)
2025-08-14 10:23:32,548 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,548 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,548 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 137, end at line 152
2025-08-14 10:23:32,548 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 167 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 116
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 192 (indent 20)
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 177 (indent 20)
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 177, end at line 192
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 127 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 85
2025-08-14 10:23:32,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 152 (indent 20)
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 137 (indent 20)
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 137, end at line 152
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 167 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 116
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 192 (indent 20)
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 177 (indent 20)
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,550 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 177, end at line 192
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 202 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 143
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(UPDATING)', Indent: 8
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 393 (indent 8)
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 393
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 203 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 144
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID IS NOT NULL)', Indent: 12
2025-08-14 10:23:32,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 289 (indent 12)
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 289
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 204 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 145
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', Indent: 16
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 211 (indent 16)
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 211
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 213 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 153
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', Indent: 16
2025-08-14 10:23:32,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 285 (indent 16)
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 285
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 228 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 160
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', Indent: 20
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 250 (indent 20)
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 239 (indent 20)
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 8 statements
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 239, end at line 250
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 254 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 179
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 280 (indent 20)
2025-08-14 10:23:32,553 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 265 (indent 20)
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 265, end at line 280
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 291 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 205
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', Indent: 12
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 351 (indent 12)
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 351
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 320 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 220
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 16
2025-08-14 10:23:32,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 346 (indent 16)
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 331 (indent 16)
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 331, end at line 346
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 352 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 245
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', Indent: 12
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 392 (indent 12)
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 392
2025-08-14 10:23:32,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 363 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 253
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 16
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 387 (indent 16)
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 374 (indent 16)
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 11 statements
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,556 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 374, end at line 387
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 127 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 85
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 152 (indent 20)
2025-08-14 10:23:32,557 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 137 (indent 20)
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 137, end at line 152
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 167 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 116
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INVALID_MAPPING_EXISTS)', Indent: 20
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 192 (indent 20)
2025-08-14 10:23:32,558 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 177 (indent 20)
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 13 statements
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 177, end at line 192
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 419 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 300
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)', Indent: 4
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 421 (indent 4)
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 421
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,559 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,559 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,560 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,560 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,560 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,560 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,561 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,561 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,561 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,561 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,562 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,562 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,562 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 120 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: INVALID_MAPPING_EXISTS := TRUE
2025-08-14 10:23:32,562 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: INVALID_MAPPING_EXISTS
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,563 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,563 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 21 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 33 in main_section_lines.begin_end_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 41 in main_section_lines.begin_end_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,563 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 61 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 69 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE ERR_MOLEC_ID_M
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 91 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE ERR_UPD_INV_MA
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 99 in main_section_lines.begin_end_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 108 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE ERR_MAP_EXISTS
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 111 in main_section_lines.begin_end_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 130 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 139 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 158 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 170 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,564 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 179 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 199 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: RAISE ERR_INS_INV_MA
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 130 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 139 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 158 in main_section_lines.begin_end_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 170 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 179 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 199 in main_section_lines.begin_end_statements.then_statements.else_statements: RAISE ERR_INS_INV_MA
2025-08-14 10:23:32,565 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 205 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 222 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 231 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 242 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements.else_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 257 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 267 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,566 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 302 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 310 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 323 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 333 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,567 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 355 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 366 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 376 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 130 in main_section_lines.begin_end_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 139 in main_section_lines.begin_end_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,568 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 158 in main_section_lines.begin_end_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 170 in main_section_lines.begin_end_statements.then_statements.then_statements: UPDATE THEME_MOLECUL
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 179 in main_section_lines.begin_end_statements.then_statements.else_statements: INSERT INTO THEME_MO
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 199 in main_section_lines.begin_end_statements.else_statements: RAISE ERR_INS_INV_MA
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 403 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,569 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 420 in main_section_lines.begin_end_statements.then_statements: RAISE ERR_INV_MOL_SE
2025-08-14 10:23:32,570 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,570 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,570 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,570 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,570 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 52 in main_section_lines.begin_end_statements.then_statements: MDMAPPL.MDM_UTIL_THEMES.REFRES
2025-08-14 10:23:32,570 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDMAPPL.MDM_UTIL_THEMES.REFRES
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 395 in main_section_lines.begin_end_statements.then_statements: MDMAPPL.MDM_UTIL_THEMES.REFRES
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDMAPPL.MDM_UTIL_THEMES.REFRES
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,571 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=125, end_case_line_no=200
2025-08-14 10:23:32,571 - root - DEBUG - [OracleTriggerAnalyzer.py:3895] - Adding new case_when structure: lines 125-200
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=125, end_case_line_no=200
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 125-200
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=125, end_case_line_no=200
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 125-200
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,572 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,572 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,572 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,573 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,573 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.052s
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,573 - root - INFO - [common.py:73] - JSON conversion complete: 6 vars, 0 consts, 7 excs, 73 comments
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - Analysis statistics: 6 vars, 0 consts, 7 excs, 73 comments
2025-08-14 10:23:32,573 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger2_analysis.json
2025-08-14 10:23:32,575 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger2_analysis.json
2025-08-14 10:23:32,575 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 2 ===
2025-08-14 10:23:32,575 - root - INFO - [common.py:73] - ✓ Created trigger2_analysis.json
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - === Processing file 3/6: trigger3.sql ===
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Extracted trigger number: 3
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger3.sql
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger3_analysis.json
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 3 ===
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger3.sql
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Successfully read 12985 characters from files/oracle\trigger3.sql
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,576 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 12985 characters of SQL
2025-08-14 10:23:32,577 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,577 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,577 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,577 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,578 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 244 total, 58 with semicolons, 21 empty lines skipped
2025-08-14 10:23:32,578 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,578 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 0 comments extracted, 244 lines cleaned
2025-08-14 10:23:32,578 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,578 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 17 comments extracted, 227 lines cleaned
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 14
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-13
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 14
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_TRIGGER_NAME
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: CNTR
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_UPD
2025-08-14 10:23:32,579 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_INS
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_CTRY_CHG
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_NOT_ALLOWED_TO_INVALIDATE
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_USERID
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: TEST_ERR
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COUNTRY_CD
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_COMPANY_TYPE_CD
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: ERR_INS_LEGAL_ADDR
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_VALID_FROM
2025-08-14 10:23:32,580 - root - DEBUG - [common.py:69] - Processing main section from lines 14
2025-08-14 10:23:32,580 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,580 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 214 lines from main section
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 14 (indent 0)
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 14 (indent 0)
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:926] - Found EXCEPTION at line 252
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 265
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_UPD
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20111', 'handler_string': "'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD"}
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_INS
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20112', 'handler_string': "'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.'"}
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_CTRY_CHG
2025-08-14 10:23:32,581 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20113', 'handler_string': "'The company country modified but not the Valid From Date. Please update also the Valid From Date.'"}
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: TEST_ERR
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20113', 'handler_string': "'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR"}
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_INS_LEGAL_ADDR
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20113', 'handler_string': "'The legal address cannot be inserted for this type of company'"}
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: ERR_NOT_ALLOWED_TO_INVALIDATE
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20113', 'handler_string': "'It is not allowed to invalidate/delete this type of address'"}
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:3664] - Parsed exception section: 6 handlers
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 199 statements, 6 exception handlers
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 14 to 265
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,582 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,582 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,582 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,583 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,583 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 30 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 28
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING)', Indent: 4
2025-08-14 10:23:32,583 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 34 (indent 4)
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 34
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 31 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 29
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(CNTR > 0)', Indent: 8
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 33 (indent 8)
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 33
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 36 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 33
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING OR UPDATING)', Indent: 4
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 243 (indent 4)
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 243
2025-08-14 10:23:32,584 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 43 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 40
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))', Indent: 8
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 45 (indent 8)
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 45
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 47 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 43
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))', Indent: 8
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 196 (indent 8)
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 196
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 48 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,585 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 44
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', Indent: 12
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 50 (indent 12)
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 50
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 52 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 47
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(CNTR = 0)', Indent: 12
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 195 (indent 12)
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 73 (indent 12)
2025-08-14 10:23:32,586 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 96 statements
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 73, end at line 195
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 76 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 67
2025-08-14 10:23:32,587 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', Indent: 16
2025-08-14 10:23:32,588 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 194 (indent 16)
2025-08-14 10:23:32,588 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 173 (indent 16)
2025-08-14 10:23:32,588 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 18 statements
2025-08-14 10:23:32,588 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,588 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 173, end at line 194
2025-08-14 10:23:32,589 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements
2025-08-14 10:23:32,589 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 114 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements
2025-08-14 10:23:32,589 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 96
2025-08-14 10:23:32,589 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)', Indent: 20
2025-08-14 10:23:32,589 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 172 (indent 20)
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 172
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 126 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 103
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')', Indent: 24
2025-08-14 10:23:32,590 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 134 (indent 24)
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 130 (indent 24)
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 130, end at line 134
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 148 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 118
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(V_COMPANY_TYPE_CD = 'L')', Indent: 24
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 171 (indent 24)
2025-08-14 10:23:32,591 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 171
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 198 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 165
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))', Indent: 8
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 242 (indent 8)
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 242
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 199 in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 166
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(CNTR = 0)', Indent: 12
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 241 (indent 12)
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1700] - Found ELSE clause at line 220 (indent 12)
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:2042] - Parsed ELSE clause with 18 statements
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,592 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line 220, end at line 241
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements.then_statements
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 245 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 207
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(DELETING)', Indent: 4
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 251 (indent 4)
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 251
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 246 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 208
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))', Indent: 8
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 248 (indent 8)
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 248
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,593 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,593 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,594 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2699] - Found nested BEGIN block at line 15 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2824] - Parsing BEGIN-END block starting at line 15
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2880] - Found EXCEPTION section at line 17
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2891] - Parsed exception handler: OTHERS
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2871] - Ended main BEGIN block at line 20
2025-08-14 10:23:32,594 - root - DEBUG - [OracleTriggerAnalyzer.py:2712] - Parsed complete nested BEGIN block structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,595 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,595 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,595 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,595 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,595 - root - DEBUG - [OracleTriggerAnalyzer.py:1150] - Found FOR loop at line 149 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,595 - root - DEBUG - [OracleTriggerAnalyzer.py:1274] - Parsing FOR loop structure starting at line 149: FOR V_REC IN (
2025-08-14 10:23:32,596 - root - DEBUG - [OracleTriggerAnalyzer.py:1352] - Found END LOOP at line 170
2025-08-14 10:23:32,596 - root - DEBUG - [OracleTriggerAnalyzer.py:1381] - Successfully parsed FOR loop: V_REC IN (SELECT COMPANY_CD FROM CFG_V_C)
2025-08-14 10:23:32,596 - root - DEBUG - [OracleTriggerAnalyzer.py:1162] - Parsed complete FOR loop structure in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements.then_statements
2025-08-14 10:23:32,596 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,596 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,596 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 16 in main_section_lines.begin_end_statements.begin_end_statements: V_USERID := TXO_UTIL.GET_USERI
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_USERID
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 19 in main_section_lines.begin_end_statements.exception_statements: V_USERID := USER;
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_USERID
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 22 in main_section_lines.begin_end_statements: CNTR := 0;
2025-08-14 10:23:32,597 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: CNTR
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 102 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements: CNTR := 0;
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: CNTR
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 129 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements.then_statements: V_VALID_FROM := TO_DATE(ADD_MO
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_VALID_FROM
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 133 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements.else_statements: V_VALID_FROM := TO_DATE(ADD_MO
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_VALID_FROM
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,598 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,598 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,598 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 23 in main_section_lines.begin_end_statements: SELECT
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 32 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE ERR_INS;
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 37 in main_section_lines.begin_end_statements.then_statements: SELECT
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 44 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE ERR_INS_LEGAL_
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 49 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: RAISE ERR_CTRY_CHG;
2025-08-14 10:23:32,599 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 105 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements: SELECT
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 118 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements: SELECT
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: select_statement
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 247 in main_section_lines.begin_end_statements.then_statements.then_statements: RAISE ERR_NOT_ALLOWE
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,600 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,601 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,601 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 55 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 82 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 136 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements: MDM_UTIL_COMPANIES.MODIFYCOMPA
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_COMPANIES.MODIFYCOMPA
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 160 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.then_statements.then_statements.then_statements.loop_statements: MDM_UTIL_COMPANIES.MODIFYCOMPA
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_COMPANIES.MODIFYCOMPA
2025-08-14 10:23:32,601 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 176 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements.else_statements: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 202 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 223 in main_section_lines.begin_end_statements.then_statements.then_statements.else_statements: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: MDM_UTIL_ADDRESSES.MODIFY_COMP
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,602 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,602 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,602 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,602 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,603 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,603 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.027s
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,603 - root - INFO - [common.py:73] - JSON conversion complete: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - Analysis statistics: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-14 10:23:32,603 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger3_analysis.json
2025-08-14 10:23:32,606 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger3_analysis.json
2025-08-14 10:23:32,606 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 3 ===
2025-08-14 10:23:32,606 - root - INFO - [common.py:73] - ✓ Created trigger3_analysis.json
2025-08-14 10:23:32,606 - root - DEBUG - [common.py:69] - === Processing file 4/6: trigger4.sql ===
2025-08-14 10:23:32,606 - root - DEBUG - [common.py:69] - Extracted trigger number: 4
2025-08-14 10:23:32,607 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger4.sql
2025-08-14 10:23:32,607 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger4_analysis.json
2025-08-14 10:23:32,607 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 4 ===
2025-08-14 10:23:32,607 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger4.sql
2025-08-14 10:23:32,608 - root - DEBUG - [common.py:69] - Successfully read 4077 characters from files/oracle\trigger4.sql
2025-08-14 10:23:32,608 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,608 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 4077 characters of SQL
2025-08-14 10:23:32,608 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,608 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,608 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,609 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,609 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 22 total, 16 with semicolons, 1 empty lines skipped
2025-08-14 10:23:32,609 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,609 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 0 comments extracted, 22 lines cleaned
2025-08-14 10:23:32,609 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 0 comments extracted, 22 lines cleaned
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 9
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-8
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 9
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_ACTION
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: COL_NAMES
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: COL_NEW_VALUES
2025-08-14 10:23:32,610 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: COL_OLD_VALUES
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_TABLE_NAME
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_SCHEMA_NAME
2025-08-14 10:23:32,611 - root - DEBUG - [common.py:69] - Processing main section from lines 9
2025-08-14 10:23:32,611 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 14 lines from main section
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 9 (indent 0)
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 9 (indent 0)
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 23
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 12 statements, 0 exception handlers
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 9 to 23
2025-08-14 10:23:32,611 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,611 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,612 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,612 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,612 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,612 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,612 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,612 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,612 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 10 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 9
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: 'TG_OP = 'INSERT'', Indent: 4
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 16 (indent 4)
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1691] - Found ELSIF clause at line 12 (indent 4)
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1691] - Found ELSIF clause at line 14 (indent 4)
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:2002] - Parsed ELSIF clause: TG_OP = 'UPDATE'
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:2002] - Parsed ELSIF clause: TG_OP = 'DELETE'
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 2 else_if clauses, ELSE at line None, end at line 16
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,613 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,613 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,613 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,614 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,614 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,614 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,614 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,614 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,614 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,614 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,614 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 11 in main_section_lines.begin_end_statements.then_statements: V_ACTION := 'I';
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_ACTION
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 13 in main_section_lines.begin_end_statements.else_if.then_statements: V_ACTION := 'U';
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_ACTION
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 15 in main_section_lines.begin_end_statements.else_if.then_statements: V_ACTION := 'D';
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_ACTION
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 18 in main_section_lines.begin_end_statements: COL_NAMES := ARRAY[ 'explorato
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: COL_NAMES
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 19 in main_section_lines.begin_end_statements: COL_NEW_VALUES := ARRAY[ CASE 
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: COL_NEW_VALUES
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 20 in main_section_lines.begin_end_statements: COL_OLD_VALUES := ARRAY[ CASE 
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: COL_OLD_VALUES
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,615 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,615 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,615 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,616 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,616 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,616 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,616 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: PERFORM MDMTOOL."mdmt_util_his
2025-08-14 10:23:32,616 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: RETURN NULL;
2025-08-14 10:23:32,616 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,616 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,617 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,617 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,617 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,617 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,617 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,617 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,618 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,618 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,618 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.010s
2025-08-14 10:23:32,618 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,618 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,618 - root - INFO - [common.py:73] - JSON conversion complete: 6 vars, 0 consts, 0 excs, 0 comments
2025-08-14 10:23:32,619 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,619 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,619 - root - DEBUG - [common.py:69] - Analysis statistics: 6 vars, 0 consts, 0 excs, 0 comments
2025-08-14 10:23:32,619 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger4_analysis.json
2025-08-14 10:23:32,620 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger4_analysis.json
2025-08-14 10:23:32,620 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 4 ===
2025-08-14 10:23:32,621 - root - INFO - [common.py:73] - ✓ Created trigger4_analysis.json
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - === Processing file 5/6: trigger5.sql ===
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Extracted trigger number: 5
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger5.sql
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger5_analysis.json
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 5 ===
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger5.sql
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Successfully read 1503 characters from files/oracle\trigger5.sql
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,621 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 1503 characters of SQL
2025-08-14 10:23:32,621 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,622 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,622 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,622 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,622 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 34 total, 13 with semicolons, 2 empty lines skipped
2025-08-14 10:23:32,622 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,622 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 0 comments extracted, 34 lines cleaned
2025-08-14 10:23:32,622 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,622 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 0 comments extracted, 34 lines cleaned
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 4
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-3
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 4
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_USERID
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_TRG_UPD_DATE_STR
2025-08-14 10:23:32,623 - root - DEBUG - [common.py:69] - Processing main section from lines 4
2025-08-14 10:23:32,623 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 31 lines from main section
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 4 (indent 0)
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 4 (indent 0)
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 36
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 29 statements, 0 exception handlers
2025-08-14 10:23:32,623 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 4 to 36
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,624 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,624 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:2555] - Found CASE statement at line 9 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 8
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 24 (indent 12)
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 10 (indent 16, case indent 12)
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 16 (indent 16, case indent 12)
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 22 (indent 16, case indent 12)
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,624 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 22, end at line 24
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2567] - Parsed complete CASE statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,625 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,625 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 7 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 6
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: 'TG_OP = 'UPDATE'', Indent: 4
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 33 (indent 4)
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 8
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 24 (indent 12)
2025-08-14 10:23:32,625 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 10 (indent 16, case indent 12)
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 16 (indent 16, case indent 12)
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 22 (indent 16, case indent 12)
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 22, end at line 24
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 33
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 8 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 7
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')', Indent: 8
2025-08-14 10:23:32,626 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 32 (indent 8)
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:2953] - Starting enhanced CASE statement parsing from index 8
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:2973] - CASE statement - Type: simple, Expression: '', Indent: 12
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:2995] - Found END CASE; at line 24 (indent 12)
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 10 (indent 16, case indent 12)
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3044] - Found WHEN clause at line 16 (indent 16, case indent 12)
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3054] - Found ELSE clause at line 22 (indent 16, case indent 12)
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3341] - Parsed WHEN clause: NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3400] - Parsed ELSE clause with 1 statements
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3412] - Processing nested structures in enhanced CASE statement
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:3093] - Completed enhanced CASE statement parsing: 2 when clauses, ELSE at line 22, end at line 24
2025-08-14 10:23:32,627 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 32
2025-08-14 10:23:32,628 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,628 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,628 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,628 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,628 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,628 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,628 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,629 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,629 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,629 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,629 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,630 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 5 in main_section_lines.begin_end_statements: V_USERID := COALESCE(NEW.UPD_U
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_USERID
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 6 in main_section_lines.begin_end_statements: V_TRG_UPD_DATE_STR := TO_CHAR(
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_TRG_UPD_DATE_STR
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,630 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,630 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,630 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 11 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 17 in main_section_lines.begin_end_statements.then_statements.then_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 11 in main_section_lines.begin_end_statements.then_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 17 in main_section_lines.begin_end_statements.then_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 11 in main_section_lines.begin_end_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 17 in main_section_lines.begin_end_statements.then_statements: UPDATE GMD.THEME_MOL
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,631 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,631 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,631 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:989] - Found multi-line statement starting at line 26 in main_section_lines.begin_end_statements.then_statements.then_statements: CALL GMD.GMD_UTIL_THEMES$UPD_T
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1027] - Parsed multi-line final statement: CALL GMD.GMD_UTIL_THEMES$UPD_T
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: NULL;
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: RETURN NULL;
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,632 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=9, end_case_line_no=24
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:3895] - Adding new case_when structure: lines 9-24
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=9, end_case_line_no=24
2025-08-14 10:23:32,632 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 9-24
2025-08-14 10:23:32,633 - root - DEBUG - [OracleTriggerAnalyzer.py:3884] - Found case_when structure: case_line_no=9, end_case_line_no=24
2025-08-14 10:23:32,633 - root - DEBUG - [OracleTriggerAnalyzer.py:3891] - Removing duplicate case_when structure: lines 9-24
2025-08-14 10:23:32,633 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,633 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,633 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,633 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,633 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,633 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,633 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.012s
2025-08-14 10:23:32,633 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,633 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,633 - root - INFO - [common.py:73] - JSON conversion complete: 2 vars, 0 consts, 0 excs, 0 comments
2025-08-14 10:23:32,634 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,634 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,634 - root - DEBUG - [common.py:69] - Analysis statistics: 2 vars, 0 consts, 0 excs, 0 comments
2025-08-14 10:23:32,634 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger5_analysis.json
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger5_analysis.json
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 5 ===
2025-08-14 10:23:32,635 - root - INFO - [common.py:73] - ✓ Created trigger5_analysis.json
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - === Processing file 6/6: trigger6.sql ===
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Extracted trigger number: 6
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Source path: files/oracle\trigger6.sql
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Output path: files/format_json\trigger6_analysis.json
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - === SQL to JSON processing for trigger 6 ===
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Reading SQL file: files/oracle\trigger6.sql
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Successfully read 3810 characters from files/oracle\trigger6.sql
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Creating OracleTriggerAnalyzer instance...
2025-08-14 10:23:32,635 - root - DEBUG - [common.py:69] - Initializing OracleTriggerAnalyzer with 3810 characters of SQL
2025-08-14 10:23:32,636 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing: 0 lines processed
2025-08-14 10:23:32,636 - root - INFO - [common.py:97] - 🔄 Starting SQL section parsing parsing
2025-08-14 10:23:32,636 - root - INFO - [common.py:97] - 🔄 Starting structured lines conversion parsing
2025-08-14 10:23:32,636 - root - DEBUG - [common.py:69] - Converting SQL content to structured lines
2025-08-14 10:23:32,636 - root - DEBUG - [common.py:69] - Structured lines conversion complete: 81 total, 32 with semicolons, 8 empty lines skipped
2025-08-14 10:23:32,637 - root - INFO - [common.py:104] - ✅ Completed structured lines conversion parsing
2025-08-14 10:23:32,637 - root - DEBUG - [OracleTriggerAnalyzer.py:226] - Block comment stripping complete: 0 comments extracted, 81 lines cleaned
2025-08-14 10:23:32,637 - root - DEBUG - [OracleTriggerAnalyzer.py:298] - Removed block comments from main section
2025-08-14 10:23:32,637 - root - DEBUG - [OracleTriggerAnalyzer.py:273] - Inline comment stripping complete: 6 comments extracted, 75 lines cleaned
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - Removed inline comments from main section
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:314] - Found DECLARE at line 1
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:319] - Found BEGIN at line 12
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:325] - DECLARE section: lines 1-11
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:332] - Main section: lines 12
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:359] - Starting declaration parsing
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_TRIGGER_NAME
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_EVOLVED_THEME_NO
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: V_PROPOSAL_ID
2025-08-14 10:23:32,638 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: C_PROPOSAL_STATUS_ACTIVE
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: C_PROPOSAL_STATUS_EVOLVED
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:402] - Processed variable: C_PROPOSAL_STATUS_TERMINATED
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: V_NO_UPDATE_TO_EVOLVED
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: V_NO_UPDATE_TERMINATED_TO_ACTIVE
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: V_NO_UPDATE_EVOLVED_TO_TERMINATED
2025-08-14 10:23:32,639 - root - DEBUG - [OracleTriggerAnalyzer.py:432] - Processed exception: V_EXPLORATORY_THEMENO_NOT_NULL
2025-08-14 10:23:32,639 - root - DEBUG - [common.py:69] - Processing main section from lines 12
2025-08-14 10:23:32,639 - root - INFO - [common.py:97] - 🔄 Starting First BEGIN blocks parsing
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:792] - Starting top-level BEGIN blocks parsing
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:802] - Collected 64 lines from main section
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:821] - Found top-level BEGIN block at line 12 (indent 0)
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:891] - Parsing top-level BEGIN-END block starting at line 12 (indent 0)
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:926] - Found EXCEPTION at line 80
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:932] - Found END; at line 89
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: DUP_VAL_ON_INDEX
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20600', 'handler_string': 'V_TRIGGER_NAME'}
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: V_NO_UPDATE_EVOLVED_TO_TERMINATED
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20800', 'handler_string': 'V_TRIGGER_NAME'}
2025-08-14 10:23:32,640 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: V_NO_UPDATE_TO_EVOLVED
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20900', 'handler_string': 'V_TRIGGER_NAME'}
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:3622] - Found exception handler: V_EXPLORATORY_THEMENO_NOT_NULL
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:3644] - Added RAISE_APPLICATION_ERROR function call: {'handler_code': '-20940', 'handler_string': 'V_TRIGGER_NAME'}
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:3664] - Parsed exception section: 4 handlers
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:957] - Successfully parsed top-level BEGIN-END block: 53 statements, 4 exception handlers
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:849] - Successfully parsed top-level BEGIN-END block from line 12 to 89
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:858] - Top-level BEGIN blocks parsing complete: 1 items in main_section_lines
2025-08-14 10:23:32,641 - root - INFO - [common.py:104] - ✅ Completed First BEGIN blocks parsing
2025-08-14 10:23:32,641 - root - INFO - [common.py:97] - 🔄 Starting CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:2537] - Starting CASE WHEN ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,641 - root - DEBUG - [OracleTriggerAnalyzer.py:2666] - CASE WHEN ELSE parsing complete
2025-08-14 10:23:32,641 - root - INFO - [common.py:104] - ✅ Completed CASE-WHEN statements in main section parsing
2025-08-14 10:23:32,642 - root - INFO - [common.py:97] - 🔄 Starting IF-ELSE statements in main section parsing
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1434] - Starting IF-ELSIF-ELSE parsing with indentation-based nesting
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 18 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 13
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', Indent: 4
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 20 (indent 4)
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 20
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 24 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 16
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', Indent: 4
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 26 (indent 4)
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 26
2025-08-14 10:23:32,642 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 30 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 19
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', Indent: 4
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 32 (indent 4)
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 32
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 36 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 22
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', Indent: 4
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 38 (indent 4)
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 38
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 40 in main_section_lines.begin_end_statements
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 25
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: '(INSERTING)', Indent: 4
2025-08-14 10:23:32,643 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 79 (indent 4)
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1691] - Found ELSIF clause at line 64 (indent 4)
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:2002] - Parsed ELSIF clause: (UPDATING)
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 1 else_if clauses, ELSE at line None, end at line 79
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 61 in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 46
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: ':NEW.PARTNER_ID IS NOT NULL', Indent: 8
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 63 (indent 8)
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 63
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.then_statements
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1452] - Found IF statement at line 76 in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1576] - Starting enhanced IF statement parsing from index 61
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1627] - IF statement - Condition: 'NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL')', Indent: 8
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1646] - Found END IF; at line 78 (indent 8)
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:2052] - Processing nested structures in enhanced IF statement
2025-08-14 10:23:32,644 - root - DEBUG - [OracleTriggerAnalyzer.py:1754] - Completed enhanced IF statement parsing: 0 else_if clauses, ELSE at line None, end at line 78
2025-08-14 10:23:32,645 - root - DEBUG - [OracleTriggerAnalyzer.py:1464] - Parsed complete IF statement structure in main_section_lines.begin_end_statements.else_if.then_statements
2025-08-14 10:23:32,645 - root - DEBUG - [OracleTriggerAnalyzer.py:1563] - IF-ELSIF-ELSE parsing complete
2025-08-14 10:23:32,645 - root - INFO - [common.py:104] - ✅ Completed IF-ELSE statements in main section parsing
2025-08-14 10:23:32,645 - root - INFO - [common.py:97] - 🔄 Starting BEGIN blocks in main section parsing
2025-08-14 10:23:32,645 - root - DEBUG - [OracleTriggerAnalyzer.py:2681] - Starting nested BEGIN block parsing
2025-08-14 10:23:32,645 - root - DEBUG - [OracleTriggerAnalyzer.py:2806] - Nested BEGIN block parsing complete
2025-08-14 10:23:32,645 - root - INFO - [common.py:104] - ✅ Completed BEGIN blocks in main section parsing
2025-08-14 10:23:32,646 - root - INFO - [common.py:97] - 🔄 Starting FOR loops in main section parsing
2025-08-14 10:23:32,646 - root - DEBUG - [OracleTriggerAnalyzer.py:1129] - Starting FOR loop parsing
2025-08-14 10:23:32,646 - root - DEBUG - [OracleTriggerAnalyzer.py:1256] - FOR loop parsing complete
2025-08-14 10:23:32,646 - root - INFO - [common.py:104] - ✅ Completed FOR loops in main section parsing
2025-08-14 10:23:32,646 - root - INFO - [common.py:97] - 🔄 Starting assignment statements in main section parsing
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2159] - Starting assignment statements parsing
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 13 in main_section_lines.begin_end_statements: V_EVOLVED_THEME_NO := :NEW.EVO
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_EVOLVED_THEME_NO
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 31 in main_section_lines.begin_end_statements.then_statements: V_EVOLVED_THEME_NO := NULL;
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_EVOLVED_THEME_NO
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2176] - Found assignment statement at line 41 in main_section_lines.begin_end_statements.then_statements: V_PROPOSAL_ID := PREDMD.SEQ_NM
2025-08-14 10:23:32,647 - root - DEBUG - [OracleTriggerAnalyzer.py:2196] - Parsed single-line assignment statement: V_PROPOSAL_ID
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2325] - Assignment statements parsing complete
2025-08-14 10:23:32,648 - root - INFO - [common.py:104] - ✅ Completed assignment statements in main section parsing
2025-08-14 10:23:32,648 - root - INFO - [common.py:97] - 🔄 Starting SQL statements in main section parsing
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2369] - Starting SQL statements parsing
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 19 in main_section_lines.begin_end_statements.then_statements: RAISE V_NO_UPDATE_TO
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 25 in main_section_lines.begin_end_statements.then_statements: RAISE V_NO_UPDATE_EV
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 37 in main_section_lines.begin_end_statements.then_statements: RAISE V_EXPLORATORY_
2025-08-14 10:23:32,648 - root - DEBUG - [OracleTriggerAnalyzer.py:2414] - Parsed single-line SQL statement: raise_statement
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 42 in main_section_lines.begin_end_statements.then_statements: INSERT INTO V_NEW_ME
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: insert_statement
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:2402] - Found SQL statement at line 65 in main_section_lines.begin_end_statements.else_if.then_statements: UPDATE V_NEW_MEDICIN
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:2449] - Parsed multi-line SQL statement: update_statement
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:2528] - SQL statements parsing complete
2025-08-14 10:23:32,649 - root - INFO - [common.py:104] - ✅ Completed SQL statements in main section parsing
2025-08-14 10:23:32,649 - root - INFO - [common.py:97] - 🔄 Starting final statement in main section parsing
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: MDMAPPL.MDM_LOAD_NPM_PARTNER_D
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:1038] - Parsed single-line final statement: MDMAPPL.MDM_LOAD_NPM_PARTNER_D
2025-08-14 10:23:32,649 - root - DEBUG - [OracleTriggerAnalyzer.py:1114] - Final statement parsing complete
2025-08-14 10:23:32,649 - root - INFO - [common.py:104] - ✅ Completed final statement in main section parsing
2025-08-14 10:23:32,650 - root - DEBUG - [OracleTriggerAnalyzer.py:782] - About to remove duplicate case_when structures
2025-08-14 10:23:32,650 - root - DEBUG - [OracleTriggerAnalyzer.py:3867] - Removing duplicate case_when structures
2025-08-14 10:23:32,650 - root - DEBUG - [OracleTriggerAnalyzer.py:3941] - Duplicate case_when structures removal complete
2025-08-14 10:23:32,650 - root - DEBUG - [OracleTriggerAnalyzer.py:784] - Finished removing duplicate case_when structures
2025-08-14 10:23:32,650 - root - INFO - [common.py:104] - ✅ Completed SQL section parsing parsing
2025-08-14 10:23:32,650 - root - INFO - [common.py:97] - 🔄 Starting rule validation parsing
2025-08-14 10:23:32,650 - root - DEBUG - [OracleTriggerAnalyzer.py:732] - Rule validation complete: found 0 violations
2025-08-14 10:23:32,650 - root - INFO - [common.py:104] - ✅ Completed rule validation parsing
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:127] - ⏱️ OracleTriggerAnalyzer initialization completed in 0.015s
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - OracleTriggerAnalyzer created successfully
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - Generating JSON analysis...
2025-08-14 10:23:32,651 - root - INFO - [common.py:73] - JSON conversion complete: 6 vars, 0 consts, 4 excs, 6 comments
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - JSON analysis generated successfully
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - Analysis statistics: 6 vars, 0 consts, 4 excs, 6 comments
2025-08-14 10:23:32,651 - root - DEBUG - [common.py:69] - Writing analysis JSON to: files/format_json\trigger6_analysis.json
2025-08-14 10:23:32,652 - root - DEBUG - [common.py:69] - Successfully wrote analysis JSON to files/format_json\trigger6_analysis.json
2025-08-14 10:23:32,652 - root - DEBUG - [common.py:69] - === SQL to JSON processing complete for trigger 6 ===
2025-08-14 10:23:32,652 - root - INFO - [common.py:73] - ✓ Created trigger6_analysis.json
2025-08-14 10:23:32,653 - root - INFO - [common.py:73] - === File processing complete ===
2025-08-14 10:23:32,653 - root - INFO - [common.py:73] - Successfully processed: 6 files
2025-08-14 10:23:32,653 - root - INFO - [common.py:73] - === Oracle triggers to JSON conversion complete ===
2025-08-14 10:23:32,653 - root - INFO - [common.py:73] - ✓ JSON conversion complete! (Duration: 0.23 seconds)
2025-08-14 10:23:32,653 - root - INFO - [common.py:73] - Step 2: Converting JSON analysis back to formatted SQL...
2025-08-14 10:23:32,662 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,663 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,664 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}, {'variable': 'V_MOLECULE_ID', 'value': ':NEW.MOLECULE_ID', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 194}, {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}, {'type': 'case_when', 'case_expression': 'LENGTH(:NEW.THEME_NO)', 'when_clauses': [{'when_value': '4', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}], 'when_line_no': 242}, {'when_value': '5', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}], 'when_line_no': 246}], 'else_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 251}], 'case_line_no': 241, 'case_indent': 6, 'when_line_nos': [242, 246], 'else_line_no': 250, 'end_case_line_no': 252}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 254}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 257}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 278}, {'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 279}, {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 321}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 322}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 332}, {'variable': 'V_VALID_TO', 'value': "TO_DATE('09.09.9999', 'DD.MM.YYYY')", 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 333}, {'variable': 'V_SHORT_NAME', 'value': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30))', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 334}, {'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'type': 'insert_statement', 'statement_indent': 6, 'statement_line_no': 335}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}], 'else_if': [], 'else_statements': [], 'if_line_no': 186, 'if_indent': 3, 'else_if_line_nos': [406, 607], 'else_line_no': None, 'end_if_line_no': 624}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,665 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}], 'else_if': [], 'else_statements': [], 'if_line_no': 628, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 709}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}, {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}], 'else_if': [], 'else_statements': [], 'if_line_no': 713, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 761}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,666 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,667 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 410}], 'else_if': [], 'else_statements': [], 'if_line_no': 409, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 411}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_NO <> :OLD.THEME_NO)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 414}], 'else_if': [], 'else_statements': [], 'if_line_no': 413, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 415}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy')", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 424}], 'else_if': [], 'else_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 427}], 'if_line_no': 421, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 425, 'end_if_line_no': 428}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 448}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 450}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 451}], 'if_line_no': 447, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 449, 'end_if_line_no': 452}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD)", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 431}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 444}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 445}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 448}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 450}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 451}], 'if_line_no': 447, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 449, 'end_if_line_no': 452}], 'if_line_no': 430, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 446, 'end_if_line_no': 453}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 456}], 'else_if': [], 'else_statements': [], 'if_line_no': 455, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 457}
2025-08-14 10:23:32,668 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 471}], 'else_if': [], 'else_statements': [], 'if_line_no': 470, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 472}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.else_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 519}], 'else_if': [], 'else_statements': [], 'if_line_no': 518, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 520}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'type': 'update_statement', 'statement_indent': 9, 'statement_line_no': 478}], 'else_if': [], 'else_statements': [{'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 508}, {'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 511}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 519}], 'else_if': [], 'else_statements': [], 'if_line_no': 518, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 520}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 522}, {'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'type': 'update_statement', 'statement_indent': 9, 'statement_line_no': 523}], 'if_line_no': 477, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 504, 'end_if_line_no': 550}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.when_clauses.2.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEC_MOL_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 591}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 595}], 'if_line_no': 590, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 592, 'end_if_line_no': 603}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,669 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,670 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}], 'else_if': [], 'else_statements': [], 'if_line_no': 628, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 709}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,671 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 609}], 'else_if': [], 'else_statements': [], 'if_line_no': 608, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 610}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE))", 'then_statements': [{'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'type': 'delete_statement', 'statement_indent': 9, 'statement_line_no': 617}], 'else_if': [], 'else_statements': [{'sql_statement': 'RAISE DELETE_NO_MORE_POSSIBLE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 622}], 'if_line_no': 616, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 621, 'end_if_line_no': 623}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,672 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,673 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,674 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,674 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,674 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,674 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,674 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,680 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,681 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,682 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}, {'variable': 'V_MOLECULE_ID', 'value': ':NEW.MOLECULE_ID', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 194}, {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}, {'type': 'case_when', 'case_expression': 'LENGTH(:NEW.THEME_NO)', 'when_clauses': [{'when_value': '4', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}], 'when_line_no': 242}, {'when_value': '5', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}], 'when_line_no': 246}], 'else_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 251}], 'case_line_no': 241, 'case_indent': 6, 'when_line_nos': [242, 246], 'else_line_no': 250, 'end_case_line_no': 252}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 254}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 257}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 278}, {'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 279}, {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 321}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 322}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 332}, {'variable': 'V_VALID_TO', 'value': "TO_DATE('09.09.9999', 'DD.MM.YYYY')", 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 333}, {'variable': 'V_SHORT_NAME', 'value': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30))', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 334}, {'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'type': 'insert_statement', 'statement_indent': 6, 'statement_line_no': 335}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}], 'else_if': [], 'else_statements': [], 'if_line_no': 186, 'if_indent': 3, 'else_if_line_nos': [406, 607], 'else_line_no': None, 'end_if_line_no': 624}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}], 'else_if': [], 'else_statements': [], 'if_line_no': 628, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 709}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,683 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}, {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}], 'else_if': [], 'else_statements': [], 'if_line_no': 713, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 761}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,684 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 410}], 'else_if': [], 'else_statements': [], 'if_line_no': 409, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 411}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_NO <> :OLD.THEME_NO)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 414}], 'else_if': [], 'else_statements': [], 'if_line_no': 413, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 415}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy')", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 424}], 'else_if': [], 'else_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 427}], 'if_line_no': 421, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 425, 'end_if_line_no': 428}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 448}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 450}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 451}], 'if_line_no': 447, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 449, 'end_if_line_no': 452}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD)", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 431}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 444}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 445}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 448}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 450}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12, 'statement_line_no': 451}], 'if_line_no': 447, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 449, 'end_if_line_no': 452}], 'if_line_no': 430, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 446, 'end_if_line_no': 453}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 456}], 'else_if': [], 'else_statements': [], 'if_line_no': 455, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 457}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 471}], 'else_if': [], 'else_statements': [], 'if_line_no': 470, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 472}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.else_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 519}], 'else_if': [], 'else_statements': [], 'if_line_no': 518, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 520}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'type': 'update_statement', 'statement_indent': 9, 'statement_line_no': 478}], 'else_if': [], 'else_statements': [{'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 508}, {'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 511}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 519}], 'else_if': [], 'else_statements': [], 'if_line_no': 518, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 520}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 522}, {'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'type': 'update_statement', 'statement_indent': 9, 'statement_line_no': 523}], 'if_line_no': 477, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 504, 'end_if_line_no': 550}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.when_clauses.2.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEC_MOL_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 591}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 595}], 'if_line_no': 590, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 592, 'end_if_line_no': 603}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,685 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,686 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,687 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}], 'else_if': [], 'else_statements': [], 'if_line_no': 628, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 709}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}
2025-08-14 10:23:32,688 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 97}], 'else_if': [], 'else_statements': [], 'if_line_no': 96, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 98}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 101}], 'else_if': [], 'else_statements': [], 'if_line_no': 100, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 102}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9, 'line_no': 105}], 'else_if': [], 'else_statements': [], 'if_line_no': 104, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 106}], 'else_if': [], 'else_statements': [], 'if_line_no': 95, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 107}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 113}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 124}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12, 'line_no': 129}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 133}], 'if_line_no': 128, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 138}], 'else_if': [], 'else_statements': [], 'if_line_no': 127, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 139}], 'else_if': [], 'else_statements': [], 'if_line_no': 111, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 140}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 150}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 157}], 'if_line_no': 149, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 156, 'end_if_line_no': 158}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6, 'statement_line_no': 161}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 170}], 'if_line_no': 160, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 169, 'end_if_line_no': 171}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 175}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6, 'statement_line_no': 177}], 'if_line_no': 174, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': 176, 'end_if_line_no': 178}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6, 'statement_line_no': 182}], 'else_if': [], 'else_statements': [], 'if_line_no': 181, 'if_indent': 3, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 183}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 609}], 'else_if': [], 'else_statements': [], 'if_line_no': 608, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 610}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE))", 'then_statements': [{'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'type': 'delete_statement', 'statement_indent': 9, 'statement_line_no': 617}], 'else_if': [], 'else_statements': [{'sql_statement': 'RAISE DELETE_NO_MORE_POSSIBLE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 622}], 'if_line_no': 616, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 621, 'end_if_line_no': 623}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 188}], 'else_if': [], 'else_statements': [], 'if_line_no': 187, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 189}
2025-08-14 10:23:32,689 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 197}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 199}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 214}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12, 'statement_line_no': 227}], 'if_line_no': 196, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 198, 'end_if_line_no': 238}], 'else_if': [], 'else_statements': [], 'if_line_no': 195, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 239}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 244}], 'else_if': [], 'else_statements': [], 'if_line_no': 243, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 245}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15, 'statement_line_no': 248}], 'else_if': [], 'else_statements': [], 'if_line_no': 247, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 249}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 275}], 'else_if': [], 'else_statements': [], 'if_line_no': 274, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 276}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 283}], 'else_if': [], 'else_statements': [], 'if_line_no': 282, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 284}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 288}], 'else_if': [], 'else_statements': [], 'if_line_no': 287, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}], 'else_if': [], 'else_statements': [], 'if_line_no': 286, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 290}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 295}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 309}], 'else_if': [], 'else_statements': [], 'if_line_no': 308, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 310}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 312}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 313}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 317}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9, 'statement_line_no': 318}], 'if_line_no': 294, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 314, 'end_if_line_no': 319}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9, 'statement_line_no': 329}], 'else_if': [], 'else_statements': [], 'if_line_no': 328, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 330}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 391}], 'else_if': [], 'else_statements': [], 'if_line_no': 388, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 402}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}
2025-08-14 10:23:32,690 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 632}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 644}], 'else_if': [], 'else_statements': [], 'if_line_no': 643, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 652}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 655}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 665}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15, 'statement_line_no': 673}], 'else_if': [], 'else_statements': [], 'if_line_no': 662, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 681}], 'if_line_no': 654, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': 661, 'end_if_line_no': 682}], 'if_line_no': 629, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': 653, 'end_if_line_no': 683}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 690}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12, 'statement_line_no': 700}], 'else_if': [], 'else_statements': [], 'if_line_no': 697, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 707}], 'else_if': [], 'else_statements': [], 'if_line_no': 687, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 708}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9, 'statement_line_no': 715}], 'else_if': [], 'else_statements': [], 'if_line_no': 714, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 723}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}
2025-08-14 10:23:32,691 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15, 'statement_line_no': 730}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18, 'statement_line_no': 741}]}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 728, 'if_indent': 9, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 743}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9, 'statement_line_no': 745}], 'else_if': [], 'else_statements': [], 'if_line_no': 727, 'if_indent': 6, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 760}
2025-08-14 10:23:32,696 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,696 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,696 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,696 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}], 'when_line_no': 126}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 158}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}], 'when_line_no': 156}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20, 'statement_line_no': 199}], 'case_line_no': 125, 'case_indent': 12, 'when_line_nos': [126, 156], 'else_line_no': 196, 'end_case_line_no': 200}], 'else_if': [], 'else_statements': [], 'if_line_no': 124, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 201}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,697 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,698 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 61}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}, None, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}, {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}], 'when_line_no': 126}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 158}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}], 'when_line_no': 156}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20, 'statement_line_no': 199}], 'case_line_no': 125, 'case_indent': 12, 'when_line_nos': [126, 156], 'else_line_no': 196, 'end_case_line_no': 200}], 'else_if': [], 'else_statements': [], 'if_line_no': 124, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 201}, None, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 395}], 'else_if': [], 'else_statements': [], 'if_line_no': 60, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 401}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}], 'else_if': [], 'else_statements': [], 'if_line_no': 89, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 93}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,699 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,700 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}], 'else_if': [], 'else_statements': [], 'if_line_no': 202, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 393}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 61}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}], 'else_if': [], 'else_statements': [], 'if_line_no': 89, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 93}, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}, None, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}], 'else_if': [], 'else_statements': [], 'if_line_no': 202, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 393}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 395}], 'else_if': [], 'else_statements': [], 'if_line_no': 60, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 401}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 8, 'statement_line_no': 33}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 8, 'statement_line_no': 41}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 52}], 'else_if': [], 'else_statements': [], 'if_line_no': 27, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 58}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,701 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,702 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,704 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}], 'when_line_no': 126}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 158}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}], 'when_line_no': 156}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20, 'statement_line_no': 199}], 'case_line_no': 125, 'case_indent': 12, 'when_line_nos': [126, 156], 'else_line_no': 196, 'end_case_line_no': 200}], 'else_if': [], 'else_statements': [], 'if_line_no': 124, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 201}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 61}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}, None, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}, {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}], 'when_line_no': 126}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 158}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}], 'when_line_no': 156}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20, 'statement_line_no': 199}], 'case_line_no': 125, 'case_indent': 12, 'when_line_nos': [126, 156], 'else_line_no': 196, 'end_case_line_no': 200}], 'else_if': [], 'else_statements': [], 'if_line_no': 124, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 201}, None, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 395}], 'else_if': [], 'else_statements': [], 'if_line_no': 60, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 401}
2025-08-14 10:23:32,705 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}], 'else_if': [], 'else_statements': [], 'if_line_no': 89, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 93}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,706 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,707 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}], 'else_if': [], 'else_statements': [], 'if_line_no': 202, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 393}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 61}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}], 'else_if': [], 'else_statements': [], 'if_line_no': 89, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 93}, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}, None, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}], 'else_if': [], 'else_statements': [], 'if_line_no': 202, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 393}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 395}], 'else_if': [], 'else_statements': [], 'if_line_no': 60, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 401}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 8, 'statement_line_no': 33}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 8, 'statement_line_no': 41}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8, 'line_no': 52}], 'else_if': [], 'else_statements': [], 'if_line_no': 27, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 58}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 69}], 'else_if': [], 'else_statements': [], 'if_line_no': 68, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 87}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 91}], 'else_if': [], 'else_statements': [], 'if_line_no': 90, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 92}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 99}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 108}], 'else_if': [], 'else_statements': [], 'if_line_no': 107, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 109}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12, 'statement_line_no': 111}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16, 'statement_line_no': 120}], 'else_if': [], 'else_statements': [], 'if_line_no': 119, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 121}], 'else_if': [], 'else_statements': [], 'if_line_no': 98, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 122}
2025-08-14 10:23:32,708 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 130}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 139}], 'if_line_no': 127, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 137, 'end_if_line_no': 152}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 170}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 179}], 'if_line_no': 167, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 177, 'end_if_line_no': 192}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 205}], 'else_if': [], 'else_statements': [], 'if_line_no': 204, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 211}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 222}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 231}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 242}], 'if_line_no': 228, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 239, 'end_if_line_no': 250}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24, 'statement_line_no': 257}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24, 'statement_line_no': 267}], 'if_line_no': 254, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': 265, 'end_if_line_no': 280}], 'else_if': [], 'else_statements': [], 'if_line_no': 213, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 285}], 'else_if': [], 'else_statements': [], 'if_line_no': 203, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 289}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 302}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 310}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 323}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 333}], 'if_line_no': 320, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 331, 'end_if_line_no': 346}], 'else_if': [], 'else_statements': [], 'if_line_no': 291, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 351}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16, 'statement_line_no': 355}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 366}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20, 'statement_line_no': 376}], 'if_line_no': 363, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 374, 'end_if_line_no': 387}], 'else_if': [], 'else_statements': [], 'if_line_no': 352, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 392}
2025-08-14 10:23:32,709 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 420}], 'else_if': [], 'else_statements': [], 'if_line_no': 419, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 421}
2025-08-14 10:23:32,713 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,716 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 34}
2025-08-14 10:23:32,717 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,717 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,717 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,717 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,717 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,718 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 37}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 243}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,719 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 37}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 243}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,720 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,721 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}, {'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'type': 'unknown_statement', 'indent': 8, 'line_no': 250}], 'else_if': [], 'else_statements': [], 'if_line_no': 245, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 251}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 34}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,723 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 37}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 243}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,724 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8, 'statement_line_no': 37}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 243}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 31, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 44}], 'else_if': [], 'else_statements': [], 'if_line_no': 43, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 45}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}
2025-08-14 10:23:32,725 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16, 'statement_line_no': 49}], 'else_if': [], 'else_statements': [], 'if_line_no': 48, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 50}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 55}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 82}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20, 'statement_line_no': 102}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20, 'statement_line_no': 105}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24, 'statement_line_no': 118}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 129}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28, 'statement_line_no': 133}], 'if_line_no': 126, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': 130, 'end_if_line_no': 134}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24, 'line_no': 136}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32, 'line_no': 160}]}], 'else_if': [], 'else_statements': [], 'if_line_no': 148, 'if_indent': 24, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 171}], 'else_if': [], 'else_statements': [], 'if_line_no': 114, 'if_indent': 20, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 172}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20, 'line_no': 176}], 'if_line_no': 76, 'if_indent': 16, 'else_if_line_nos': [], 'else_line_no': 173, 'end_if_line_no': 194}], 'if_line_no': 52, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 73, 'end_if_line_no': 195}], 'else_if': [], 'else_statements': [], 'if_line_no': 47, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 196}
2025-08-14 10:23:32,726 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}
2025-08-14 10:23:32,727 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 202}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16, 'line_no': 223}], 'if_line_no': 199, 'if_indent': 12, 'else_if_line_nos': [], 'else_line_no': 220, 'end_if_line_no': 241}], 'else_if': [], 'else_statements': [], 'if_line_no': 198, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 242}
2025-08-14 10:23:32,727 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}
2025-08-14 10:23:32,727 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12, 'statement_line_no': 247}], 'else_if': [], 'else_statements': [], 'if_line_no': 246, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 248}, {'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'type': 'unknown_statement', 'indent': 8, 'line_no': 250}], 'else_if': [], 'else_statements': [], 'if_line_no': 245, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 251}
2025-08-14 10:23:32,730 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.0.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'INSERT'", 'then_statements': [{'variable': 'V_ACTION', 'value': "'I'", 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 11}], 'else_if': [], 'else_statements': [], 'if_line_no': 10, 'if_indent': 4, 'else_if_line_nos': [12, 14], 'else_line_no': None, 'end_if_line_no': 16}
2025-08-14 10:23:32,730 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.0.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'INSERT'", 'then_statements': [{'variable': 'V_ACTION', 'value': "'I'", 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 11}], 'else_if': [], 'else_statements': [], 'if_line_no': 10, 'if_indent': 4, 'else_if_line_nos': [12, 14], 'else_line_no': None, 'end_if_line_no': 16}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 7, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,732 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}], 'else_if': [], 'else_statements': [], 'if_line_no': 7, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 33}
2025-08-14 10:23:32,733 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 11}], 'when_line_no': 10}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20, 'statement_line_no': 17}], 'when_line_no': 16}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20, 'line_no': 23}], 'case_line_no': 9, 'case_indent': 12, 'when_line_nos': [10, 16], 'else_line_no': 22, 'end_case_line_no': 24}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12, 'line_no': 26}], 'else_if': [], 'else_statements': [], 'if_line_no': 8, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,734 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,734 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'variable': 'V_PROPOSAL_ID', 'value': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 41}, {'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'type': 'insert_statement', 'statement_indent': 8, 'statement_line_no': 42}, {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}], 'else_if': [], 'else_statements': [], 'if_line_no': 40, 'if_indent': 4, 'else_if_line_nos': [64], 'else_line_no': None, 'end_if_line_no': 79}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL')", 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(:NEW.PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 77}], 'else_if': [], 'else_statements': [], 'if_line_no': 76, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 78}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,735 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,736 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,737 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,737 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'variable': 'V_PROPOSAL_ID', 'value': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 41}, {'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'type': 'insert_statement', 'statement_indent': 8, 'statement_line_no': 42}, {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}], 'else_if': [], 'else_statements': [], 'if_line_no': 40, 'if_indent': 4, 'else_if_line_nos': [64], 'else_line_no': None, 'end_if_line_no': 79}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,738 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL')", 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(:NEW.PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 77}], 'else_if': [], 'else_statements': [], 'if_line_no': 76, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 78}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 19}], 'else_if': [], 'else_statements': [], 'if_line_no': 18, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 20}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 25}], 'else_if': [], 'else_statements': [], 'if_line_no': 24, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 26}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8, 'statement_line_no': 31}], 'else_if': [], 'else_statements': [], 'if_line_no': 30, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 32}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8, 'statement_line_no': 37}], 'else_if': [], 'else_statements': [], 'if_line_no': 36, 'if_indent': 4, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 38}
2025-08-14 10:23:32,739 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12, 'line_no': 62}], 'else_if': [], 'else_statements': [], 'if_line_no': 61, 'if_indent': 8, 'else_if_line_nos': [], 'else_line_no': None, 'end_if_line_no': 63}
2025-08-14 10:23:32,740 - root - INFO - [common.py:73] - ✓ SQL formatting complete! (Duration: 0.09 seconds)
2025-08-14 10:23:32,741 - root - INFO - [common.py:73] - Step 3: Cleaning JSON...
2025-08-14 10:23:32,758 - root - INFO - [common.py:73] - ✓ JSON cleaning complete! (Duration: 0.02 seconds)
2025-08-14 10:23:32,759 - root - INFO - [common.py:73] - Step 3: Validating conversion results...
2025-08-14 10:23:32,759 - root - INFO - [common.py:73] - === Starting conversion validation ===
2025-08-14 10:23:32,759 - root - DEBUG - [common.py:69] - Checking original files in: files/oracle
2025-08-14 10:23:32,760 - root - DEBUG - [common.py:69] - Found 6 original SQL files
2025-08-14 10:23:32,760 - root - DEBUG - [common.py:69] - Checking converted files in: files/format_sql
2025-08-14 10:23:32,760 - root - DEBUG - [common.py:69] - Found 6 converted SQL files
2025-08-14 10:23:32,760 - root - INFO - [common.py:73] - Validation summary: 6 original files and 6 converted files
2025-08-14 10:23:32,760 - root - INFO - [common.py:73] - ✓ File count validation passed
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger1.sql
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger2.sql
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger3.sql
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger4.sql
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger5.sql
2025-08-14 10:23:32,761 - root - DEBUG - [common.py:69] - ✓ Found converted file: trigger6.sql
2025-08-14 10:23:32,761 - root - INFO - [common.py:73] - ✓ All expected converted files found
2025-08-14 10:23:32,761 - root - INFO - [common.py:73] - Successfully validated 6 converted files
2025-08-14 10:23:32,761 - root - INFO - [common.py:73] - === Conversion validation complete ===
2025-08-14 10:23:32,762 - root - INFO - [common.py:73] - ✓ Validation complete! (Duration: 0.00 seconds)
2025-08-14 10:23:32,762 - root - INFO - [common.py:73] - Step 4: Converting JSON to PL/JSON...
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,766 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,767 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,767 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,768 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,769 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,769 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,769 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,769 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,769 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,770 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,770 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,770 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_MOLECULE_ID', 'value': ':NEW.MOLECULE_ID', 'type': 'assignment_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'case_when', 'case_expression': 'LENGTH(:NEW.THEME_NO)', 'when_clauses': [{'when_value': '4', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}]}, {'when_value': '5', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}]}], 'else_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 12}], 'case_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'type': 'select_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_VALID_TO', 'value': "TO_DATE('09.09.9999', 'DD.MM.YYYY')", 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_SHORT_NAME', 'value': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30))', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'type': 'insert_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,771 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,772 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_NO <> :OLD.THEME_NO)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy')", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD)", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.else_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,773 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'type': 'update_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9}, {'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9}, {'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'type': 'update_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.when_clauses.2.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEC_MOL_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 15}], 'if_indent': 12}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,774 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,775 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,776 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE))", 'then_statements': [{'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'type': 'delete_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'sql_statement': 'RAISE DELETE_NO_MORE_POSSIBLE;', 'type': 'raise_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,777 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,778 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,779 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,779 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,779 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,782 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,782 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,782 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,782 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,782 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,783 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_MOLECULE_ID', 'value': ':NEW.MOLECULE_ID', 'type': 'assignment_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'case_when', 'case_expression': 'LENGTH(:NEW.THEME_NO)', 'when_clauses': [{'when_value': '4', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}]}, {'when_value': '5', 'then_statements': [{'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}]}], 'else_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 12}], 'case_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'type': 'select_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_VALID_TO', 'value': "TO_DATE('09.09.9999', 'DD.MM.YYYY')", 'type': 'assignment_statement', 'statement_indent': 6}, {'variable': 'V_SHORT_NAME', 'value': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30))', 'type': 'assignment_statement', 'statement_indent': 6}, {'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'type': 'insert_statement', 'statement_indent': 6}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,784 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_NO <> :OLD.THEME_NO)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy')", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_D_REGISTRAT_DATE', 'value': 'SYSDATE', 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD)", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 12}, {'variable': 'V_PORTF_PROJ_CD', 'value': ':NEW.PORTF_PROJ_CD', 'type': 'assignment_statement', 'statement_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,785 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.else_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'type': 'update_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9}, {'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_COUNTER', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 9}, {'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'type': 'update_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.when_clauses.2.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEC_MOL_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 15}], 'if_indent': 12}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,786 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.then_statements.3.then_statements.4.then_statements.5.then_statements.6.then_statements.7.then_statements.8.then_statements.9.then_statements.10.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,787 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}, {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'Y')", 'then_statements': [{'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD <> 'Y')", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': "(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'statement': "TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');", 'type': 'unknown_statement', 'indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 9}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 12}]}]}, {'type': 'if_else', 'condition': '(V_MOLECULE_RG_NO IS NULL)', 'then_statements': [{'type': 'if_else', 'condition': "(V_COMPARATOR_IND = 'Y')", 'then_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.9.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.STATUS_DESC IS NOT NULL)', 'then_statements': [{'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_STATUS_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,788 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.10.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.DBA_DESC_CONCAT IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'type': 'select_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_DBA_CD', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.12.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':NEW.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [{'variable': 'V_TRADEMARK_NO', 'value': ':OLD.TRADEMARK_NO', 'type': 'assignment_statement', 'statement_indent': 6}], 'if_indent': 3}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.14.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 6}], 'else_if': [], 'else_statements': [], 'if_indent': 3}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE))", 'then_statements': [{'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'type': 'delete_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'sql_statement': 'RAISE DELETE_NO_MORE_POSSIBLE;', 'type': 'raise_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)", 'then_statements': [{'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)', 'then_statements': [{'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'type': 'insert_statement', 'statement_indent': 12}, {'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'type': 'select_statement', 'statement_indent': 12}, {'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 12}], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,789 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.3.when_clauses.1.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)', 'then_statements': [{'sql_statement': 'RAISE INVALID_THEME_NO;', 'type': 'raise_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.6.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.9.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.OFFICIAL_IND = 'N')", 'then_statements': [{'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.10.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'N')", 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)', 'then_statements': [{'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.11.if_else.if_else -- {'type': 'if_else', 'condition': "(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')", 'then_statements': [{'variable': 'V_DESCRIPTION', 'value': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' )", 'type': 'assignment_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(LENGTH(V_DESCRIPTION) > 90)', 'then_statements': [{'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'variable': 'V_DESCRIPTION', 'value': 'TRIM(V_DESCRIPTION)', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'Y'", 'type': 'assignment_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [{'variable': 'V_DESCRIPTION', 'value': ':NEW.THEME_DESC', 'type': 'assignment_statement', 'statement_indent': 9}, {'variable': 'V_PORTF_PROJ_CD', 'value': "'N'", 'type': 'assignment_statement', 'statement_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.14.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNTER > 0)', 'then_statements': [{'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'type': 'raise_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,790 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.16.begin_end_statements.if_else.else_if.0.1.then_statements.then_statements.0.then_statements.1.then_statements.19.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT = 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}, {'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'type': 'update_statement', 'statement_indent': 15}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'if_indent': 9}], 'if_indent': 6}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.17.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))", 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}, {'type': 'if_else', 'condition': '(V_EVOLVED_NMP_CNT > 0)', 'then_statements': [{'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'type': 'update_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NOT NULL)', 'then_statements': [{'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'type': 'select_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,791 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}
2025-08-14 10:23:32,792 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.18.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'begin_end', 'begin_end_statements': [{'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 15}], 'exception_handlers': [{'exception_name': 'NO_DATA_FOUND', 'exception_statements': [{'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'type': 'raise_statement', 'statement_indent': 18}]}]}], 'else_if': [], 'else_statements': [], 'if_indent': 9}, {'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'type': 'insert_statement', 'statement_indent': 9}], 'else_if': [], 'else_statements': [], 'if_indent': 6}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,797 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20}], 'case_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,798 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20}], 'case_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,799 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,800 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 8}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 8}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,801 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20}], 'case_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,803 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}, {'when_value': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}]}], 'else_statements': [{'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 20}], 'case_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,804 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.if_else -- {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, None, {'type': 'if_else', 'condition': '(UPDATING)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 8}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 8}, {'statement': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );', 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NULL)', 'then_statements': [{'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)', 'then_statements': [{'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))", 'then_statements': [{'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'type': 'select_statement', 'statement_indent': 12}, {'type': 'if_else', 'condition': '(V_COUNT_T_MOL_MAP > 0)', 'then_statements': [{'variable': 'INVALID_MAPPING_EXISTS', 'value': 'TRUE', 'type': 'assignment_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.0.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.4.if_else.then_statements.0.when_clauses.1.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}
2025-08-14 10:23:32,805 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID IS NOT NULL)', 'then_statements': [{'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)', 'then_statements': [{'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}, {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 24}], 'if_indent': 20}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 24}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 24}], 'if_indent': 20}], 'else_if': [], 'else_statements': [], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 16}, {'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.5.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'type': 'update_statement', 'statement_indent': 16}, {'type': 'if_else', 'condition': '(INVALID_MAPPING_EXISTS)', 'then_statements': [{'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'type': 'update_statement', 'statement_indent': 20}], 'else_if': [], 'else_statements': [{'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'type': 'insert_statement', 'statement_indent': 20}], 'if_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,806 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(V_SEQ_NO_DUPLICATE_CNT > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,811 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,812 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,813 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,814 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,816 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,816 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,817 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,818 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,818 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,818 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,818 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,819 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,820 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(INSERTING OR UPDATING)', 'then_statements': [{'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'type': 'select_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR > 0)', 'then_statements': [{'sql_statement': 'RAISE ERR_INS;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))", 'then_statements': [{'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.else_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,821 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'sql_statement': 'RAISE ERR_CTRY_CHG;', 'type': 'raise_statement', 'statement_indent': 16}], 'else_if': [], 'else_statements': [], 'if_indent': 12}, {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'type': 'if_else', 'condition': '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );", 'type': 'unknown_statement', 'indent': 20}, {'variable': 'CNTR', 'value': '0', 'type': 'assignment_statement', 'statement_indent': 20}, {'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'type': 'select_statement', 'statement_indent': 20}, {'type': 'if_else', 'condition': "(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)", 'then_statements': [{'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'type': 'select_statement', 'statement_indent': 24}, {'type': 'if_else', 'condition': "(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')", 'then_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'else_if': [], 'else_statements': [{'variable': 'V_VALID_FROM', 'value': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy')", 'type': 'assignment_statement', 'statement_indent': 28}], 'if_indent': 24}, {'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 24}, {'type': 'if_else', 'condition': "(V_COMPANY_TYPE_CD = 'L')", 'then_statements': [{'type': 'for_loop', 'loop_variable': 'V_REC', 'cursor_query': "(SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'loop_statements': [{'statement': "MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => V_REC.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 32}]}], 'else_if': [], 'else_statements': [], 'if_indent': 24}], 'else_if': [], 'else_statements': [], 'if_indent': 20}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 20}], 'if_indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,822 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}
2025-08-14 10:23:32,822 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.then_statements.3.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))", 'then_statements': [{'type': 'if_else', 'condition': '(CNTR = 0)', 'then_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );", 'type': 'unknown_statement', 'indent': 16}], 'else_if': [], 'else_statements': [{'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );", 'type': 'unknown_statement', 'indent': 16}], 'if_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,822 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,822 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(DELETING)', 'then_statements': [{'type': 'if_else', 'condition': "(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))", 'then_statements': [{'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'type': 'raise_statement', 'statement_indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}, {'statement': "MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'type': 'unknown_statement', 'indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,823 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.0.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'INSERT'", 'then_statements': [{'variable': 'V_ACTION', 'value': "'I'", 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,823 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.0.begin_end_statements.if_else.else_if.0.1.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'INSERT'", 'then_statements': [{'variable': 'V_ACTION', 'value': "'I'", 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,825 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.then_statements.0.if_else.if_else -- {'type': 'if_else', 'condition': "COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')", 'then_statements': [{'type': 'case_when', 'case_expression': '', 'when_clauses': [{'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}, {'when_value': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'type': 'update_statement', 'statement_indent': 20}]}], 'else_statements': [{'statement': 'NULL;', 'type': 'unknown_statement', 'indent': 20}], 'case_indent': 12}, {'statement': "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );", 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,827 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,827 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,827 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'variable': 'V_PROPOSAL_ID', 'value': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL', 'type': 'assignment_statement', 'statement_indent': 8}, {'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'type': 'insert_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL')", 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(:NEW.PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,828 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,829 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:118] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.if_else -- {'type': 'if_else', 'condition': '(INSERTING)', 'then_statements': [{'variable': 'V_PROPOSAL_ID', 'value': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL', 'type': 'assignment_statement', 'statement_indent': 8}, {'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'type': 'insert_statement', 'statement_indent': 8}, {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,830 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.if_else.if_else -- {'type': 'if_else', 'condition': "NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL')", 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(:NEW.PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:198] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.then_statements.0.then_statements.1.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.1.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.2.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)', 'then_statements': [{'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.3.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)', 'then_statements': [{'variable': 'V_EVOLVED_THEME_NO', 'value': 'NULL', 'type': 'assignment_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.4.begin_end_statements.if_else.if_else -- {'type': 'if_else', 'condition': '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)', 'then_statements': [{'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'type': 'raise_statement', 'statement_indent': 8}], 'else_if': [], 'else_statements': [], 'if_indent': 4}
2025-08-14 10:23:32,831 - root - DEBUG - [JSONTOPLJSON.py:279] - if_else_delete_path: main.begin_end_statements.5.begin_end_statements.if_else.else_if.0.then_statements.2.if_else.if_else -- {'type': 'if_else', 'condition': ':NEW.PARTNER_ID IS NOT NULL', 'then_statements': [{'statement': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'type': 'unknown_statement', 'indent': 12}], 'else_if': [], 'else_statements': [], 'if_indent': 8}
2025-08-14 10:23:32,832 - root - INFO - [common.py:73] - ✓ PL/JSON conversion complete! (Duration: 0.07 seconds)
2025-08-14 10:23:32,832 - root - INFO - [common.py:73] - === Batch conversion finished successfully ===
2025-08-14 10:23:32,833 - root - INFO - [common.py:73] - Total execution time: 0.41 seconds
2025-08-14 10:23:32,833 - root - INFO - [common.py:73] - Step breakdown:
2025-08-14 10:23:32,833 - root - INFO - [common.py:73] -   - SQL to JSON: 0.23 seconds
2025-08-14 10:23:32,833 - root - INFO - [common.py:73] -   - JSON to SQL: 0.09 seconds
2025-08-14 10:23:32,833 - root - INFO - [common.py:73] -   - Validation: 0.00 seconds
