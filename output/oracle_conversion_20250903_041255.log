2025-09-03 04:12:58,682 - root - INFO - [common.py:110] - === Starting JSON analysis to formatted Oracle SQL conversion ===
2025-09-03 04:12:58,682 - root - INFO - [common.py:110] - === Starting file processing ===
2025-09-03 04:12:58,683 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-09-03 04:12:58,683 - root - INFO - [common.py:110] - Target directory: 'files/format_sql'
2025-09-03 04:12:58,683 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-09-03 04:12:58,683 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-09-03 04:12:58,684 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Directory already exists: files/format_sql
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Found 10 files in source directory
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['bbb_analysis.json', 'eee_analysis.json', 'trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - === Processing file 1/10: bbb_analysis.json ===
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Source path: files/format_json\bbb_analysis.json
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Output path: files/format_sql\bbb_analysis.sql
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger bbb_analysis.json ===
2025-09-03 04:12:58,685 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\bbb_analysis.json
2025-09-03 04:12:58,686 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,686 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,686 - root - DEBUG - [common.py:105] - JSON contains 31 total statements
2025-09-03 04:12:58,686 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,686 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,686 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,705 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,705 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,718 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 3 exceptions
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 6 variables
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 3 exceptions
2025-09-03 04:12:58,719 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Generated 10 lines of declarations
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,719 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 statements in main block
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 6
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_PATTERN', 'assignment_operator': ':=', 'expression': ':NEW.PATTERN;', 'assignment_line_no': 16, 'assignment_indent': 4}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 19, 'case_indent': 4, 'end_case_line_no': 33, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 20, 'when_indent': 8, 'condition': 'V_PATTERN IS NOT NULL', 'then_line_no': 20, 'then_statements': [{'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_line_no': 21, 'then_line_no': 21, 'if_indent': 12, 'end_if_line_no': 23, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_line_no': 22, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_line_no': 26, 'then_line_no': 26, 'if_indent': 12, 'end_if_line_no': 28, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 27, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 12, 'end_if_line_no': 32, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 31, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.RULE_FLAG = 'N' ", 'type': 'if_else', 'if_line_no': 21, 'then_line_no': 21, 'if_indent': 12, 'end_if_line_no': 23, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_line_no': 22, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NULL;', 'statement_line_no': 22, 'statement_indent': 16}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' NOT OWA_PATTERN.MATCH (V_PATTERN, V_ALLOWED_PATTERN) ', 'type': 'if_else', 'if_line_no': 26, 'then_line_no': 26, 'if_indent': 12, 'end_if_line_no': 28, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 27, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 27, 'statement_indent': 16}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.RULE_FLAG = 'M' ", 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 12, 'end_if_line_no': 32, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 31, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_POSTAL_CODE;', 'statement_line_no': 31, 'statement_indent': 16}
2025-09-03 04:12:58,720 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM V_BPA_POSTAL_CODE_RULES WHERE COUNTRY_CD = :NEW.COUNTRY_CD;', 'statement_line_no': 37, 'statement_indent': 4}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 4, 'end_if_line_no': 59, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_line_no': 44, 'statement_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_line_no': 48, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (RULE_ID) + 1, 1) INTO V_RULE_ID FROM V_BPA_POSTAL_CODE_RULES;', 'statement_line_no': 44, 'statement_indent': 8}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_RULES ( RULE_ID, COUNTRY_CD, RULE_FLAG ) VALUES ( V_RULE_ID, UPPER (:NEW.COUNTRY_CD), :NEW.RULE_FLAG );', 'statement_line_no': 48, 'statement_indent': 8}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT NVL (MAX (PATTERN_ID) + 1, 1) INTO V_PATTERN_ID FROM V_BPA_POSTAL_CODE_PATTERNS;', 'statement_line_no': 63, 'statement_indent': 4}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' INSERTING AND V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_line_no': 67, 'then_line_no': 67, 'if_indent': 4, 'end_if_line_no': 124, 'then_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_line_no': 68, 'statement_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 81, 'elif_indent': 4, 'condition': 'UPDATING', 'then_line_no': 81, 'then_statements': [{'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_line_no': 82, 'then_line_no': 82, 'if_indent': 8, 'end_if_line_no': 88, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_line_no': 83, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 8, 'end_if_line_no': 119, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_line_no': 91, 'then_line_no': 91, 'if_indent': 12, 'end_if_line_no': 104, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_line_no': 92, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]}, {'type': 'elif_statement', 'elif_line_no': 120, 'elif_indent': 4, 'condition': 'DELETING', 'then_line_no': 120, 'then_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM GMD.V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :OLD.PATTERN_ID;', 'statement_line_no': 121, 'statement_indent': 8}]}], 'else_statements': []}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_BPA_POSTAL_CODE_PATTERNS ( PATTERN_ID, RULE_ID, PATTERN, DESCRIPTION, VALID_IND ) VALUES ( V_PATTERN_ID, V_RULE_ID, V_PATTERN, :NEW.DESCRIPTION, :NEW.VALID_IND );', 'statement_line_no': 68, 'statement_indent': 8}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' :OLD.RULE_FLAG != :NEW.RULE_FLAG ', 'type': 'if_else', 'if_line_no': 82, 'then_line_no': 82, 'if_indent': 8, 'end_if_line_no': 88, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_line_no': 83, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_RULES SET RULE_FLAG = :NEW.RULE_FLAG WHERE RULE_ID = V_RULE_ID;', 'statement_line_no': 83, 'statement_indent': 12}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' :NEW.PATTERN_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 8, 'end_if_line_no': 119, 'then_statements': [{'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_line_no': 91, 'then_line_no': 91, 'if_indent': 12, 'end_if_line_no': 104, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_line_no': 92, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,721 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' V_PATTERN IS NOT NULL ', 'type': 'if_else', 'if_line_no': 91, 'then_line_no': 91, 'if_indent': 12, 'end_if_line_no': 104, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_line_no': 92, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE V_BPA_POSTAL_CODE_PATTERNS SET PATTERN = V_PATTERN, DESCRIPTION = :NEW.DESCRIPTION, VALID_IND = :NEW.VALID_IND WHERE PATTERN_ID = :NEW.PATTERN_ID;', 'statement_line_no': 92, 'statement_indent': 16}
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'delete_statement', 'sql_statement': 'DELETE FROM GMD.V_BPA_POSTAL_CODE_PATTERNS WHERE PATTERN_ID = :OLD.PATTERN_ID;', 'statement_line_no': 121, 'statement_indent': 8}
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: delete_statement
2025-09-03 04:12:58,722 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Generated 36 lines in main execution block
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Final SQL contains 46 lines, 1957 characters
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Oracle SQL generation: 46 lines generated in 0.003s
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Rendered SQL length: 1957 characters
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-03 04:12:58,722 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\bbb_analysis.sql
2025-09-03 04:12:58,723 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\bbb_analysis.sql
2025-09-03 04:12:58,723 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger bbb_analysis.json ===
2025-09-03 04:12:58,723 - root - DEBUG - [common.py:105] - ✓ Created bbb_analysis.sql
2025-09-03 04:12:58,723 - root - DEBUG - [common.py:105] - === Processing file 2/10: eee_analysis.json ===
2025-09-03 04:12:58,723 - root - DEBUG - [common.py:105] - Source path: files/format_json\eee_analysis.json
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - Output path: files/format_sql\eee_analysis.sql
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger eee_analysis.json ===
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\eee_analysis.json
2025-09-03 04:12:58,724 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - JSON contains 7 total statements
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,724 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,740 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,740 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Analysis contains 0 variables, 0 constants, 0 exceptions
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,753 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,753 - root - DEBUG - [common.py:105] - Generated 1 lines of declarations
2025-09-03 04:12:58,754 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,754 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 statements in main block
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 4
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 4, 'line': 'DECLARE', 'line_no': 5, 'filename': 'eee.sql'}
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 4, 'line': 'DECLARE', 'line_no': 5, 'filename': 'eee.sql'}
2025-09-03 04:12:58,754 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'v_outer_counter NUMBER', 'assignment_operator': ':=', 'expression': '1;', 'assignment_line_no': 6, 'assignment_indent': 8}
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 8, 'line': 'v_inner_counter NUMBER;', 'line_no': 7, 'filename': 'eee.sql'}
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,754 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 8, 'line': 'v_inner_counter NUMBER;', 'line_no': 7, 'filename': 'eee.sql'}
2025-09-03 04:12:58,754 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 8, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '<<outer_loop>>', 'line_no': 10, 'filename': 'eee.sql'}, {'indent': 8, 'line': 'LOOP', 'line_no': 11, 'filename': 'eee.sql'}, {'type': 'assignment', 'variable_name': 'v_inner_counter', 'assignment_operator': ':=', 'expression': '1;', 'assignment_line_no': 12, 'assignment_indent': 12}, {'indent': 12, 'line': '<<inner_loop>>', 'line_no': 14, 'filename': 'eee.sql'}, {'indent': 12, 'line': 'LOOP', 'line_no': 15, 'filename': 'eee.sql'}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO sales_analytics VALUES (:NEW.order_id, v_outer_counter, v_inner_counter, SYSDATE);', 'statement_line_no': 16, 'statement_indent': 16}, {'type': 'assignment', 'variable_name': 'v_inner_counter', 'assignment_operator': ':=', 'expression': 'v_inner_counter + 1;', 'assignment_line_no': 19, 'assignment_indent': 16}, {'indent': 16, 'line': 'EXIT inner_loop WHEN v_inner_counter > 3;', 'line_no': 20, 'filename': 'eee.sql'}, {'indent': 12, 'line': 'END LOOP inner_loop;', 'line_no': 21, 'filename': 'eee.sql'}, {'type': 'assignment', 'variable_name': 'v_outer_counter', 'assignment_operator': ':=', 'expression': 'v_outer_counter + 1;', 'assignment_line_no': 23, 'assignment_indent': 12}, {'indent': 12, 'line': 'EXIT outer_loop WHEN v_outer_counter > 5;', 'line_no': 24, 'filename': 'eee.sql'}, {'indent': 8, 'line': 'END LOOP outer_loop;', 'line_no': 25, 'filename': 'eee.sql'}], 'exception_handlers': [], 'exception_line_no': -1, 'end_line_no': 26}
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 12 statements in main block
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 12
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 8, 'line': '<<outer_loop>>', 'line_no': 10, 'filename': 'eee.sql'}
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 8, 'line': '<<outer_loop>>', 'line_no': 10, 'filename': 'eee.sql'}
2025-09-03 04:12:58,755 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 8, 'line': 'LOOP', 'line_no': 11, 'filename': 'eee.sql'}
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,755 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 8, 'line': 'LOOP', 'line_no': 11, 'filename': 'eee.sql'}
2025-09-03 04:12:58,755 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'v_inner_counter', 'assignment_operator': ':=', 'expression': '1;', 'assignment_line_no': 12, 'assignment_indent': 12}
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': '<<inner_loop>>', 'line_no': 14, 'filename': 'eee.sql'}
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': '<<inner_loop>>', 'line_no': 14, 'filename': 'eee.sql'}
2025-09-03 04:12:58,756 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': 'LOOP', 'line_no': 15, 'filename': 'eee.sql'}
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': 'LOOP', 'line_no': 15, 'filename': 'eee.sql'}
2025-09-03 04:12:58,756 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': 'INSERT INTO sales_analytics VALUES (:NEW.order_id, v_outer_counter, v_inner_counter, SYSDATE);', 'statement_line_no': 16, 'statement_indent': 16}
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,756 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'v_inner_counter', 'assignment_operator': ':=', 'expression': 'v_inner_counter + 1;', 'assignment_line_no': 19, 'assignment_indent': 16}
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 16, 'line': 'EXIT inner_loop WHEN v_inner_counter > 3;', 'line_no': 20, 'filename': 'eee.sql'}
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 16, 'line': 'EXIT inner_loop WHEN v_inner_counter > 3;', 'line_no': 20, 'filename': 'eee.sql'}
2025-09-03 04:12:58,757 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': 'END LOOP inner_loop;', 'line_no': 21, 'filename': 'eee.sql'}
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,757 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': 'END LOOP inner_loop;', 'line_no': 21, 'filename': 'eee.sql'}
2025-09-03 04:12:58,757 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'v_outer_counter', 'assignment_operator': ':=', 'expression': 'v_outer_counter + 1;', 'assignment_line_no': 23, 'assignment_indent': 12}
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': 'EXIT outer_loop WHEN v_outer_counter > 5;', 'line_no': 24, 'filename': 'eee.sql'}
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': 'EXIT outer_loop WHEN v_outer_counter > 5;', 'line_no': 24, 'filename': 'eee.sql'}
2025-09-03 04:12:58,758 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 8, 'line': 'END LOOP outer_loop;', 'line_no': 25, 'filename': 'eee.sql'}
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 8, 'line': 'END LOOP outer_loop;', 'line_no': 25, 'filename': 'eee.sql'}
2025-09-03 04:12:58,758 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:58,758 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,759 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Generated 17 lines in main execution block
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Main block rendering took 0.005s
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Final SQL contains 18 lines, 648 characters
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Oracle SQL generation: 18 lines generated in 0.006s
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Rendered SQL length: 648 characters
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - SQL rendering took: 0.006 seconds
2025-09-03 04:12:58,759 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\eee_analysis.sql
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\eee_analysis.sql
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger eee_analysis.json ===
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - ✓ Created eee_analysis.sql
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - === Processing file 3/10: trigger1_analysis.json ===
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-09-03 04:12:58,760 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger1_analysis.sql
2025-09-03 04:12:58,761 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger1_analysis.json ===
2025-09-03 04:12:58,761 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-09-03 04:12:58,761 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,761 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,762 - root - DEBUG - [common.py:105] - JSON contains 168 total statements
2025-09-03 04:12:58,762 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,762 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,762 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,776 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,776 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 29 variables
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:368] - Rendering 2 constants
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 18 exceptions
2025-09-03 04:12:58,786 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Generated 50 lines of declarations
2025-09-03 04:12:58,786 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,787 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 20 statements in main block
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 20
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_line_no': 54, 'statement_indent': 3}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_line_no': 61, 'statement_indent': 3}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_line_no': 70, 'statement_indent': 3}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 95, 'then_line_no': 96, 'if_indent': 3, 'end_if_line_no': 111, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,787 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 115, 'then_line_no': 115, 'if_indent': 3, 'end_if_line_no': 145, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 128, 'statement_indent': 12}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 128, 'statement_indent': 12}]}], 'exception_line_no': 126, 'end_line_no': 129}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}
2025-09-03 04:12:58,788 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_line_no': 150, 'assignment_indent': 3}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_line_no': 151, 'assignment_indent': 3}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_line_no': 152, 'assignment_indent': 3}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_line_no': 153, 'assignment_indent': 3}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 154, 'then_line_no': 154, 'if_indent': 3, 'end_if_line_no': 163, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_line_no': 155, 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_line_no': 155, 'statement_indent': 6}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 165, 'then_line_no': 165, 'if_indent': 3, 'end_if_line_no': 176, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_line_no': 166, 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,789 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_line_no': 166, 'statement_indent': 6}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_line_no': 178, 'assignment_indent': 3}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 179, 'then_line_no': 179, 'if_indent': 3, 'end_if_line_no': 183, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_line_no': 180, 'assignment_indent': 6}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_line_no': 180, 'assignment_indent': 6}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_line_no': 185, 'assignment_indent': 3}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_line_no': 186, 'then_line_no': 187, 'if_indent': 3, 'end_if_line_no': 189, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_line_no': 188, 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_line_no': 188, 'statement_indent': 6}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_line_no': 191, 'assignment_indent': 3}
2025-09-03 04:12:58,790 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 192, 'then_line_no': 192, 'if_indent': 3, 'end_if_line_no': 656, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_line_no': 201, 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 278, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 281, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 302, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 303, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 346, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_line_no': 347, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 357, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_line_no': 358, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_line_no': 359, 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_line_no': 360, 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 432, 'elif_indent': 3, 'condition': '(UPDATING)', 'then_line_no': 432, 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 493, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_line_no': 494, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 505, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}]}]}, {'type': 'elif_statement', 'elif_line_no': 638, 'elif_indent': 3, 'condition': '(DELETING)', 'then_line_no': 638, 'then_statements': [{'condition': " ((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 639, 'then_line_no': 640, 'if_indent': 6, 'end_if_line_no': 642, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 641, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE)) ", 'type': 'if_else', 'if_line_no': 648, 'then_line_no': 648, 'if_indent': 6, 'end_if_line_no': 655, 'then_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'statement_line_no': 649, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': []}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_line_no': 201, 'assignment_indent': 6}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}]}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}
2025-09-03 04:12:58,791 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 278, 'assignment_indent': 6}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 281, 'statement_indent': 6}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 302, 'assignment_indent': 6}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 303, 'assignment_indent': 6}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,792 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 346, 'assignment_indent': 6}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_line_no': 347, 'statement_indent': 6}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 357, 'assignment_indent': 6}
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,793 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_line_no': 358, 'assignment_indent': 6}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_line_no': 359, 'assignment_indent': 6}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_line_no': 360, 'statement_indent': 6}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}
2025-09-03 04:12:58,794 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 493, 'assignment_indent': 6}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_line_no': 494, 'statement_indent': 6}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 505, 'assignment_indent': 6}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}]}
2025-09-03 04:12:58,795 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " ((:OLD.IN_PREP_IND = 'N') AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 639, 'then_line_no': 640, 'if_indent': 6, 'end_if_line_no': 642, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 641, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 641, 'statement_indent': 9}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE)) ", 'type': 'if_else', 'if_line_no': 648, 'then_line_no': 648, 'if_indent': 6, 'end_if_line_no': 655, 'then_statements': [{'type': 'delete_statement', 'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'statement_line_no': 649, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'delete_statement', 'sql_statement': 'DELETE FROM GMD.THEMES A WHERE A.THEME_NO = :OLD.THEME_NO AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'statement_line_no': 649, 'statement_indent': 9}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: delete_statement
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 660, 'then_line_no': 661, 'if_indent': 3, 'end_if_line_no': 747, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,796 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}
2025-09-03 04:12:58,797 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_line_no': 751, 'then_line_no': 753, 'if_indent': 3, 'end_if_line_no': 803, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,798 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 805, 'begin_indent': 3, 'begin_end_statements': [{'for_expression': '( FOR I1 IN ( SELECT A.THEME_NO, A.REGISTRAT_DATE FROM V_THEMES A WHERE A.VALID_TO <= TRUNC(SYSDATE) )', 'type': 'for_loop', 'for_line_no': 809, 'for_indent': 6, 'end_for_line_no': 822, 'loop_variable': 'I1', 'for_statements': []}], 'exception_handlers': [], 'exception_line_no': -1, 'end_line_no': 823}
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'for_expression': '( FOR I1 IN ( SELECT A.THEME_NO, A.REGISTRAT_DATE FROM V_THEMES A WHERE A.VALID_TO <= TRUNC(SYSDATE) )', 'type': 'for_loop', 'for_line_no': 809, 'for_indent': 6, 'end_for_line_no': 822, 'loop_variable': 'I1', 'for_statements': []}
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: for_loop
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,799 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - Generated 175 lines in main execution block
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - Main block rendering took 0.013s
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - Final SQL contains 225 lines, 14200 characters
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - Oracle SQL generation: 225 lines generated in 0.013s
2025-09-03 04:12:58,799 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,800 - root - DEBUG - [common.py:105] - Rendered SQL length: 14200 characters
2025-09-03 04:12:58,800 - root - DEBUG - [common.py:105] - SQL rendering took: 0.013 seconds
2025-09-03 04:12:58,800 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger1_analysis.sql
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger1_analysis.sql
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger1_analysis.json ===
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - ✓ Created trigger1_analysis.sql
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - === Processing file 4/10: trigger2_analysis.json ===
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger2_analysis.sql
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger2_analysis.json ===
2025-09-03 04:12:58,801 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-09-03 04:12:58,802 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,802 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,802 - root - DEBUG - [common.py:105] - JSON contains 63 total statements
2025-09-03 04:12:58,802 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,802 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,802 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,820 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,821 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 6 variables
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 7 exceptions
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Generated 14 lines of declarations
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,835 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,835 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 5 statements in main block
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 5
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_line_no': 21, 'statement_indent': 4}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 27, 'then_line_no': 27, 'if_indent': 4, 'end_if_line_no': 58, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 33, 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 41, 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 33, 'statement_indent': 8}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 41, 'statement_indent': 8}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 60, 'then_line_no': 60, 'if_indent': 4, 'end_if_line_no': 401, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 61, 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 61, 'statement_indent': 8}
2025-09-03 04:12:58,836 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}
2025-09-03 04:12:58,837 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,838 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,839 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,840 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}
2025-09-03 04:12:58,840 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,840 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}
2025-09-03 04:12:58,841 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_line_no': 403, 'statement_indent': 4}
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_line_no': 419, 'then_line_no': 419, 'if_indent': 4, 'end_if_line_no': 421, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_line_no': 420, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_line_no': 420, 'statement_indent': 8}
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,842 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Generated 78 lines in main execution block
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Main block rendering took 0.007s
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Final SQL contains 92 lines, 6210 characters
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Oracle SQL generation: 92 lines generated in 0.007s
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Rendered SQL length: 6210 characters
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - SQL rendering took: 0.007 seconds
2025-09-03 04:12:58,842 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger2_analysis.sql
2025-09-03 04:12:58,843 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger2_analysis.sql
2025-09-03 04:12:58,843 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger2_analysis.json ===
2025-09-03 04:12:58,843 - root - DEBUG - [common.py:105] - ✓ Created trigger2_analysis.sql
2025-09-03 04:12:58,843 - root - DEBUG - [common.py:105] - === Processing file 5/10: trigger3_analysis.json ===
2025-09-03 04:12:58,843 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-09-03 04:12:58,844 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger3_analysis.sql
2025-09-03 04:12:58,844 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger3_analysis.json ===
2025-09-03 04:12:58,844 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-09-03 04:12:58,844 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,844 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,845 - root - DEBUG - [common.py:105] - JSON contains 38 total statements
2025-09-03 04:12:58,845 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,845 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,845 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,858 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,858 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,868 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,868 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,868 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 6 variables
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 6 exceptions
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Generated 13 lines of declarations
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,869 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 statements in main block
2025-09-03 04:12:58,869 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 6
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}]}], 'exception_line_no': 17, 'end_line_no': 20}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 22, 'assignment_indent': 4}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_line_no': 23, 'statement_indent': 4}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,870 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,871 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,872 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Generated 35 lines in main execution block
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Main block rendering took 0.003s
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Final SQL contains 48 lines, 3093 characters
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Oracle SQL generation: 48 lines generated in 0.004s
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Rendered SQL length: 3093 characters
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - SQL rendering took: 0.004 seconds
2025-09-03 04:12:58,872 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger3_analysis.sql
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger3_analysis.sql
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger3_analysis.json ===
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - ✓ Created trigger3_analysis.sql
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - === Processing file 6/10: trigger4_analysis.json ===
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger4_analysis.sql
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger4_analysis.json ===
2025-09-03 04:12:58,873 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-09-03 04:12:58,874 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,874 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,874 - root - DEBUG - [common.py:105] - JSON contains 12 total statements
2025-09-03 04:12:58,874 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,874 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,874 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,887 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,888 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,896 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 6 variables
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Generated 7 lines of declarations
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,897 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 statements in main block
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 6
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_line_no': 10, 'then_line_no': 10, 'if_indent': 4, 'end_if_line_no': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_line_no': 11, 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 12, 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_line_no': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_line_no': 13, 'assignment_indent': 8}]}, {'type': 'elif_statement', 'elif_line_no': 14, 'elif_indent': 4, 'condition': "TG_OP = 'DELETE'", 'then_line_no': 14, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'D';", 'assignment_line_no': 15, 'assignment_indent': 8}]}], 'else_statements': []}
2025-09-03 04:12:58,897 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_line_no': 11, 'assignment_indent': 8}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_line_no': 13, 'assignment_indent': 8}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'D';", 'assignment_line_no': 15, 'assignment_indent': 8}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_line_no': 18, 'assignment_indent': 4}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 19, 'assignment_indent': 4}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 20, 'assignment_indent': 4}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'PERFORM MDMTOOL."mdmt_util_history$write_history"', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_ACTION', 'V_TABLE_NAME', 'V_SCHEMA_NAME', 'COL_NAMES', 'COL_NEW_VALUES', 'COL_OLD_VALUES'], 'named_params': {}, 'raw_text': 'V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES'}}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 22, 'statement_indent': 4}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: return_statement
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:536] - {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 22, 'statement_indent': 4}
2025-09-03 04:12:58,898 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,898 - root - DEBUG - [common.py:105] - Generated 14 lines in main execution block
2025-09-03 04:12:58,898 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Final SQL contains 21 lines, 3999 characters
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Oracle SQL generation: 21 lines generated in 0.002s
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Rendered SQL length: 3999 characters
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger4_analysis.sql
2025-09-03 04:12:58,899 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger4_analysis.sql
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger4_analysis.json ===
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - ✓ Created trigger4_analysis.sql
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - === Processing file 7/10: trigger5_analysis.json ===
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger5_analysis.sql
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger5_analysis.json ===
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-09-03 04:12:58,900 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,900 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,901 - root - DEBUG - [common.py:105] - JSON contains 13 total statements
2025-09-03 04:12:58,901 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,901 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,901 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,913 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,913 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,926 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,926 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 2 variables
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,927 - root - DEBUG - [common.py:105] - Generated 3 lines of declarations
2025-09-03 04:12:58,927 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,927 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 statements in main block
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 4
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_line_no': 5, 'assignment_indent': 4}
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_line_no': 6, 'assignment_indent': 4}
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_line_no': 7, 'then_line_no': 7, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,927 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}, {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_PRODUCT_FAMILY_CD': 'NEW.PRODUCT_FAMILY_CD::TEXT', 'P_REGISTRAR': 'V_USERID::TEXT', 'P_TRG_TABLE': "'PRODUCT_FAMILIES'::TEXT", 'P_TRG_UPD_DATE': 'V_TRG_UPD_DATE_STR::TEXT'}, 'raw_text': "P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT"}}
2025-09-03 04:12:58,928 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 35, 'statement_indent': 4}
2025-09-03 04:12:58,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: return_statement
2025-09-03 04:12:58,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:536] - {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 35, 'statement_indent': 4}
2025-09-03 04:12:58,929 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Generated 18 lines in main execution block
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Final SQL contains 21 lines, 1137 characters
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Oracle SQL generation: 21 lines generated in 0.003s
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - Rendered SQL length: 1137 characters
2025-09-03 04:12:58,929 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-03 04:12:58,930 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger5_analysis.sql
2025-09-03 04:12:58,930 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger5_analysis.sql
2025-09-03 04:12:58,930 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger5_analysis.json ===
2025-09-03 04:12:58,930 - root - DEBUG - [common.py:105] - ✓ Created trigger5_analysis.sql
2025-09-03 04:12:58,931 - root - DEBUG - [common.py:105] - === Processing file 8/10: trigger6_analysis.json ===
2025-09-03 04:12:58,931 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-09-03 04:12:58,931 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger6_analysis.sql
2025-09-03 04:12:58,931 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger6_analysis.json ===
2025-09-03 04:12:58,931 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-09-03 04:12:58,931 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,932 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,932 - root - DEBUG - [common.py:105] - JSON contains 27 total statements
2025-09-03 04:12:58,932 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,932 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,932 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,945 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,945 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,957 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 6 variables
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 4 exceptions
2025-09-03 04:12:58,958 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,958 - root - DEBUG - [common.py:105] - Generated 11 lines of declarations
2025-09-03 04:12:58,959 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,959 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 6 statements in main block
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 6
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_line_no': 13, 'assignment_indent': 4}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 4, 'end_if_line_no': 20, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_line_no': 19, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_line_no': 19, 'statement_indent': 8}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_line_no': 24, 'then_line_no': 24, 'if_indent': 4, 'end_if_line_no': 26, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_line_no': 25, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_line_no': 25, 'statement_indent': 8}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 32, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 31, 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,959 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 31, 'assignment_indent': 8}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 38, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_line_no': 37, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_line_no': 37, 'statement_indent': 8}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 40, 'then_line_no': 40, 'if_indent': 4, 'end_if_line_no': 79, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_line_no': 41, 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_line_no': 42, 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 64, 'elif_indent': 4, 'condition': '(UPDATING)', 'then_line_no': 64, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_NEW_MEDICINE_PROPOSALS SET EXPLORATORY_THEME_NO = :NEW.EXPLORATORY_THEME_NO, PROPOSAL_NAME = :NEW.PROPOSAL_NAME, PROPOSAL_STATUS_CD = :NEW.PROPOSAL_STATUS_CD, EVOLVED_THEME_NO = V_EVOLVED_THEME_NO, MOLECULE_TYPE_ID = :NEW.MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID = :NEW.PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID = :NEW.FIREWALL_ID WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'statement_line_no': 65, 'statement_indent': 8}, {'condition': " NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL') ", 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 8, 'end_if_line_no': 78, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': ':NEW.PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': []}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_line_no': 41, 'assignment_indent': 8}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_line_no': 42, 'statement_indent': 8}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: insert_statement
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE V_NEW_MEDICINE_PROPOSALS SET EXPLORATORY_THEME_NO = :NEW.EXPLORATORY_THEME_NO, PROPOSAL_NAME = :NEW.PROPOSAL_NAME, PROPOSAL_STATUS_CD = :NEW.PROPOSAL_STATUS_CD, EVOLVED_THEME_NO = V_EVOLVED_THEME_NO, MOLECULE_TYPE_ID = :NEW.MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID = :NEW.PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID = :NEW.FIREWALL_ID WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'statement_line_no': 65, 'statement_indent': 8}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL') ", 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 8, 'end_if_line_no': 78, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': ':NEW.PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': ':NEW.PROPOSAL_ID, :NEW.PARTNER_ID'}}
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,960 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Generated 27 lines in main execution block
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Final SQL contains 38 lines, 2582 characters
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Oracle SQL generation: 38 lines generated in 0.003s
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Rendered SQL length: 2582 characters
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-09-03 04:12:58,961 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger6_analysis.sql
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger6_analysis.sql
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger6_analysis.json ===
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - ✓ Created trigger6_analysis.sql
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - === Processing file 9/10: yyy_analysis.json ===
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - Output path: files/format_sql\yyy_analysis.sql
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger yyy_analysis.json ===
2025-09-03 04:12:58,962 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-09-03 04:12:58,963 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,963 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,963 - root - DEBUG - [common.py:105] - JSON contains 91 total statements
2025-09-03 04:12:58,963 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,963 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,963 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,978 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:58,979 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:58,988 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 9 variables
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:368] - Rendering 1 constants
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 11 exceptions
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Generated 22 lines of declarations
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:58,989 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 4 statements in main block
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 4
2025-09-03 04:12:58,989 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'begin_end', 'begin_line_no': 24, 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 25, 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 27, 'when_indent': 8, 'then_line_no': 27, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 28, 'assignment_indent': 12}]}], 'exception_line_no': 26, 'end_line_no': 29}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: begin_end
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 25, 'assignment_indent': 8}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_line_no': 32, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_line_no': 32, 'statement_indent': 8}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 35, 'then_line_no': 35, 'if_indent': 4, 'end_if_line_no': 48, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 36, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_line_no': 39, 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 36, 'assignment_indent': 8}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_line_no': 39, 'statement_indent': 8}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}
2025-09-03 04:12:58,990 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 50, 'then_line_no': 50, 'if_indent': 4, 'end_if_line_no': 344, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 61, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_line_no': 62, 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 76, 'if_indent': 8, 'end_if_line_no': 78, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 77, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_line_no': 129, 'case_indent': 8, 'end_case_line_no': 159, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 130, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 140, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 141, 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_line_no': 142, 'case_indent': 16, 'end_case_line_no': 149, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 143, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 145, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 146, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 148, 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 158, 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 161, 'then_line_no': 161, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 162, 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 165, 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 173, 'then_line_no': 173, 'if_indent': 12, 'end_if_line_no': 183, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 174, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 182, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 187, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 200, 'then_line_no': 200, 'if_indent': 8, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 201, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 215, 'then_line_no': 215, 'if_indent': 8, 'end_if_line_no': 217, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 216, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 221, 'then_line_no': 221, 'if_indent': 8, 'end_if_line_no': 223, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 222, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 227, 'then_line_no': 227, 'if_indent': 8, 'end_if_line_no': 229, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 228, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 233, 'then_line_no': 233, 'if_indent': 8, 'end_if_line_no': 237, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 234, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 241, 'if_indent': 8, 'end_if_line_no': 325, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 242, 'then_line_no': 244, 'if_indent': 12, 'end_if_line_no': 305, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 245, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 253, 'then_line_no': 253, 'if_indent': 16, 'end_if_line_no': 255, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 254, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 257, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 260, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 267, 'then_line_no': 267, 'if_indent': 16, 'end_if_line_no': 269, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 268, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 271, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 282, 'then_line_no': 282, 'if_indent': 16, 'end_if_line_no': 284, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 283, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 307, 'then_line_no': 307, 'if_indent': 12, 'end_if_line_no': 324, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 329, 'case_indent': 8, 'end_case_line_no': 341, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 330, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 333, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 340, 'statement_indent': 16}]}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 342, 'elif_indent': 4, 'condition': 'DELETING', 'then_line_no': 342, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DEL;', 'statement_line_no': 343, 'statement_indent': 8}]}], 'else_statements': []}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 61, 'assignment_indent': 8}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_line_no': 62, 'statement_indent': 8}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 76, 'if_indent': 8, 'end_if_line_no': 78, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 77, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 77, 'statement_indent': 12}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 129, 'case_indent': 8, 'end_case_line_no': 159, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 130, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 140, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 141, 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_line_no': 142, 'case_indent': 16, 'end_case_line_no': 149, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 143, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 145, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 146, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 148, 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 158, 'statement_indent': 16}]}
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,991 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 141, 'assignment_indent': 16}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 142, 'case_indent': 16, 'end_case_line_no': 149, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 143, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 145, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 146, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 148, 'statement_indent': 24}]}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 146, 'statement_indent': 24}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 148, 'statement_indent': 24}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 158, 'statement_indent': 16}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 161, 'then_line_no': 161, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 162, 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 165, 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 173, 'then_line_no': 173, 'if_indent': 12, 'end_if_line_no': 183, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 174, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 182, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 187, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 162, 'assignment_indent': 12}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 165, 'statement_indent': 12}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 173, 'then_line_no': 173, 'if_indent': 12, 'end_if_line_no': 183, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 174, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 182, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 174, 'statement_indent': 16}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 182, 'statement_indent': 16}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 187, 'statement_indent': 12}
2025-09-03 04:12:58,992 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 200, 'then_line_no': 200, 'if_indent': 8, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 201, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 201, 'statement_indent': 12}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: update_statement
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 215, 'then_line_no': 215, 'if_indent': 8, 'end_if_line_no': 217, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 216, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 216, 'statement_indent': 12}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 221, 'then_line_no': 221, 'if_indent': 8, 'end_if_line_no': 223, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 222, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 222, 'statement_indent': 12}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 227, 'then_line_no': 227, 'if_indent': 8, 'end_if_line_no': 229, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 228, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 228, 'statement_indent': 12}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 233, 'then_line_no': 233, 'if_indent': 8, 'end_if_line_no': 237, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 234, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 234, 'assignment_indent': 12}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 241, 'if_indent': 8, 'end_if_line_no': 325, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 242, 'then_line_no': 244, 'if_indent': 12, 'end_if_line_no': 305, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 245, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 253, 'then_line_no': 253, 'if_indent': 16, 'end_if_line_no': 255, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 254, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 257, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 260, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 267, 'then_line_no': 267, 'if_indent': 16, 'end_if_line_no': 269, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 268, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 271, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 282, 'then_line_no': 282, 'if_indent': 16, 'end_if_line_no': 284, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 283, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 307, 'then_line_no': 307, 'if_indent': 12, 'end_if_line_no': 324, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,993 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 242, 'then_line_no': 244, 'if_indent': 12, 'end_if_line_no': 305, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 245, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 253, 'then_line_no': 253, 'if_indent': 16, 'end_if_line_no': 255, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 254, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 257, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 260, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 267, 'then_line_no': 267, 'if_indent': 16, 'end_if_line_no': 269, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 268, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 271, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 282, 'then_line_no': 282, 'if_indent': 16, 'end_if_line_no': 284, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 283, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 245, 'statement_indent': 16}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 253, 'then_line_no': 253, 'if_indent': 16, 'end_if_line_no': 255, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 254, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 254, 'statement_indent': 20}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 257, 'assignment_indent': 16}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 260, 'statement_indent': 16}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 267, 'then_line_no': 267, 'if_indent': 16, 'end_if_line_no': 269, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 268, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 268, 'statement_indent': 20}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 271, 'statement_indent': 16}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 282, 'then_line_no': 282, 'if_indent': 16, 'end_if_line_no': 284, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 283, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 283, 'assignment_indent': 20}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,994 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 307, 'then_line_no': 307, 'if_indent': 12, 'end_if_line_no': 324, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': '', 'type': 'case_when', 'case_line_no': 329, 'case_indent': 8, 'end_case_line_no': 341, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 330, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 333, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 340, 'statement_indent': 16}]}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: case_when
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 340, 'statement_indent': 16}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: null_statement
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DEL;', 'statement_line_no': 343, 'statement_indent': 8}
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:58,995 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:58,995 - root - DEBUG - [common.py:105] - Generated 92 lines in main execution block
2025-09-03 04:12:58,995 - root - DEBUG - [common.py:105] - Main block rendering took 0.006s
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - Final SQL contains 114 lines, 8755 characters
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - Oracle SQL generation: 114 lines generated in 0.007s
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - Rendered SQL length: 8755 characters
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - SQL rendering took: 0.007 seconds
2025-09-03 04:12:58,996 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\yyy_analysis.sql
2025-09-03 04:12:58,997 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\yyy_analysis.sql
2025-09-03 04:12:58,997 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger yyy_analysis.json ===
2025-09-03 04:12:58,997 - root - DEBUG - [common.py:105] - ✓ Created yyy_analysis.sql
2025-09-03 04:12:58,997 - root - DEBUG - [common.py:105] - === Processing file 10/10: zzz_analysis.json ===
2025-09-03 04:12:58,998 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-09-03 04:12:58,998 - root - DEBUG - [common.py:105] - Output path: files/format_sql\zzz_analysis.sql
2025-09-03 04:12:58,998 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger zzz_analysis.json ===
2025-09-03 04:12:58,998 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-09-03 04:12:58,999 - root - DEBUG - [main.py:364] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_string_list', 'conversion_stats', 'metadata']
2025-09-03 04:12:58,999 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-09-03 04:12:58,999 - root - DEBUG - [common.py:105] - JSON contains 30 total statements
2025-09-03 04:12:58,999 - root - DEBUG - [common.py:105] - JSON validation passed
2025-09-03 04:12:58,999 - root - DEBUG - [common.py:105] - Creating FormatSQL instance...
2025-09-03 04:12:58,999 - root - DEBUG - [common.py:105] - Loading function_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:59,012 - root - DEBUG - [common.py:105] - Loaded 116 function_mappings mappings from Excel
2025-09-03 04:12:59,013 - root - DEBUG - [common.py:105] - Loading data_type_mappings from Excel file: utilities/oracle_postgresql_mappings.xlsx
2025-09-03 04:12:59,023 - root - DEBUG - [common.py:105] - Loaded 42 data_type_mappings mappings from Excel
2025-09-03 04:12:59,023 - utilities.FormatSQL - DEBUG - [FormatSQL.py:116] - FORMATOracleTriggerAnalyzer initialized successfully
2025-09-03 04:12:59,023 - root - DEBUG - [common.py:105] - FormatSQL created successfully
2025-09-03 04:12:59,023 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-09-03 04:12:59,023 - utilities.FormatSQL - DEBUG - [FormatSQL.py:274] - SQL generation: Converting JSON analysis to formatted Oracle SQL
2025-09-03 04:12:59,023 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 4 exceptions
2025-09-03 04:12:59,024 - root - DEBUG - [common.py:105] - Adding header comments with timestamp for Oracle
2025-09-03 04:12:59,024 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:342] - === Rendering Oracle declarations ===
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:352] - Rendering 2 variables
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:380] - Rendering 4 exceptions
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:392] - === Oracle declarations complete ===
2025-09-03 04:12:59,024 - root - DEBUG - [common.py:105] - Generated 7 lines of declarations
2025-09-03 04:12:59,024 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-09-03 04:12:59,024 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:411] - === Rendering main block for Oracle ===
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:451] - Processing 1 statements in main block
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:452] - begin_end_statements statements: 1
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 11, 'then_line_no': 11, 'if_indent': 4, 'end_if_line_no': 196, 'then_statements': [{'indent': 8, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>INSERTING not supported!');", 'line_no': 14, 'filename': 'zzz.sql'}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 15, 'elif_indent': 4, 'condition': '(UPDATING)', 'then_line_no': 15, 'then_statements': [{'condition': ' :NEW.EVENT_ID IS NULL ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 8, 'end_if_line_no': 20, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_EVENT_ID_REQUIRED;', 'statement_line_no': 19, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT IRTT_MULTIROW_REC_T( UPPER(XT.USERID), TO_DATE(XT.VALID_FROM, MDM_UTIL_IRTT.CO_DD_MM_YYYY), TO_DATE(XT.VALID_TO, MDM_UTIL_IRTT.CO_DD_MM_YYYY)) BULK COLLECT INTO V_KEY_CONTACTS_LIST FROM XMLTABLE ('/rows/row' PASSING XMLTYPE (:NEW.KEY_CONTACTS_LIST) COLUMNS USERID VARCHAR2 (20) PATH 'field[1]', VALID_FROM VARCHAR2 (20) PATH 'field[2]', VALID_TO VARCHAR2 (20) PATH 'field[3]' ) XT;", 'statement_line_no': 25, 'statement_indent': 8}, {'type': 'assignment', 'variable_name': 'L_ERROR_COUNTER', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 40, 'assignment_indent': 8}, {'for_expression': '( FOR R1 IN ( SELECT B.VALUE_CD AS USER_ID, B.DATE_FROM AS VALID_FROM, B.DATE_UNTIL AS VALID_UNTIL, E.USERID, E.TERMINATIONDAY FROM TABLE(V_KEY_CONTACTS_LIST) B LEFT OUTER JOIN V_ROCHE_EMPLOYEES_ALL E ON E.USERID = B. VALUE_CD )', 'type': 'for_loop', 'for_line_no': 41, 'for_indent': 8, 'end_for_line_no': 80, 'loop_variable': 'R1', 'for_statements': []}, {'condition': ' (L_ERROR_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 84, 'then_line_no': 84, 'if_indent': 8, 'end_if_line_no': 86, 'then_statements': [{'type': 'function_calling', 'function_name': 'RAISE_APPLICATION_ERROR', 'parameters': {'parameter_type': 'positional', 'positional_params': ['-20000', "'Correct your input, please.'"], 'named_params': {}, 'raw_text': "-20000, 'Correct your input, please.'"}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(1) INTO L_ERROR_COUNTER FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.DATE_FROM > NVL(XT.DATE_UNTIL, XT.DATE_FROM);', 'statement_line_no': 91, 'statement_indent': 8}, {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 99, 'then_line_no': 99, 'if_indent': 8, 'end_if_line_no': 101, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_FROM_AFTER_DATE_UNTIL;', 'statement_line_no': 100, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(CHK) INTO L_ERROR_COUNTER FROM ( SELECT XT.DATE_FROM, XT.DATE_UNTIL, WHEN XT.DATE_FROM <= LAG(NVL(XT.DATE_UNTIL, XT.DATE_FROM + 1)) OVER (ORDER BY XT.DATE_FROM) THEN 1 END CHK FROM TABLE(V_KEY_CONTACTS_LIST) XT );', 'statement_line_no': 106, 'statement_indent': 8}, {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 123, 'then_line_no': 123, 'if_indent': 8, 'end_if_line_no': 125, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_RANGE_OVERLAP;', 'statement_line_no': 124, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(1) INTO L_ERROR_COUNTER FROM CFG.CFG_IRTT_EVENT_CONTACTS C LEFT JOIN TABLE(V_KEY_CONTACTS_LIST) XT ON C.USERID = XT.VALUE_CD AND C.VALID_FROM = XT.DATE_FROM WHERE C.EVENT_ID = :NEW.EVENT_ID AND C.VALID_FROM < TRUNC(SYSDATE) AND XT.DATE_FROM IS NULL;', 'statement_line_no': 130, 'statement_indent': 8}, {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 143, 'then_line_no': 143, 'if_indent': 8, 'end_if_line_no': 145, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DO_NOT_MODIFY_PAST_DATA;', 'statement_line_no': 144, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'delete_statement', 'sql_statement': 'DELETE FROM CFG.CFG_IRTT_EVENT_CONTACTS A WHERE A.EVENT_ID = :NEW.EVENT_ID AND NOT EXISTS ( SELECT 1 FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE A.USERID = XT.VALUE_CD AND A.VALID_FROM = XT.DATE_FROM );', 'statement_line_no': 149, 'statement_indent': 8}, {'type': 'merge_statement', 'sql_statement': 'MERGE INTO CFG.CFG_IRTT_EVENT_CONTACTS A USING ( SELECT XT.VALUE_CD USERID, XT.DATE_FROM VALID_FROM, XT.DATE_UNTIL VALID_TO FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.VALUE_CD IS NOT NULL ) B ON (A.EVENT_ID = :NEW.EVENT_ID AND A.USERID = B.USERID AND A.VALID_FROM = B.VALID_FROM) WHEN MATCHED THEN UPDATE SET A.VALID_TO = B.VALID_TO WHEN NOT MATCHED THEN INSERT( EVENT_ID, USERID, VALID_FROM, VALID_TO ) VALUES( :NEW.EVENT_ID, B.USERID, B.VALID_FROM, B.VALID_TO );', 'statement_line_no': 163, 'statement_indent': 8}, {'indent': 12, 'line': 'MDM_UTIL_IRTT.MAINTAIN_IRTT_ROLES ();', 'line_no': 191, 'filename': 'zzz.sql'}]}, {'type': 'elif_statement', 'elif_line_no': 192, 'elif_indent': 4, 'condition': '(DELETING)', 'then_line_no': 192, 'then_statements': [{'indent': 12, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>DELETING not supported!');", 'line_no': 195, 'filename': 'zzz.sql'}]}], 'else_statements': []}
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 8, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>INSERTING not supported!');", 'line_no': 14, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:59,024 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 8, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>INSERTING not supported!');", 'line_no': 14, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,024 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' :NEW.EVENT_ID IS NULL ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 8, 'end_if_line_no': 20, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_EVENT_ID_REQUIRED;', 'statement_line_no': 19, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_EVENT_ID_REQUIRED;', 'statement_line_no': 19, 'statement_indent': 12}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': "SELECT IRTT_MULTIROW_REC_T( UPPER(XT.USERID), TO_DATE(XT.VALID_FROM, MDM_UTIL_IRTT.CO_DD_MM_YYYY), TO_DATE(XT.VALID_TO, MDM_UTIL_IRTT.CO_DD_MM_YYYY)) BULK COLLECT INTO V_KEY_CONTACTS_LIST FROM XMLTABLE ('/rows/row' PASSING XMLTYPE (:NEW.KEY_CONTACTS_LIST) COLUMNS USERID VARCHAR2 (20) PATH 'field[1]', VALID_FROM VARCHAR2 (20) PATH 'field[2]', VALID_TO VARCHAR2 (20) PATH 'field[3]' ) XT;", 'statement_line_no': 25, 'statement_indent': 8}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'assignment', 'variable_name': 'L_ERROR_COUNTER', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 40, 'assignment_indent': 8}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: assignment
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'for_expression': '( FOR R1 IN ( SELECT B.VALUE_CD AS USER_ID, B.DATE_FROM AS VALID_FROM, B.DATE_UNTIL AS VALID_UNTIL, E.USERID, E.TERMINATIONDAY FROM TABLE(V_KEY_CONTACTS_LIST) B LEFT OUTER JOIN V_ROCHE_EMPLOYEES_ALL E ON E.USERID = B. VALUE_CD )', 'type': 'for_loop', 'for_line_no': 41, 'for_indent': 8, 'end_for_line_no': 80, 'loop_variable': 'R1', 'for_statements': []}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: for_loop
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' (L_ERROR_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 84, 'then_line_no': 84, 'if_indent': 8, 'end_if_line_no': 86, 'then_statements': [{'type': 'function_calling', 'function_name': 'RAISE_APPLICATION_ERROR', 'parameters': {'parameter_type': 'positional', 'positional_params': ['-20000', "'Correct your input, please.'"], 'named_params': {}, 'raw_text': "-20000, 'Correct your input, please.'"}}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'function_calling', 'function_name': 'RAISE_APPLICATION_ERROR', 'parameters': {'parameter_type': 'positional', 'positional_params': ['-20000', "'Correct your input, please.'"], 'named_params': {}, 'raw_text': "-20000, 'Correct your input, please.'"}}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: function_calling
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(1) INTO L_ERROR_COUNTER FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.DATE_FROM > NVL(XT.DATE_UNTIL, XT.DATE_FROM);', 'statement_line_no': 91, 'statement_indent': 8}
2025-09-03 04:12:59,025 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 99, 'then_line_no': 99, 'if_indent': 8, 'end_if_line_no': 101, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_FROM_AFTER_DATE_UNTIL;', 'statement_line_no': 100, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_FROM_AFTER_DATE_UNTIL;', 'statement_line_no': 100, 'statement_indent': 12}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(CHK) INTO L_ERROR_COUNTER FROM ( SELECT XT.DATE_FROM, XT.DATE_UNTIL, WHEN XT.DATE_FROM <= LAG(NVL(XT.DATE_UNTIL, XT.DATE_FROM + 1)) OVER (ORDER BY XT.DATE_FROM) THEN 1 END CHK FROM TABLE(V_KEY_CONTACTS_LIST) XT );', 'statement_line_no': 106, 'statement_indent': 8}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 123, 'then_line_no': 123, 'if_indent': 8, 'end_if_line_no': 125, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_RANGE_OVERLAP;', 'statement_line_no': 124, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DATE_RANGE_OVERLAP;', 'statement_line_no': 124, 'statement_indent': 12}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(1) INTO L_ERROR_COUNTER FROM CFG.CFG_IRTT_EVENT_CONTACTS C LEFT JOIN TABLE(V_KEY_CONTACTS_LIST) XT ON C.USERID = XT.VALUE_CD AND C.VALID_FROM = XT.DATE_FROM WHERE C.EVENT_ID = :NEW.EVENT_ID AND C.VALID_FROM < TRUNC(SYSDATE) AND XT.DATE_FROM IS NULL;', 'statement_line_no': 130, 'statement_indent': 8}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: select_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'condition': ' L_ERROR_COUNTER > 0 ', 'type': 'if_else', 'if_line_no': 143, 'then_line_no': 143, 'if_indent': 8, 'end_if_line_no': 145, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DO_NOT_MODIFY_PAST_DATA;', 'statement_line_no': 144, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: if_else
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'raise_statement', 'sql_statement': 'RAISE ERR_DO_NOT_MODIFY_PAST_DATA;', 'statement_line_no': 144, 'statement_indent': 12}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: raise_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'delete_statement', 'sql_statement': 'DELETE FROM CFG.CFG_IRTT_EVENT_CONTACTS A WHERE A.EVENT_ID = :NEW.EVENT_ID AND NOT EXISTS ( SELECT 1 FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE A.USERID = XT.VALUE_CD AND A.VALID_FROM = XT.DATE_FROM );', 'statement_line_no': 149, 'statement_indent': 8}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: delete_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'type': 'merge_statement', 'sql_statement': 'MERGE INTO CFG.CFG_IRTT_EVENT_CONTACTS A USING ( SELECT XT.VALUE_CD USERID, XT.DATE_FROM VALID_FROM, XT.DATE_UNTIL VALID_TO FROM TABLE(V_KEY_CONTACTS_LIST) XT WHERE XT.VALUE_CD IS NOT NULL ) B ON (A.EVENT_ID = :NEW.EVENT_ID AND A.USERID = B.USERID AND A.VALID_FROM = B.VALID_FROM) WHEN MATCHED THEN UPDATE SET A.VALID_TO = B.VALID_TO WHEN NOT MATCHED THEN INSERT( EVENT_ID, USERID, VALID_FROM, VALID_TO ) VALUES( :NEW.EVENT_ID, B.USERID, B.VALID_FROM, B.VALID_TO );', 'statement_line_no': 163, 'statement_indent': 8}
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: merge_statement
2025-09-03 04:12:59,026 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': 'MDM_UTIL_IRTT.MAINTAIN_IRTT_ROLES ();', 'line_no': 191, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': 'MDM_UTIL_IRTT.MAINTAIN_IRTT_ROLES ();', 'line_no': 191, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,027 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:494] - statement: {'indent': 12, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>DELETING not supported!');", 'line_no': 195, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:502] - Rendering statement type: 
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:540] - {'indent': 12, 'line': "HTP.P ('MDM_V_IRTT_EVENTS_KEYC_MTN_IOF>DELETING not supported!');", 'line_no': 195, 'filename': 'zzz.sql'}
2025-09-03 04:12:59,027 - utilities.FormatSQL - WARNING - [FormatSQL.py:853] - Unknown statement type: unknown
2025-09-03 04:12:59,027 - utilities.FormatSQL - DEBUG - [FormatSQL.py:471] - === Main block complete for Oracle ===
2025-09-03 04:12:59,027 - root - DEBUG - [common.py:105] - Generated 33 lines in main execution block
2025-09-03 04:12:59,027 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - Adding footer comments
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - Final SQL contains 40 lines, 2897 characters
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - Oracle SQL generation: 40 lines generated in 0.004s
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - Rendered SQL length: 2897 characters
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - SQL rendering took: 0.004 seconds
2025-09-03 04:12:59,028 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\zzz_analysis.sql
2025-09-03 04:12:59,029 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\zzz_analysis.sql
2025-09-03 04:12:59,029 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger zzz_analysis.json ===
2025-09-03 04:12:59,029 - root - DEBUG - [common.py:105] - ✓ Created zzz_analysis.sql
2025-09-03 04:12:59,029 - root - INFO - [common.py:110] - === File processing complete ===
2025-09-03 04:12:59,030 - root - INFO - [common.py:110] - Successfully processed: 10 files
2025-09-03 04:12:59,030 - root - INFO - [common.py:110] - === Starting comparison with original files ===
2025-09-03 04:12:59,031 - root - DEBUG - [common.py:105] - Comparison complete for bbb.sql: 132 original, 46 generated lines
2025-09-03 04:12:59,031 - root - DEBUG - [common.py:105] - Comparison complete for eee.sql: 29 original, 18 generated lines
2025-09-03 04:12:59,032 - root - DEBUG - [common.py:105] - Comparison complete for trigger1.sql: 870 original, 225 generated lines
2025-09-03 04:12:59,032 - root - DEBUG - [common.py:105] - Comparison complete for trigger2.sql: 465 original, 92 generated lines
2025-09-03 04:12:59,033 - root - DEBUG - [common.py:105] - Comparison complete for trigger3.sql: 265 original, 48 generated lines
2025-09-03 04:12:59,033 - root - DEBUG - [common.py:105] - Comparison complete for trigger4.sql: 23 original, 21 generated lines
2025-09-03 04:12:59,033 - root - DEBUG - [common.py:105] - Comparison complete for trigger5.sql: 36 original, 21 generated lines
2025-09-03 04:12:59,034 - root - DEBUG - [common.py:105] - Comparison complete for trigger6.sql: 89 original, 38 generated lines
2025-09-03 04:12:59,034 - root - DEBUG - [common.py:105] - Comparison complete for yyy.sql: 370 original, 114 generated lines
2025-09-03 04:12:59,035 - root - DEBUG - [common.py:105] - Comparison complete for zzz.sql: 209 original, 40 generated lines
2025-09-03 04:12:59,035 - root - INFO - [common.py:110] - === Conversion Statistics ===
2025-09-03 04:12:59,035 - root - INFO - [common.py:110] - Total files processed: 10
2025-09-03 04:12:59,035 - root - INFO - [common.py:110] - Successful conversions: 1
2025-09-03 04:12:59,035 - root - INFO - [common.py:110] - Failed conversions: 0
2025-09-03 04:12:59,035 - root - INFO - [common.py:110] - Files with validation warnings: 9
2025-09-03 04:12:59,036 - root - INFO - [common.py:110] - === Comparison Results ===
2025-09-03 04:12:59,036 - root - WARNING - [common.py:115] - File bbb.sql: Significant line count difference: 62.9%
2025-09-03 04:12:59,036 - root - WARNING - [common.py:115] - File eee.sql: Significant line count difference: 28.0%
2025-09-03 04:12:59,036 - root - WARNING - [common.py:115] - File trigger1.sql: Significant line count difference: 71.9%
2025-09-03 04:12:59,036 - root - WARNING - [common.py:115] - File trigger2.sql: Significant line count difference: 78.2%
2025-09-03 04:12:59,037 - root - WARNING - [common.py:115] - File trigger3.sql: Significant line count difference: 80.3%
2025-09-03 04:12:59,037 - root - INFO - [common.py:110] - File trigger4.sql: Conversion successful
2025-09-03 04:12:59,037 - root - WARNING - [common.py:115] - File trigger5.sql: Significant line count difference: 38.2%
2025-09-03 04:12:59,037 - root - WARNING - [common.py:115] - File trigger6.sql: Significant line count difference: 53.1%
2025-09-03 04:12:59,037 - root - WARNING - [common.py:115] - File yyy.sql: Significant line count difference: 66.0%
2025-09-03 04:12:59,038 - root - WARNING - [common.py:115] - File zzz.sql: Significant line count difference: 78.3%
2025-09-03 04:12:59,038 - root - INFO - [common.py:110] - === JSON analysis to formatted Oracle SQL conversion complete ===
