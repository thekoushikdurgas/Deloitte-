2025-08-28 06:26:51,214 - root - DEBUG - [common.py:105] - Starting main conversion workflow
2025-08-28 06:26:51,214 - root - INFO - [common.py:110] - === Starting Oracle Trigger Conversion Process ===
2025-08-28 06:26:51,214 - root - INFO - [common.py:110] - Logging to: output\oracle_conversion_20250828_062651.log
2025-08-28 06:26:51,214 - root - DEBUG - [common.py:105] - Logging system initialized
2025-08-28 06:26:51,215 - root - INFO - [common.py:110] - Step 1: Converting Oracle SQL files to JSON analysis...
2025-08-28 06:26:51,215 - root - DEBUG - [common.py:105] - Starting Step 1: Oracle SQL â†’ JSON conversion
2025-08-28 06:26:51,215 - root - INFO - [common.py:110] - === Starting Oracle triggers to JSON conversion ===
2025-08-28 06:26:51,216 - root - DEBUG - [common.py:105] - Workflow Phase 1: Convert Oracle SQL files to JSON analysis structure
2025-08-28 06:26:51,216 - root - DEBUG - [common.py:105] - Source directory: files/oracle
2025-08-28 06:26:51,216 - root - DEBUG - [common.py:105] - Target directory: files/format_json
2025-08-28 06:26:51,216 - root - INFO - [common.py:110] - === Starting file processing ===
2025-08-28 06:26:51,216 - root - INFO - [common.py:110] - Source directory: 'files/oracle'
2025-08-28 06:26:51,217 - root - INFO - [common.py:110] - Target directory: 'files/format_json'
2025-08-28 06:26:51,217 - root - INFO - [common.py:110] - File pattern: '.sql'
2025-08-28 06:26:51,217 - root - INFO - [common.py:110] - Output suffix: '_analysis.json'
2025-08-28 06:26:51,217 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-08-28 06:26:51,217 - root - DEBUG - [common.py:105] - Created directory: files/format_json
2025-08-28 06:26:51,217 - root - DEBUG - [common.py:105] - Found 8 files in source directory
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Files matching pattern '.sql': ['trigger1.sql', 'trigger2.sql', 'trigger3.sql', 'trigger4.sql', 'trigger5.sql', 'trigger6.sql', 'yyy.sql', 'zzz.sql']
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - === Processing file 1/8: trigger1.sql ===
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger1.sql
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger1_analysis.json
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger1.sql ===
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Successfully read 29800 characters from files/oracle\trigger1.sql
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 29800 characters of SQL
2025-08-28 06:26:51,218 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,218 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,218 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,218 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,219 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 801 total, 214 with semicolons, 69 empty lines skipped
2025-08-28 06:26:51,219 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,219 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 801 lines cleaned
2025-08-28 06:26:51,219 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 63 comments extracted, 748 lines cleaned
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 51
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-50
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: INVALID_THEME_NO
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: DELETE_NO_MORE_POSSIBLE
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEME_NO_ONLY_INSERT
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: DESCRIPTION_TOO_LONG
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEME_DESC_PROPOSAL_TOO_LONG
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEME_DESC_ALT_TOO_LONG
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEME_NO_CANNOT_BE_INSERTED
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ONLYONEOFFICIALCHANGEPERDAY
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: INSERTSMUSTBEOFFICIAL
2025-08-28 06:26:51,220 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEMEDESCRIPTIONMANDATORY
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: THEME_DESC_NOT_UNIQUE
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: IN_PREP_NOT_PORTF_PROJ
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: IN_PREP_NOT_CLOSED
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: INVALID_MOLECULE_ID
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: SEC_MOL_LIST_NOT_EMPTY
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ADMIN_UPDATE_ONLY
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: PORTF_PROJ_MOL_CRE_ERR
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: DEBUGGING
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNTER
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_CODE
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_ODG_NO
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_RESGRP_CD
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_RESLIN_CD
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_STATUS_CD
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_DBA_CD
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_PORTF_PROJ_CD
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_DESCRIPTION
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_RESLIN_DESC
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_THEME_DESC_LENGTH
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_D_REGISTRAT_DATE
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_D_INS_DATE
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_FUTURE_REGISTRAT
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_VALID_TO
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_USERID
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_IS_ADMIN_CNT
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_SEC_MOL_CNT
2025-08-28 06:26:51,221 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MOLECULE_ID
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MOLECULE_RG_NO
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MOLEC_IN_LIC_PRTNR
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_NEW_RG_NO
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COMPARATOR_IND
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_THEME_DESC_PROPOSAL
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_SHORT_NAME
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:424] - Processed constant: C_MOLECULE_TYPE_ID
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:424] - Processed constant: C_PHARMACOLOGICAL_TYPE_ID
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_EVOLVED_NMP_CNT
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TRADEMARK_NO
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MOLECULE_TYPE_ID
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_PHARMACOLOGICAL_TYPE_ID
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'ADMIN_UPDATE_ONLY', 'when_line_no': 825, 'when_indent': 3, 'then_line_no': 825, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');", 'line_no': 826}]}, {'type': 'exception_handler', 'exception_name': 'IN_PREP_NOT_PORTF_PROJ', 'when_line_no': 827, 'when_indent': 3, 'then_line_no': 827, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');", 'line_no': 828}]}, {'type': 'exception_handler', 'exception_name': 'IN_PREP_NOT_CLOSED', 'when_line_no': 829, 'when_indent': 3, 'then_line_no': 829, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');", 'line_no': 830}]}, {'type': 'exception_handler', 'exception_name': 'INVALID_MOLECULE_ID', 'when_line_no': 831, 'when_indent': 3, 'then_line_no': 831, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');", 'line_no': 832}]}, {'type': 'exception_handler', 'exception_name': 'SEC_MOL_LIST_NOT_EMPTY', 'when_line_no': 833, 'when_indent': 3, 'then_line_no': 833, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');", 'line_no': 834}]}, {'type': 'exception_handler', 'exception_name': 'INVALID_THEME_NO', 'when_line_no': 835, 'when_indent': 3, 'then_line_no': 835, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');", 'line_no': 836}]}, {'type': 'exception_handler', 'exception_name': 'DELETE_NO_MORE_POSSIBLE', 'when_line_no': 837, 'when_indent': 3, 'then_line_no': 837, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');", 'line_no': 838}]}, {'type': 'exception_handler', 'exception_name': 'THEME_NO_ONLY_INSERT', 'when_line_no': 839, 'when_indent': 3, 'then_line_no': 839, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');", 'line_no': 840}]}, {'type': 'exception_handler', 'exception_name': 'DESCRIPTION_TOO_LONG', 'when_line_no': 841, 'when_indent': 3, 'then_line_no': 841, 'exception_statements': [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Theme Description "\'', 'line_no': 842}, {'indent': 38, 'line': '                                      || V_DESCRIPTION', 'line_no': 843}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 844}]}, {'type': 'exception_handler', 'exception_name': 'THEME_DESC_PROPOSAL_TOO_LONG', 'when_line_no': 845, 'when_indent': 3, 'then_line_no': 845, 'exception_statements': [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Short Description Proposal "\'', 'line_no': 846}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_PROPOSAL', 'line_no': 847}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 848}]}, {'type': 'exception_handler', 'exception_name': 'THEME_DESC_ALT_TOO_LONG', 'when_line_no': 849, 'when_indent': 3, 'then_line_no': 849, 'exception_statements': [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Downstream Theme Description "\'', 'line_no': 850}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_ALT', 'line_no': 851}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 852}]}, {'type': 'exception_handler', 'exception_name': 'THEME_NO_CANNOT_BE_INSERTED', 'when_line_no': 853, 'when_indent': 3, 'then_line_no': 853, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');", 'line_no': 854}]}, {'type': 'exception_handler', 'exception_name': 'ONLYONEOFFICIALCHANGEPERDAY', 'when_line_no': 855, 'when_indent': 3, 'then_line_no': 855, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');", 'line_no': 856}]}, {'type': 'exception_handler', 'exception_name': 'INSERTSMUSTBEOFFICIAL', 'when_line_no': 857, 'when_indent': 3, 'then_line_no': 857, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');", 'line_no': 858}]}, {'type': 'exception_handler', 'exception_name': 'THEMEDESCRIPTIONMANDATORY', 'when_line_no': 859, 'when_indent': 3, 'then_line_no': 859, 'exception_statements': [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\' );', 'line_no': 860}]}, {'type': 'exception_handler', 'exception_name': 'THEME_DESC_NOT_UNIQUE', 'when_line_no': 861, 'when_indent': 3, 'then_line_no': 861, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');", 'line_no': 862}]}, {'type': 'exception_handler', 'exception_name': 'PORTF_PROJ_MOL_CRE_ERR', 'when_line_no': 863, 'when_indent': 3, 'then_line_no': 863, 'exception_statements': [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');", 'line_no': 864}]}, {'type': 'exception_handler', 'exception_name': 'DEBUGGING', 'when_line_no': 865, 'when_indent': 3, 'then_line_no': 865, 'exception_statements': [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(', 'line_no': 866}, {'indent': 9, 'line': '         -20900,', 'line_no': 867}, {'indent': 7, 'line': "       'Debug in Themes IOF standard'", 'line_no': 868}, {'indent': 7, 'line': '       );', 'line_no': 869}]}]
2025-08-28 06:26:51,222 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 6, 'line': '      BEGIN', 'line_no': 116} 52
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1631] - Exception line: {'indent': 6, 'line': '      EXCEPTION', 'line_no': 126} 62
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1640] - End line: {'indent': 6, 'line': '      END;', 'line_no': 129} 65
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}]
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 12, 'line': '            BEGIN', 'line_no': 771} 602
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1631] - Exception line: {'indent': 12, 'line': '            EXCEPTION', 'line_no': 781} 612
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1640] - End line: {'indent': 12, 'line': '            END;', 'line_no': 784} 615
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}]
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 3, 'line': '   BEGIN', 'line_no': 805} 634
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 249 i: 276
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 9, 'line': '         WHEN 4 THEN', 'line_no': 250}
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1502] - {'indent': 9, 'line': '         WHEN 4 THEN', 'line_no': 250}
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 9, 'line': '         WHEN 4 THEN', 'line_no': 250}, {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 251}, {'indent': 12, 'line': '            AND 9', 'line_no': 252}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 253}, {'indent': 12, 'line': '            AND 9', 'line_no': 254}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 255}, {'indent': 12, 'line': '            AND 9', 'line_no': 256}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 257}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 258}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}, {'indent': 12, 'line': '            END IF;', 'line_no': 260}]
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 250 then_i: 250
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 9, 'line': '         WHEN 4 THEN', 'line_no': 250}, {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 251}, {'indent': 12, 'line': '            AND 9', 'line_no': 252}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 253}, {'indent': 12, 'line': '            AND 9', 'line_no': 254}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 255}, {'indent': 12, 'line': '            AND 9', 'line_no': 256}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 257}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 258}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}, {'indent': 12, 'line': '            END IF;', 'line_no': 260}]
2025-08-28 06:26:51,223 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 9, 'line': '         WHEN 5 THEN', 'line_no': 261}
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 9, 'line': '         WHEN 5 THEN', 'line_no': 261}, {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 262}, {'indent': 12, 'line': '            AND 9', 'line_no': 263}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 264}, {'indent': 12, 'line': '            AND 9', 'line_no': 265}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 266}, {'indent': 12, 'line': '            AND 9', 'line_no': 267}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 268}, {'indent': 12, 'line': '            AND 9', 'line_no': 269}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0', 'line_no': 270}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 271}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}, {'indent': 12, 'line': '            END IF;', 'line_no': 273}]
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 261 then_i: 261
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 9, 'line': '         WHEN 5 THEN', 'line_no': 261}, {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 262}, {'indent': 12, 'line': '            AND 9', 'line_no': 263}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 264}, {'indent': 12, 'line': '            AND 9', 'line_no': 265}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 266}, {'indent': 12, 'line': '            AND 9', 'line_no': 267}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 268}, {'indent': 12, 'line': '            AND 9', 'line_no': 269}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0', 'line_no': 270}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 271}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}, {'indent': 12, 'line': '            END IF;', 'line_no': 273}]
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 586 i: 637
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 587}
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1502] - {'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 587}
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 587}, {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 587 then_i: 587
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 587}, {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1502] - {'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 601}
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 601}, {'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 601 then_i: 601
2025-08-28 06:26:51,224 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL THEN', 'line_no': 601}, {'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL THEN', 'line_no': 612}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL THEN', 'line_no': 612}, {'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 612 then_i: 612
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 9, 'line': '         WHEN :OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL THEN', 'line_no': 612}, {'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 12, 'line': '            NULL;', 'line_no': 636}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   SELECT', 'line_no': 54}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID', 'line_no': 55}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   FROM', 'line_no': 56}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      DUAL;', 'line_no': 57}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   SELECT', 'line_no': 61}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      COUNT(*) INTO V_IS_ADMIN_CNT', 'line_no': 62}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   FROM', 'line_no': 63}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      TXO_USERS_ROLES_MAP', 'line_no': 64}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   WHERE', 'line_no': 65}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      ROLE_ID IN (315)', 'line_no': 66}
2025-08-28 06:26:51,225 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      AND USERID = V_USERID;', 'line_no': 67}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   SELECT', 'line_no': 70}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      NEW_RG_NO INTO V_NEW_RG_NO', 'line_no': 71}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   FROM', 'line_no': 72}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      (', 'line_no': 73}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 74}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NEW_RG_NO', 'line_no': 75}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 76}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            (', 'line_no': 77}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               SELECT', 'line_no': 78}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  ROWNUM AS NEW_RG_NO', 'line_no': 79}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               FROM', 'line_no': 80}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  DUAL', 'line_no': 81}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               CONNECT BY', 'line_no': 82}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  1 = 1', 'line_no': 83}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  AND ROWNUM <= 6999', 'line_no': 84}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            )', 'line_no': 85}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 86}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NEW_RG_NO > 5999 MINUS', 'line_no': 87}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 88}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               TO_NUMBER(RG_NO)', 'line_no': 89}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 90}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 91}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      )', 'line_no': 92}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   WHERE', 'line_no': 93}
2025-08-28 06:26:51,226 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      ROWNUM = 1;', 'line_no': 94}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': "   IF (:NEW.IN_PREP_IND = 'Y')", 'line_no': 95}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 95
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 95 i: 111
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 15
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 3, 'line': '   THEN', 'line_no': 96}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 6, 'line': "      IF (:NEW.PORTF_PROJ_CD <> 'Y') THEN", 'line_no': 97}, {'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}, {'indent': 6, 'line': '      END IF;', 'line_no': 99}, {'indent': 6, 'line': "      IF (:NEW.STATUS_DESC <> 'CLOSED'", 'line_no': 101}, {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 102}, {'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}, {'indent': 6, 'line': '      END IF;', 'line_no': 104}, {'indent': 6, 'line': '      IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 106}, {'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}, {'indent': 6, 'line': '      END IF;', 'line_no': 110}]
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 95, 'then_line_no': 96, 'if_indent': 3, 'end_if_line_no': 111, 'then_statements': [{'indent': 6, 'line': "      IF (:NEW.PORTF_PROJ_CD <> 'Y') THEN", 'line_no': 97}, {'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}, {'indent': 6, 'line': '      END IF;', 'line_no': 99}, {'indent': 6, 'line': "      IF (:NEW.STATUS_DESC <> 'CLOSED'", 'line_no': 101}, {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 102}, {'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}, {'indent': 6, 'line': '      END IF;', 'line_no': 104}, {'indent': 6, 'line': '      IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 106}, {'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}, {'indent': 6, 'line': '      END IF;', 'line_no': 110}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.PORTF_PROJ_CD <> 'Y') THEN", 'line_no': 97}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 97
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 97 i: 99
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}]
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.STATUS_DESC <> 'CLOSED'", 'line_no': 101}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 101
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 101 i: 104
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 4
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 102}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}]
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,227 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 106}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 106
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 106 i: 110
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}]
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 30, 'line': "                              || '!');", 'line_no': 109}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 115}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 115
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 115 i: 145
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 15
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'indent': 6, 'line': '      IF (V_MOLECULE_RG_NO IS NULL) THEN', 'line_no': 131}, {'indent': 9, 'line': "         IF (V_COMPARATOR_IND = 'Y') THEN", 'line_no': 132}, {'indent': 12, 'line': '            NULL;', 'line_no': 133}, {'indent': 9, 'line': '         ELSE', 'line_no': 134}, {'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}, {'indent': 9, 'line': '         END IF;', 'line_no': 143}, {'indent': 6, 'line': '      END IF;', 'line_no': 144}]
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 115, 'then_line_no': 115, 'if_indent': 3, 'end_if_line_no': 145, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'indent': 6, 'line': '      IF (V_MOLECULE_RG_NO IS NULL) THEN', 'line_no': 131}, {'indent': 9, 'line': "         IF (V_COMPARATOR_IND = 'Y') THEN", 'line_no': 132}, {'indent': 12, 'line': '            NULL;', 'line_no': 133}, {'indent': 9, 'line': '         ELSE', 'line_no': 134}, {'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}, {'indent': 9, 'line': '         END IF;', 'line_no': 143}, {'indent': 6, 'line': '      END IF;', 'line_no': 144}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}], 'exception_line_no': 126, 'end_line_no': 129}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 117}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 121}
2025-08-28 06:26:51,228 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 123}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (V_MOLECULE_RG_NO IS NULL) THEN', 'line_no': 131}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 131
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 131 i: 144
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': "         IF (V_COMPARATOR_IND = 'Y') THEN", 'line_no': 132}, {'indent': 12, 'line': '            NULL;', 'line_no': 133}, {'indent': 9, 'line': '         ELSE', 'line_no': 134}, {'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}, {'indent': 9, 'line': '         END IF;', 'line_no': 143}]
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'indent': 9, 'line': "         IF (V_COMPARATOR_IND = 'Y') THEN", 'line_no': 132}, {'indent': 12, 'line': '            NULL;', 'line_no': 133}, {'indent': 9, 'line': '         ELSE', 'line_no': 134}, {'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}, {'indent': 9, 'line': '         END IF;', 'line_no': 143}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,229 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         IF (V_COMPARATOR_IND = 'Y') THEN", 'line_no': 132}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 132
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 132 i: 143
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 10
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 137, 143
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 133}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}]}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NULL;', 'line_no': 133}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 138}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 140}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_ODG_NO := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'line_no': 150}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_RESGRP_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'line_no': 151}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_RESLIN_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'line_no': 152}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_RESLIN_DESC := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'line_no': 153}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (:NEW.STATUS_DESC IS NOT NULL) THEN', 'line_no': 154}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 154
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 154 i: 163
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 10
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 162, 163
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 154, 'then_line_no': 154, 'if_indent': 3, 'end_if_line_no': 163, 'then_statements': [{'indent': 6, 'line': '      SELECT', 'line_no': 155}, {'indent': 9, 'line': '         STATUS_CD INTO V_STATUS_CD', 'line_no': 156}, {'indent': 6, 'line': '      FROM', 'line_no': 157}, {'indent': 9, 'line': '         MDM_V_THEME_STATUS', 'line_no': 158}, {'indent': 6, 'line': '      WHERE', 'line_no': 159}, {'indent': 9, 'line': '         STATE_DESC = :NEW.STATUS_DESC;', 'line_no': 160}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_STATUS_CD := NULL;', 'line_no': 162}]}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      SELECT', 'line_no': 155}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         STATUS_CD INTO V_STATUS_CD', 'line_no': 156}
2025-08-28 06:26:51,230 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      FROM', 'line_no': 157}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         MDM_V_THEME_STATUS', 'line_no': 158}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      WHERE', 'line_no': 159}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         STATE_DESC = :NEW.STATUS_DESC;', 'line_no': 160}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_STATUS_CD := NULL;', 'line_no': 162}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (:NEW.DBA_DESC_CONCAT IS NOT NULL) THEN', 'line_no': 165}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 165
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 165 i: 176
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 175, 176
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 165, 'then_line_no': 165, 'if_indent': 3, 'end_if_line_no': 176, 'then_statements': [{'indent': 6, 'line': '      SELECT', 'line_no': 166}, {'indent': 9, 'line': '         DBA_CD INTO V_DBA_CD', 'line_no': 167}, {'indent': 6, 'line': '      FROM', 'line_no': 168}, {'indent': 9, 'line': '         MDM_V_DISEASE_BIOLOGY_AREAS', 'line_no': 169}, {'indent': 6, 'line': '      WHERE', 'line_no': 170}, {'indent': 9, 'line': '         DBA_SHORT_DESC', 'line_no': 171}, {'indent': 9, 'line': "         || ' - '", 'line_no': 172}, {'indent': 9, 'line': '         || DBA_DESC = :NEW.DBA_DESC_CONCAT;', 'line_no': 173}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_DBA_CD := NULL;', 'line_no': 175}]}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      SELECT', 'line_no': 166}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         DBA_CD INTO V_DBA_CD', 'line_no': 167}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      FROM', 'line_no': 168}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         MDM_V_DISEASE_BIOLOGY_AREAS', 'line_no': 169}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      WHERE', 'line_no': 170}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         DBA_SHORT_DESC', 'line_no': 171}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         || ' - '", 'line_no': 172}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         || DBA_DESC = :NEW.DBA_DESC_CONCAT;', 'line_no': 173}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_DBA_CD := NULL;', 'line_no': 175}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_MOLEC_IN_LIC_PRTNR := GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'line_no': 178}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': "   IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 179}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 179
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 179 i: 183
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 182, 183
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 179, 'then_line_no': 179, 'if_indent': 3, 'end_if_line_no': 183, 'then_statements': [{'indent': 6, 'line': '      V_TRADEMARK_NO := :NEW.TRADEMARK_NO;', 'line_no': 180}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_TRADEMARK_NO := :OLD.TRADEMARK_NO;', 'line_no': 182}]}
2025-08-28 06:26:51,231 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_TRADEMARK_NO := :NEW.TRADEMARK_NO;', 'line_no': 180}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_TRADEMARK_NO := :OLD.TRADEMARK_NO;', 'line_no': 182}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': "   V_THEME_DESC_PROPOSAL := GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'line_no': 185}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (:NEW.MANUAL_SHORT_DESC IS NULL', 'line_no': 186}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 186
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 186 i: 189
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 4
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 3, 'line': '   AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) THEN', 'line_no': 187}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 6, 'line': '      RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'line_no': 188}]
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_line_no': 186, 'then_line_no': 187, 'if_indent': 3, 'end_if_line_no': 189, 'then_statements': [{'indent': 6, 'line': '      RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'line_no': 188}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'line_no': 188}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   V_SHORT_NAME := COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'line_no': 191}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (INSERTING) THEN', 'line_no': 192}
2025-08-28 06:26:51,232 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 192
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 192 i: 656
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 325
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1303] - then_statements: 0 186
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF (:OLD.IN_PREP_IND = 'N'", 'line_no': 435}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      OR (:OLD.IN_PREP_IND = 'Y'", 'line_no': 436}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 THEN", 'line_no': 437}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 439}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      IF (:NEW.THEME_NO <> :OLD.THEME_NO) THEN', 'line_no': 441}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 443}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 449}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      ELSE', 'line_no': 453}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 456}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y'", 'line_no': 458}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      AND(V_STATUS_CD <> 'C'", 'line_no': 459}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) THEN", 'line_no': 460}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}
2025-08-28 06:26:51,233 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         );', 'line_no': 473}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      ELSE', 'line_no': 476}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         ELSE', 'line_no': 480}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         END IF;', 'line_no': 483}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 484}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 486}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 488}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}
2025-08-28 06:26:51,234 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      SELECT', 'line_no': 494}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      FROM', 'line_no': 496}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      WHERE', 'line_no': 498}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 501}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 503}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 508}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         SET', 'line_no': 510}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}
2025-08-28 06:26:51,235 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         WHERE', 'line_no': 532}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      ELSE', 'line_no': 535}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         SELECT', 'line_no': 542}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         FROM', 'line_no': 544}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         WHERE', 'line_no': 546}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         END IF;', 'line_no': 551}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         SET', 'line_no': 555}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}
2025-08-28 06:26:51,236 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         WHERE', 'line_no': 579}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 581}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 3, 'line': '   ELSIF (DELETING) THEN', 'line_no': 638}
2025-08-28 06:26:51,237 - root - DEBUG - [OracleTriggerAnalyzer.py:1313] - {'indent': 3, 'line': '   ELSIF (UPDATING) THEN', 'line_no': 432}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1348] - [{'indent': 3, 'line': '   ELSIF (UPDATING) THEN', 'line_no': 432}, {'indent': 6, 'line': "      IF (:OLD.IN_PREP_IND = 'N'", 'line_no': 435}, {'indent': 6, 'line': "      OR (:OLD.IN_PREP_IND = 'Y'", 'line_no': 436}, {'indent': 6, 'line': "      AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 THEN", 'line_no': 437}, {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}, {'indent': 6, 'line': '      END IF;', 'line_no': 439}, {'indent': 6, 'line': '      IF (:NEW.THEME_NO <> :OLD.THEME_NO) THEN', 'line_no': 441}, {'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}, {'indent': 6, 'line': '      END IF;', 'line_no': 443}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 449}, {'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}, {'indent': 6, 'line': '      ELSE', 'line_no': 453}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}, {'indent': 6, 'line': '      END IF;', 'line_no': 456}, {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y'", 'line_no': 458}, {'indent': 6, 'line': "      AND(V_STATUS_CD <> 'C'", 'line_no': 459}, {'indent': 6, 'line': "      OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) THEN", 'line_no': 460}, {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}, {'indent': 6, 'line': '      ELSE', 'line_no': 476}, {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}, {'indent': 9, 'line': '         ELSE', 'line_no': 480}, {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}, {'indent': 9, 'line': '         END IF;', 'line_no': 483}, {'indent': 6, 'line': '      END IF;', 'line_no': 484}, {'indent': 6, 'line': '      IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 486}, {'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}, {'indent': 6, 'line': '      END IF;', 'line_no': 488}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}, {'indent': 6, 'line': '      SELECT', 'line_no': 494}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}, {'indent': 6, 'line': '      FROM', 'line_no': 496}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}, {'indent': 6, 'line': '      WHERE', 'line_no': 498}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}, {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}, {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 501}, {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}, {'indent': 6, 'line': '      END IF;', 'line_no': 503}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 508}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}, {'indent': 6, 'line': '      ELSE', 'line_no': 535}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}, {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}, {'indent': 9, 'line': '         END IF;', 'line_no': 551}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}, {'indent': 6, 'line': '      END IF;', 'line_no': 581}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}]
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1351] - elif_else_then_statements[0]: {'indent': 3, 'line': '   ELSIF (UPDATING) THEN', 'line_no': 432}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1378] - elif_else_then_statements 0: 432 then_i: 432
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1379] - case_when_then_statements: [{'indent': 3, 'line': '   ELSIF (UPDATING) THEN', 'line_no': 432}, {'indent': 6, 'line': "      IF (:OLD.IN_PREP_IND = 'N'", 'line_no': 435}, {'indent': 6, 'line': "      OR (:OLD.IN_PREP_IND = 'Y'", 'line_no': 436}, {'indent': 6, 'line': "      AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 THEN", 'line_no': 437}, {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}, {'indent': 6, 'line': '      END IF;', 'line_no': 439}, {'indent': 6, 'line': '      IF (:NEW.THEME_NO <> :OLD.THEME_NO) THEN', 'line_no': 441}, {'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}, {'indent': 6, 'line': '      END IF;', 'line_no': 443}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 449}, {'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}, {'indent': 6, 'line': '      ELSE', 'line_no': 453}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}, {'indent': 6, 'line': '      END IF;', 'line_no': 456}, {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y'", 'line_no': 458}, {'indent': 6, 'line': "      AND(V_STATUS_CD <> 'C'", 'line_no': 459}, {'indent': 6, 'line': "      OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) THEN", 'line_no': 460}, {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}, {'indent': 6, 'line': '      ELSE', 'line_no': 476}, {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}, {'indent': 9, 'line': '         ELSE', 'line_no': 480}, {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}, {'indent': 9, 'line': '         END IF;', 'line_no': 483}, {'indent': 6, 'line': '      END IF;', 'line_no': 484}, {'indent': 6, 'line': '      IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 486}, {'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}, {'indent': 6, 'line': '      END IF;', 'line_no': 488}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}, {'indent': 6, 'line': '      SELECT', 'line_no': 494}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}, {'indent': 6, 'line': '      FROM', 'line_no': 496}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}, {'indent': 6, 'line': '      WHERE', 'line_no': 498}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}, {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}, {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 501}, {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}, {'indent': 6, 'line': '      END IF;', 'line_no': 503}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 508}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}, {'indent': 6, 'line': '      ELSE', 'line_no': 535}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}, {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}, {'indent': 9, 'line': '         END IF;', 'line_no': 551}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}, {'indent': 6, 'line': '      END IF;', 'line_no': 581}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}]
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1380] - elif_else_then_statements[0]['indent']: 3
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF ((:OLD.IN_PREP_IND = 'N')", 'line_no': 639}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 640}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 641}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 642}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': "      IF (TRUNC(TO_DATE(:OLD.REGISTRAT_DATE, 'DD-MM-YYYY')) = TRUNC(SYSDATE)) THEN", 'line_no': 648}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         DELETE FROM GMD.THEMES A', 'line_no': 649}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         WHERE', 'line_no': 650}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            A.THEME_NO = :OLD.THEME_NO', 'line_no': 651}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            AND TRUNC(A.REGISTRAT_DATE) = TRUNC(SYSDATE);', 'line_no': 652}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      ELSE', 'line_no': 653}
2025-08-28 06:26:51,238 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 9, 'line': '         RAISE DELETE_NO_MORE_POSSIBLE;', 'line_no': 654}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 6, 'line': '      END IF;', 'line_no': 655}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 3, 'line': '   END IF;', 'line_no': 656}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 192, 'then_line_no': 192, 'if_indent': 3, 'end_if_line_no': 656, 'then_statements': [{'indent': 6, 'line': "      IF (:NEW.IN_PREP_IND = 'N'", 'line_no': 193}, {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 194}, {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}, {'indent': 6, 'line': '      END IF;', 'line_no': 196}, {'indent': 6, 'line': '      V_MOLECULE_ID := :NEW.MOLECULE_ID;', 'line_no': 201}, {'indent': 6, 'line': "      IF (:NEW.PORTF_PROJ_CD = 'Y'", 'line_no': 202}, {'indent': 6, 'line': '      AND :NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 203}, {'indent': 9, 'line': '         IF (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) THEN', 'line_no': 204}, {'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}, {'indent': 9, 'line': '         ELSE', 'line_no': 206}, {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}, {'indent': 9, 'line': '         END IF;', 'line_no': 246}, {'indent': 6, 'line': '      END IF;', 'line_no': 247}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 251}, {'indent': 12, 'line': '            AND 9', 'line_no': 252}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 253}, {'indent': 12, 'line': '            AND 9', 'line_no': 254}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 255}, {'indent': 12, 'line': '            AND 9', 'line_no': 256}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 257}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 258}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}, {'indent': 12, 'line': '            END IF;', 'line_no': 260}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 262}, {'indent': 12, 'line': '            AND 9', 'line_no': 263}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 264}, {'indent': 12, 'line': '            AND 9', 'line_no': 265}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 266}, {'indent': 12, 'line': '            AND 9', 'line_no': 267}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 268}, {'indent': 12, 'line': '            AND 9', 'line_no': 269}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0', 'line_no': 270}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 271}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}, {'indent': 12, 'line': '            END IF;', 'line_no': 273}]}], 'else_statements': [{'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}]}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 278}, {'indent': 6, 'line': '      SELECT', 'line_no': 281}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 282}, {'indent': 6, 'line': '      FROM', 'line_no': 283}, {'indent': 9, 'line': '         (', 'line_no': 284}, {'indent': 12, 'line': '            SELECT', 'line_no': 285}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 286}, {'indent': 12, 'line': '            FROM', 'line_no': 287}, {'indent': 15, 'line': '               V_THEMES', 'line_no': 288}, {'indent': 12, 'line': '            UNION', 'line_no': 289}, {'indent': 12, 'line': '            ALL', 'line_no': 290}, {'indent': 12, 'line': '            SELECT', 'line_no': 291}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 292}, {'indent': 12, 'line': '            FROM', 'line_no': 293}, {'indent': 15, 'line': '               GMD.THEMES_ARCHIVE', 'line_no': 294}, {'indent': 9, 'line': '         )                  T', 'line_no': 295}, {'indent': 6, 'line': '      WHERE', 'line_no': 296}, {'indent': 9, 'line': '         T.THEME_NO = :NEW.THEME_NO;', 'line_no': 297}, {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 298}, {'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}, {'indent': 6, 'line': '      END IF;', 'line_no': 300}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 302}, {'indent': 6, 'line': '      V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 303}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 306}, {'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}, {'indent': 6, 'line': '      END IF;', 'line_no': 308}, {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'N') THEN", 'line_no': 310}, {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 311}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 312}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}, {'indent': 9, 'line': '         END IF;', 'line_no': 314}, {'indent': 6, 'line': '      END IF;', 'line_no': 315}, {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') THEN", 'line_no': 319}, {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}, {'indent': 9, 'line': '         );', 'line_no': 332}, {'indent': 9, 'line': '         IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 333}, {'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}, {'indent': 9, 'line': '         END IF;', 'line_no': 335}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}, {'indent': 6, 'line': '      ELSE', 'line_no': 339}, {'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}, {'indent': 6, 'line': '      END IF;', 'line_no': 344}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 346}, {'indent': 6, 'line': '      SELECT', 'line_no': 347}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 348}, {'indent': 6, 'line': '      FROM', 'line_no': 349}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 350}, {'indent': 6, 'line': '      WHERE', 'line_no': 351}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION;', 'line_no': 352}, {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 353}, {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}, {'indent': 6, 'line': '      END IF;', 'line_no': 355}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 357}, {'indent': 6, 'line': "      V_VALID_TO := TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'line_no': 358}, {'indent': 6, 'line': '      V_SHORT_NAME := NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'line_no': 359}, {'indent': 6, 'line': '      INSERT INTO GMD.THEMES(', 'line_no': 360}, {'indent': 9, 'line': '         THEME_NO,', 'line_no': 361}, {'indent': 9, 'line': '         REGISTRAT_DATE,', 'line_no': 362}, {'indent': 9, 'line': '         ODG_NO,', 'line_no': 363}, {'indent': 9, 'line': '         RESGRP_CD,', 'line_no': 364}, {'indent': 9, 'line': '         RESLIN_CD,', 'line_no': 365}, {'indent': 9, 'line': '         THEME_DESC,', 'line_no': 366}, {'indent': 9, 'line': '         SHORT_NAME,', 'line_no': 367}, {'indent': 9, 'line': '         STATUS_CD,', 'line_no': 368}, {'indent': 9, 'line': '         DBA_CD,', 'line_no': 369}, {'indent': 9, 'line': '         IN_PREP_IND,', 'line_no': 370}, {'indent': 9, 'line': '         PROD_SHORT_CD,', 'line_no': 371}, {'indent': 9, 'line': '         TRADEMARK_NO,', 'line_no': 372}, {'indent': 9, 'line': '         BIO_ACTIVITY,', 'line_no': 373}, {'indent': 9, 'line': '         APPLICANT,', 'line_no': 374}, {'indent': 9, 'line': '         CONTACT,', 'line_no': 375}, {'indent': 9, 'line': '         REGISTRAR,', 'line_no': 376}, {'indent': 9, 'line': '         LINE_EXT_INFO,', 'line_no': 377}, {'indent': 9, 'line': '         PORTF_PROJ_CD,', 'line_no': 378}, {'indent': 9, 'line': '         CO_DEV_PRTNR,', 'line_no': 379}, {'indent': 9, 'line': '         TECHNOLOGY_PRTNR,', 'line_no': 380}, {'indent': 9, 'line': '         OFFICIAL_IND,', 'line_no': 381}, {'indent': 9, 'line': '         CO_MAR_PRTNR,', 'line_no': 382}, {'indent': 9, 'line': '         VALID_TO,', 'line_no': 383}, {'indent': 9, 'line': '         PORTF_DA_GROUP_ID,', 'line_no': 384}, {'indent': 9, 'line': '         MANUAL_SHORT_DESC', 'line_no': 385}, {'indent': 6, 'line': '      ) VALUES (', 'line_no': 386}, {'indent': 9, 'line': '         :NEW.THEME_NO,', 'line_no': 387}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE,', 'line_no': 388}, {'indent': 9, 'line': '         V_ODG_NO,', 'line_no': 389}, {'indent': 9, 'line': '         V_RESGRP_CD,', 'line_no': 390}, {'indent': 9, 'line': '         V_RESLIN_CD,', 'line_no': 391}, {'indent': 9, 'line': '         V_DESCRIPTION,', 'line_no': 392}, {'indent': 9, 'line': '         V_SHORT_NAME,', 'line_no': 393}, {'indent': 9, 'line': '         V_STATUS_CD,', 'line_no': 394}, {'indent': 9, 'line': '         V_DBA_CD,', 'line_no': 395}, {'indent': 9, 'line': '         :NEW.IN_PREP_IND,', 'line_no': 396}, {'indent': 9, 'line': '         :NEW.PROD_SHORT_CD,', 'line_no': 397}, {'indent': 9, 'line': '         :NEW.TRADEMARK_NO,', 'line_no': 398}, {'indent': 9, 'line': '         :NEW.BIO_ACTIVITY,', 'line_no': 399}, {'indent': 9, 'line': '         :NEW.APPLICANT,', 'line_no': 400}, {'indent': 9, 'line': '         :NEW.CONTACT,', 'line_no': 401}, {'indent': 9, 'line': '         TXO_UTIL.GET_USERID,', 'line_no': 402}, {'indent': 9, 'line': '         :NEW.LINE_EXT_INFO,', 'line_no': 403}, {'indent': 9, 'line': '         V_PORTF_PROJ_CD,', 'line_no': 404}, {'indent': 9, 'line': '         :NEW.CO_DEV_PRTNR,', 'line_no': 405}, {'indent': 9, 'line': '         :NEW.TECHNOLOGY_PRTNR,', 'line_no': 406}, {'indent': 9, 'line': '         :NEW.OFFICIAL_IND,', 'line_no': 407}, {'indent': 9, 'line': '         :NEW.CO_MAR_PRTNR,', 'line_no': 408}, {'indent': 9, 'line': '         V_VALID_TO,', 'line_no': 409}, {'indent': 9, 'line': '         :NEW.PORTF_DA_GROUP_ID,', 'line_no': 410}, {'indent': 9, 'line': '         :NEW.MANUAL_SHORT_DESC', 'line_no': 411}, {'indent': 6, 'line': '      );', 'line_no': 412}, {'indent': 6, 'line': '      IF (:OLD.MOLECULE_ID IS NULL', 'line_no': 413}, {'indent': 6, 'line': '      AND :NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 414}, {'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}, {'indent': 6, 'line': '      END IF;', 'line_no': 428}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 432, 'elif_indent': 3, 'condition': '(UPDATING)', 'then_line_no': 432, 'then_statements': [{'indent': 6, 'line': "      IF (:OLD.IN_PREP_IND = 'N'", 'line_no': 435}, {'indent': 6, 'line': "      OR (:OLD.IN_PREP_IND = 'Y'", 'line_no': 436}, {'indent': 6, 'line': "      AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 THEN", 'line_no': 437}, {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}, {'indent': 6, 'line': '      END IF;', 'line_no': 439}, {'indent': 6, 'line': '      IF (:NEW.THEME_NO <> :OLD.THEME_NO) THEN', 'line_no': 441}, {'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}, {'indent': 6, 'line': '      END IF;', 'line_no': 443}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 449}, {'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}, {'indent': 6, 'line': '      ELSE', 'line_no': 453}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}, {'indent': 6, 'line': '      END IF;', 'line_no': 456}, {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y'", 'line_no': 458}, {'indent': 6, 'line': "      AND(V_STATUS_CD <> 'C'", 'line_no': 459}, {'indent': 6, 'line': "      OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) THEN", 'line_no': 460}, {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}, {'indent': 6, 'line': '      ELSE', 'line_no': 476}, {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}, {'indent': 9, 'line': '         ELSE', 'line_no': 480}, {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}, {'indent': 9, 'line': '         END IF;', 'line_no': 483}, {'indent': 6, 'line': '      END IF;', 'line_no': 484}, {'indent': 6, 'line': '      IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 486}, {'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}, {'indent': 6, 'line': '      END IF;', 'line_no': 488}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}, {'indent': 6, 'line': '      SELECT', 'line_no': 494}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}, {'indent': 6, 'line': '      FROM', 'line_no': 496}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}, {'indent': 6, 'line': '      WHERE', 'line_no': 498}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}, {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}, {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 501}, {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}, {'indent': 6, 'line': '      END IF;', 'line_no': 503}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}, {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 508}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}, {'indent': 6, 'line': '      ELSE', 'line_no': 535}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}, {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}, {'indent': 9, 'line': '         END IF;', 'line_no': 551}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}, {'indent': 6, 'line': '      END IF;', 'line_no': 581}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}]}], 'else_statements': []}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.IN_PREP_IND = 'N'", 'line_no': 193}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 193
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 193 i: 196
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 4
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND V_IS_ADMIN_CNT = 0) THEN', 'line_no': 194}
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}]
2025-08-28 06:26:51,239 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_MOLECULE_ID := :NEW.MOLECULE_ID;', 'line_no': 201}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.PORTF_PROJ_CD = 'Y'", 'line_no': 202}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 202
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 202 i: 247
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 44
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND :NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 203}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         IF (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) THEN', 'line_no': 204}, {'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}, {'indent': 9, 'line': '         ELSE', 'line_no': 206}, {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}, {'indent': 9, 'line': '         END IF;', 'line_no': 246}]
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'indent': 9, 'line': '         IF (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) THEN', 'line_no': 204}, {'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}, {'indent': 9, 'line': '         ELSE', 'line_no': 206}, {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}, {'indent': 9, 'line': '         END IF;', 'line_no': 246}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) THEN', 'line_no': 204}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 204
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 204 i: 246
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 41
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 207, 246
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}]}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}
2025-08-28 06:26:51,240 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               'Y',", 'line_no': 216}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               'N',", 'line_no': 218}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            );', 'line_no': 221}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 222}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 224}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 226}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}
2025-08-28 06:26:51,241 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               1,', 'line_no': 243}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               'Y'", 'line_no': 244}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            );', 'line_no': 245}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 251}, {'indent': 12, 'line': '            AND 9', 'line_no': 252}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 253}, {'indent': 12, 'line': '            AND 9', 'line_no': 254}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 255}, {'indent': 12, 'line': '            AND 9', 'line_no': 256}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 257}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 258}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}, {'indent': 12, 'line': '            END IF;', 'line_no': 260}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 262}, {'indent': 12, 'line': '            AND 9', 'line_no': 263}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 264}, {'indent': 12, 'line': '            AND 9', 'line_no': 265}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 266}, {'indent': 12, 'line': '            AND 9', 'line_no': 267}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 268}, {'indent': 12, 'line': '            AND 9', 'line_no': 269}, {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0', 'line_no': 270}, {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 271}, {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}, {'indent': 12, 'line': '            END IF;', 'line_no': 273}]}], 'else_statements': [{'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}]}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 251}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 251
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 251 i: 260
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 10
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 252}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 253}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 254}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 255}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 256}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 257}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 258}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}]
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,242 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0', 'line_no': 262}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 262
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 262 i: 273
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 263}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0', 'line_no': 264}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 265}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0', 'line_no': 266}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 267}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0', 'line_no': 268}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9', 'line_no': 269}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0', 'line_no': 270}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND 9) THEN', 'line_no': 271}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}]
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 278}
2025-08-28 06:26:51,243 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      SELECT', 'line_no': 281}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 282}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      FROM', 'line_no': 283}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         (', 'line_no': 284}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 285}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               THEME_NO', 'line_no': 286}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 287}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               V_THEMES', 'line_no': 288}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UNION', 'line_no': 289}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ALL', 'line_no': 290}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 291}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               THEME_NO', 'line_no': 292}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 293}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               GMD.THEMES_ARCHIVE', 'line_no': 294}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         )                  T', 'line_no': 295}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      WHERE', 'line_no': 296}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         T.THEME_NO = :NEW.THEME_NO;', 'line_no': 297}
2025-08-28 06:26:51,244 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 298}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 298
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 298 i: 300
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}]
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 302}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 303}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 306}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 306
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 306 i: 308
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}]
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,245 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'N') THEN", 'line_no': 310}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 310
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 310 i: 315
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 6
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 311}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 312}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}, {'indent': 9, 'line': '         END IF;', 'line_no': 314}]
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 311}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 312}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}, {'indent': 9, 'line': '         END IF;', 'line_no': 314}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 311}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 311
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 311 i: 314
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 4
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 312}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}]
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,246 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}
2025-08-28 06:26:51,247 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') THEN", 'line_no': 319}
2025-08-28 06:26:51,247 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 319
2025-08-28 06:26:51,247 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 319 i: 344
2025-08-28 06:26:51,247 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 23
2025-08-28 06:26:51,247 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 342, 344
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}, {'indent': 9, 'line': '         );', 'line_no': 332}, {'indent': 9, 'line': '         IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 333}, {'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}, {'indent': 9, 'line': '         END IF;', 'line_no': 335}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}]}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}
2025-08-28 06:26:51,248 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         );', 'line_no': 332}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 333}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 333
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 333 i: 335
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}]
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 346}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      SELECT', 'line_no': 347}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 348}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      FROM', 'line_no': 349}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_THEMES T', 'line_no': 350}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      WHERE', 'line_no': 351}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION;', 'line_no': 352}
2025-08-28 06:26:51,249 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 353}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 353
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 353 i: 355
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}]
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 357}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      V_VALID_TO := TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'line_no': 358}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_SHORT_NAME := NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'line_no': 359}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      INSERT INTO GMD.THEMES(', 'line_no': 360}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         THEME_NO,', 'line_no': 361}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         REGISTRAT_DATE,', 'line_no': 362}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         ODG_NO,', 'line_no': 363}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RESGRP_CD,', 'line_no': 364}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RESLIN_CD,', 'line_no': 365}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         THEME_DESC,', 'line_no': 366}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SHORT_NAME,', 'line_no': 367}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         STATUS_CD,', 'line_no': 368}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         DBA_CD,', 'line_no': 369}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IN_PREP_IND,', 'line_no': 370}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         PROD_SHORT_CD,', 'line_no': 371}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         TRADEMARK_NO,', 'line_no': 372}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         BIO_ACTIVITY,', 'line_no': 373}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         APPLICANT,', 'line_no': 374}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         CONTACT,', 'line_no': 375}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         REGISTRAR,', 'line_no': 376}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         LINE_EXT_INFO,', 'line_no': 377}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         PORTF_PROJ_CD,', 'line_no': 378}
2025-08-28 06:26:51,250 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         CO_DEV_PRTNR,', 'line_no': 379}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         TECHNOLOGY_PRTNR,', 'line_no': 380}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         OFFICIAL_IND,', 'line_no': 381}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         CO_MAR_PRTNR,', 'line_no': 382}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         VALID_TO,', 'line_no': 383}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         PORTF_DA_GROUP_ID,', 'line_no': 384}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         MANUAL_SHORT_DESC', 'line_no': 385}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      ) VALUES (', 'line_no': 386}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.THEME_NO,', 'line_no': 387}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_D_REGISTRAT_DATE,', 'line_no': 388}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_ODG_NO,', 'line_no': 389}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_RESGRP_CD,', 'line_no': 390}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_RESLIN_CD,', 'line_no': 391}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION,', 'line_no': 392}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_SHORT_NAME,', 'line_no': 393}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_STATUS_CD,', 'line_no': 394}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DBA_CD,', 'line_no': 395}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.IN_PREP_IND,', 'line_no': 396}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.PROD_SHORT_CD,', 'line_no': 397}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.TRADEMARK_NO,', 'line_no': 398}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.BIO_ACTIVITY,', 'line_no': 399}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.APPLICANT,', 'line_no': 400}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.CONTACT,', 'line_no': 401}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         TXO_UTIL.GET_USERID,', 'line_no': 402}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.LINE_EXT_INFO,', 'line_no': 403}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_PORTF_PROJ_CD,', 'line_no': 404}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.CO_DEV_PRTNR,', 'line_no': 405}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.TECHNOLOGY_PRTNR,', 'line_no': 406}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.OFFICIAL_IND,', 'line_no': 407}
2025-08-28 06:26:51,251 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.CO_MAR_PRTNR,', 'line_no': 408}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_VALID_TO,', 'line_no': 409}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.PORTF_DA_GROUP_ID,', 'line_no': 410}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         :NEW.MANUAL_SHORT_DESC', 'line_no': 411}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      );', 'line_no': 412}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:OLD.MOLECULE_ID IS NULL', 'line_no': 413}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 413
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 413 i: 428
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 14
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND :NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 414}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}]
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}
2025-08-28 06:26:51,252 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            1,', 'line_no': 425}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            'Y'", 'line_no': 426}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         );', 'line_no': 427}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:OLD.IN_PREP_IND = 'N'", 'line_no': 435}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 435
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 435 i: 439
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': "      OR (:OLD.IN_PREP_IND = 'Y'", 'line_no': 436}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': "      AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 THEN", 'line_no': 437}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}]
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:NEW.THEME_NO <> :OLD.THEME_NO) THEN', 'line_no': 441}
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 441
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 441 i: 443
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}]
2025-08-28 06:26:51,253 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 449}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 449
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 449 i: 456
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 455, 456
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}]}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (UPPER(:NEW.PORTF_PROJ_CD) = 'Y'", 'line_no': 458}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 458
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 458 i: 484
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 27
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': "      AND(V_STATUS_CD <> 'C'", 'line_no': 459}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': "      OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) THEN", 'line_no': 460}
2025-08-28 06:26:51,254 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 477, 484
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}, {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}, {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}, {'indent': 9, 'line': '         ELSE', 'line_no': 480}, {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}, {'indent': 9, 'line': '         END IF;', 'line_no': 483}]}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         );', 'line_no': 473}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (:NEW.THEME_DESC IS NULL', 'line_no': 477}
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 477
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 477 i: 483
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 7
2025-08-28 06:26:51,255 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 9, 'line': '         OR LENGTH(:NEW.THEME_DESC) = 0) THEN', 'line_no': 478}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 481, 483
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}]}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (LENGTH(V_DESCRIPTION) > 90) THEN', 'line_no': 486}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 486
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 486 i: 488
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}]
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      SELECT', 'line_no': 494}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      FROM', 'line_no': 496}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      WHERE', 'line_no': 498}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (V_COUNTER > 0) THEN', 'line_no': 501}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 501
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 501 i: 503
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}]
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,256 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      IF (:NEW.OFFICIAL_IND = 'N') THEN", 'line_no': 508}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 508
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 508 i: 581
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 68
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 539, 581
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}, {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}, {'indent': 9, 'line': '         END IF;', 'line_no': 551}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}]}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SET', 'line_no': 510}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}
2025-08-28 06:26:51,257 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 532}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 542}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 544}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 546}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (V_COUNTER > 0) THEN', 'line_no': 549}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 549
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 549 i: 551
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}]
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}
2025-08-28 06:26:51,258 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SET', 'line_no': 555}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 579}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}, {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}, {'indent': 12, 'line': '            ELSE', 'line_no': 623}, {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}, {'indent': 12, 'line': '            END IF;', 'line_no': 634}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}
2025-08-28 06:26:51,259 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               1,', 'line_no': 598}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               'Y'", 'line_no': 599}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            );', 'line_no': 600}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 605}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 608}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 613}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 615}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 617}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (V_SEC_MOL_CNT > 0) THEN', 'line_no': 621}
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 621
2025-08-28 06:26:51,260 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 621 i: 634
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 626, 634
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}], 'if_elses': [], 'else_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}]}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               SET', 'line_no': 627}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               WHERE', 'line_no': 629}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NULL;', 'line_no': 636}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (INSERTING', 'line_no': 660}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 660
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 660 i: 747
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 71
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 3, 'line': '   OR UPDATING) THEN', 'line_no': 661}
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 662}, {'indent': 6, 'line': '      AND :OLD.PROPOSAL_ID IS NULL) THEN', 'line_no': 663}, {'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT = 0) THEN', 'line_no': 677}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}, {'indent': 9, 'line': '         END IF;', 'line_no': 686}, {'indent': 6, 'line': '      ELSE', 'line_no': 687}, {'indent': 9, 'line': '         IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 688}, {'indent': 9, 'line': '         AND :OLD.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 689}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}, {'indent': 9, 'line': '         ELSE', 'line_no': 696}, {'indent': 12, 'line': '            IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 697}, {'indent': 12, 'line': '            AND :OLD.PROPOSAL_ID IS NOT NULL', 'line_no': 698}, {'indent': 12, 'line': '            AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) THEN', 'line_no': 699}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}, {'indent': 12, 'line': '            END IF;', 'line_no': 718}, {'indent': 9, 'line': '         END IF;', 'line_no': 719}, {'indent': 6, 'line': '      END IF;', 'line_no': 720}, {'indent': 6, 'line': '      IF (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0)', 'line_no': 724}, {'indent': 6, 'line': "      AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) THEN", 'line_no': 725}, {'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT > 0) THEN', 'line_no': 735}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}, {'indent': 9, 'line': '         END IF;', 'line_no': 745}, {'indent': 6, 'line': '      END IF;', 'line_no': 746}]
2025-08-28 06:26:51,261 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 660, 'then_line_no': 661, 'if_indent': 3, 'end_if_line_no': 747, 'then_statements': [{'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 662}, {'indent': 6, 'line': '      AND :OLD.PROPOSAL_ID IS NULL) THEN', 'line_no': 663}, {'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT = 0) THEN', 'line_no': 677}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}, {'indent': 9, 'line': '         END IF;', 'line_no': 686}, {'indent': 6, 'line': '      ELSE', 'line_no': 687}, {'indent': 9, 'line': '         IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 688}, {'indent': 9, 'line': '         AND :OLD.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 689}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}, {'indent': 9, 'line': '         ELSE', 'line_no': 696}, {'indent': 12, 'line': '            IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 697}, {'indent': 12, 'line': '            AND :OLD.PROPOSAL_ID IS NOT NULL', 'line_no': 698}, {'indent': 12, 'line': '            AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) THEN', 'line_no': 699}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}, {'indent': 12, 'line': '            END IF;', 'line_no': 718}, {'indent': 9, 'line': '         END IF;', 'line_no': 719}, {'indent': 6, 'line': '      END IF;', 'line_no': 720}, {'indent': 6, 'line': '      IF (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0)', 'line_no': 724}, {'indent': 6, 'line': "      AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) THEN", 'line_no': 725}, {'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT > 0) THEN', 'line_no': 735}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}, {'indent': 9, 'line': '         END IF;', 'line_no': 745}, {'indent': 6, 'line': '      END IF;', 'line_no': 746}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 662}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 662
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 662 i: 720
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 49
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND :OLD.PROPOSAL_ID IS NULL) THEN', 'line_no': 663}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 688, 720
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT = 0) THEN', 'line_no': 677}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}, {'indent': 9, 'line': '         END IF;', 'line_no': 686}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 688}, {'indent': 9, 'line': '         AND :OLD.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 689}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}, {'indent': 9, 'line': '         ELSE', 'line_no': 696}, {'indent': 12, 'line': '            IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 697}, {'indent': 12, 'line': '            AND :OLD.PROPOSAL_ID IS NOT NULL', 'line_no': 698}, {'indent': 12, 'line': '            AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) THEN', 'line_no': 699}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}, {'indent': 12, 'line': '            END IF;', 'line_no': 718}, {'indent': 9, 'line': '         END IF;', 'line_no': 719}]}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 666}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 668}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 670}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT = 0) THEN', 'line_no': 677}
2025-08-28 06:26:51,262 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 677
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 677 i: 686
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 10
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}]
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 679}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 684}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 688}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 688
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 688 i: 719
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 28
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 9, 'line': '         AND :OLD.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 689}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 697, 719
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 697}, {'indent': 12, 'line': '            AND :OLD.PROPOSAL_ID IS NOT NULL', 'line_no': 698}, {'indent': 12, 'line': '            AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) THEN', 'line_no': 699}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}, {'indent': 12, 'line': '            END IF;', 'line_no': 718}]}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 691}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}
2025-08-28 06:26:51,263 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 694}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 697}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 697
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 697 i: 718
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 18
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND :OLD.PROPOSAL_ID IS NOT NULL', 'line_no': 698}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) THEN', 'line_no': 699}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}]
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               SET', 'line_no': 703}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               WHERE', 'line_no': 706}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               SET', 'line_no': 711}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               WHERE', 'line_no': 716}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0)', 'line_no': 724}
2025-08-28 06:26:51,264 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 724
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 724 i: 746
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 19
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': "      AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) THEN", 'line_no': 725}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT > 0) THEN', 'line_no': 735}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}, {'indent': 9, 'line': '         END IF;', 'line_no': 745}]
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT > 0) THEN', 'line_no': 735}, {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}, {'indent': 9, 'line': '         END IF;', 'line_no': 745}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 728}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 730}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 732}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (V_EVOLVED_NMP_CNT > 0) THEN', 'line_no': 735}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 735
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 735 i: 745
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 9
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}]
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 739}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 742}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}
2025-08-28 06:26:51,265 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 3, 'line': '   IF (INSERTING', 'line_no': 751}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 751
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 751 i: 803
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 36
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 3, 'line': '   AND :NEW.THEME_NO IS NOT NULL', 'line_no': 752}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 3, 'line': "   AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') THEN", 'line_no': 753}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 754}, {'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}, {'indent': 6, 'line': '      END IF;', 'line_no': 763}, {'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 767}, {'indent': 6, 'line': '      OR (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 768}, {'indent': 6, 'line': '      AND V_EVOLVED_NMP_CNT = 0)) THEN', 'line_no': 769}, {'indent': 9, 'line': '         IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 770}, {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}, {'indent': 9, 'line': '         END IF;', 'line_no': 785}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}, {'indent': 6, 'line': '      END IF;', 'line_no': 802}]
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_line_no': 751, 'then_line_no': 753, 'if_indent': 3, 'end_if_line_no': 803, 'then_statements': [{'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 754}, {'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}, {'indent': 6, 'line': '      END IF;', 'line_no': 763}, {'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 767}, {'indent': 6, 'line': '      OR (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 768}, {'indent': 6, 'line': '      AND V_EVOLVED_NMP_CNT = 0)) THEN', 'line_no': 769}, {'indent': 9, 'line': '         IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 770}, {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}, {'indent': 9, 'line': '         END IF;', 'line_no': 785}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}, {'indent': 6, 'line': '      END IF;', 'line_no': 802}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NOT NULL) THEN', 'line_no': 754}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 754
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 754 i: 763
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 10
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}]
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         SELECT', 'line_no': 755}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         FROM', 'line_no': 757}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         WHERE', 'line_no': 759}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}
2025-08-28 06:26:51,266 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      IF (:NEW.PROPOSAL_ID IS NULL', 'line_no': 767}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 767
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 767 i: 802
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 22
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      OR (:NEW.PROPOSAL_ID IS NOT NULL', 'line_no': 768}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 6, 'line': '      AND V_EVOLVED_NMP_CNT = 0)) THEN', 'line_no': 769}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 9, 'line': '         IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 770}, {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}, {'indent': 9, 'line': '         END IF;', 'line_no': 785}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}]
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'indent': 9, 'line': '         IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 770}, {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}, {'indent': 9, 'line': '         END IF;', 'line_no': 785}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 770}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 770
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 770 i: 785
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}]
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               SELECT', 'line_no': 772}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               FROM', 'line_no': 776}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 15, 'line': '               WHERE', 'line_no': 778}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}
2025-08-28 06:26:51,267 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            'E',", 'line_no': 795}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         );', 'line_no': 801}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');", 'line_no': 826}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');", 'line_no': 828}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');", 'line_no': 830}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');", 'line_no': 832}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');", 'line_no': 834}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');", 'line_no': 836}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');", 'line_no': 838}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');", 'line_no': 840}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Theme Description "\'', 'line_no': 842}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || V_DESCRIPTION', 'line_no': 843}
2025-08-28 06:26:51,268 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 844}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Short Description Proposal "\'', 'line_no': 846}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_PROPOSAL', 'line_no': 847}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 848}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Downstream Theme Description "\'', 'line_no': 850}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_ALT', 'line_no': 851}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 852}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');", 'line_no': 854}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');", 'line_no': 856}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');", 'line_no': 858}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\' );', 'line_no': 860}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');", 'line_no': 862}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');", 'line_no': 864}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(', 'line_no': 866}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 9, 'line': '         -20900,', 'line_no': 867}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 7, 'line': "       'Debug in Themes IOF standard'", 'line_no': 868}
2025-08-28 06:26:51,269 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 7, 'line': '       );', 'line_no': 869}
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 3, 'line': '   SELECT', 'line_no': 54}, {'indent': 6, 'line': '      NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID', 'line_no': 55}, {'indent': 3, 'line': '   FROM', 'line_no': 56}, {'indent': 6, 'line': '      DUAL;', 'line_no': 57}, {'indent': 3, 'line': '   SELECT', 'line_no': 61}, {'indent': 6, 'line': '      COUNT(*) INTO V_IS_ADMIN_CNT', 'line_no': 62}, {'indent': 3, 'line': '   FROM', 'line_no': 63}, {'indent': 6, 'line': '      TXO_USERS_ROLES_MAP', 'line_no': 64}, {'indent': 3, 'line': '   WHERE', 'line_no': 65}, {'indent': 6, 'line': '      ROLE_ID IN (315)', 'line_no': 66}, {'indent': 6, 'line': '      AND USERID = V_USERID;', 'line_no': 67}, {'indent': 3, 'line': '   SELECT', 'line_no': 70}, {'indent': 6, 'line': '      NEW_RG_NO INTO V_NEW_RG_NO', 'line_no': 71}, {'indent': 3, 'line': '   FROM', 'line_no': 72}, {'indent': 6, 'line': '      (', 'line_no': 73}, {'indent': 9, 'line': '         SELECT', 'line_no': 74}, {'indent': 12, 'line': '            NEW_RG_NO', 'line_no': 75}, {'indent': 9, 'line': '         FROM', 'line_no': 76}, {'indent': 12, 'line': '            (', 'line_no': 77}, {'indent': 15, 'line': '               SELECT', 'line_no': 78}, {'indent': 18, 'line': '                  ROWNUM AS NEW_RG_NO', 'line_no': 79}, {'indent': 15, 'line': '               FROM', 'line_no': 80}, {'indent': 18, 'line': '                  DUAL', 'line_no': 81}, {'indent': 15, 'line': '               CONNECT BY', 'line_no': 82}, {'indent': 18, 'line': '                  1 = 1', 'line_no': 83}, {'indent': 18, 'line': '                  AND ROWNUM <= 6999', 'line_no': 84}, {'indent': 12, 'line': '            )', 'line_no': 85}, {'indent': 9, 'line': '         WHERE', 'line_no': 86}, {'indent': 12, 'line': '            NEW_RG_NO > 5999 MINUS', 'line_no': 87}, {'indent': 12, 'line': '            SELECT', 'line_no': 88}, {'indent': 15, 'line': '               TO_NUMBER(RG_NO)', 'line_no': 89}, {'indent': 12, 'line': '            FROM', 'line_no': 90}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 91}, {'indent': 6, 'line': '      )', 'line_no': 92}, {'indent': 3, 'line': '   WHERE', 'line_no': 93}, {'indent': 6, 'line': '      ROWNUM = 1;', 'line_no': 94}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 95, 'then_line_no': 96, 'if_indent': 3, 'end_if_line_no': 111, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 115, 'then_line_no': 115, 'if_indent': 3, 'end_if_line_no': 145, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 133}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 3, 'line': '   V_ODG_NO := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'line_no': 150}, {'indent': 3, 'line': '   V_RESGRP_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'line_no': 151}, {'indent': 3, 'line': '   V_RESLIN_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'line_no': 152}, {'indent': 3, 'line': '   V_RESLIN_DESC := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'line_no': 153}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 154, 'then_line_no': 154, 'if_indent': 3, 'end_if_line_no': 163, 'then_statements': [{'indent': 6, 'line': '      SELECT', 'line_no': 155}, {'indent': 9, 'line': '         STATUS_CD INTO V_STATUS_CD', 'line_no': 156}, {'indent': 6, 'line': '      FROM', 'line_no': 157}, {'indent': 9, 'line': '         MDM_V_THEME_STATUS', 'line_no': 158}, {'indent': 6, 'line': '      WHERE', 'line_no': 159}, {'indent': 9, 'line': '         STATE_DESC = :NEW.STATUS_DESC;', 'line_no': 160}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_STATUS_CD := NULL;', 'line_no': 162}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 165, 'then_line_no': 165, 'if_indent': 3, 'end_if_line_no': 176, 'then_statements': [{'indent': 6, 'line': '      SELECT', 'line_no': 166}, {'indent': 9, 'line': '         DBA_CD INTO V_DBA_CD', 'line_no': 167}, {'indent': 6, 'line': '      FROM', 'line_no': 168}, {'indent': 9, 'line': '         MDM_V_DISEASE_BIOLOGY_AREAS', 'line_no': 169}, {'indent': 6, 'line': '      WHERE', 'line_no': 170}, {'indent': 9, 'line': '         DBA_SHORT_DESC', 'line_no': 171}, {'indent': 9, 'line': "         || ' - '", 'line_no': 172}, {'indent': 9, 'line': '         || DBA_DESC = :NEW.DBA_DESC_CONCAT;', 'line_no': 173}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_DBA_CD := NULL;', 'line_no': 175}]}, {'indent': 3, 'line': '   V_MOLEC_IN_LIC_PRTNR := GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'line_no': 178}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 179, 'then_line_no': 179, 'if_indent': 3, 'end_if_line_no': 183, 'then_statements': [{'indent': 6, 'line': '      V_TRADEMARK_NO := :NEW.TRADEMARK_NO;', 'line_no': 180}], 'if_elses': [], 'else_statements': [{'indent': 6, 'line': '      V_TRADEMARK_NO := :OLD.TRADEMARK_NO;', 'line_no': 182}]}, {'indent': 3, 'line': "   V_THEME_DESC_PROPOSAL := GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'line_no': 185}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_line_no': 186, 'then_line_no': 187, 'if_indent': 3, 'end_if_line_no': 189, 'then_statements': [{'indent': 6, 'line': '      RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'line_no': 188}], 'if_elses': [], 'else_statements': []}, {'indent': 3, 'line': '   V_SHORT_NAME := COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'line_no': 191}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 192, 'then_line_no': 192, 'if_indent': 3, 'end_if_line_no': 656, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_MOLECULE_ID := :NEW.MOLECULE_ID;', 'line_no': 201}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}]}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 278}, {'indent': 6, 'line': '      SELECT', 'line_no': 281}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 282}, {'indent': 6, 'line': '      FROM', 'line_no': 283}, {'indent': 9, 'line': '         (', 'line_no': 284}, {'indent': 12, 'line': '            SELECT', 'line_no': 285}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 286}, {'indent': 12, 'line': '            FROM', 'line_no': 287}, {'indent': 15, 'line': '               V_THEMES', 'line_no': 288}, {'indent': 12, 'line': '            UNION', 'line_no': 289}, {'indent': 12, 'line': '            ALL', 'line_no': 290}, {'indent': 12, 'line': '            SELECT', 'line_no': 291}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 292}, {'indent': 12, 'line': '            FROM', 'line_no': 293}, {'indent': 15, 'line': '               GMD.THEMES_ARCHIVE', 'line_no': 294}, {'indent': 9, 'line': '         )                  T', 'line_no': 295}, {'indent': 6, 'line': '      WHERE', 'line_no': 296}, {'indent': 9, 'line': '         T.THEME_NO = :NEW.THEME_NO;', 'line_no': 297}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 302}, {'indent': 6, 'line': '      V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 303}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}, {'indent': 9, 'line': '         );', 'line_no': 332}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}]}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 346}, {'indent': 6, 'line': '      SELECT', 'line_no': 347}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 348}, {'indent': 6, 'line': '      FROM', 'line_no': 349}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 350}, {'indent': 6, 'line': '      WHERE', 'line_no': 351}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION;', 'line_no': 352}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 357}, {'indent': 6, 'line': "      V_VALID_TO := TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'line_no': 358}, {'indent': 6, 'line': '      V_SHORT_NAME := NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'line_no': 359}, {'indent': 6, 'line': '      INSERT INTO GMD.THEMES(', 'line_no': 360}, {'indent': 9, 'line': '         THEME_NO,', 'line_no': 361}, {'indent': 9, 'line': '         REGISTRAT_DATE,', 'line_no': 362}, {'indent': 9, 'line': '         ODG_NO,', 'line_no': 363}, {'indent': 9, 'line': '         RESGRP_CD,', 'line_no': 364}, {'indent': 9, 'line': '         RESLIN_CD,', 'line_no': 365}, {'indent': 9, 'line': '         THEME_DESC,', 'line_no': 366}, {'indent': 9, 'line': '         SHORT_NAME,', 'line_no': 367}, {'indent': 9, 'line': '         STATUS_CD,', 'line_no': 368}, {'indent': 9, 'line': '         DBA_CD,', 'line_no': 369}, {'indent': 9, 'line': '         IN_PREP_IND,', 'line_no': 370}, {'indent': 9, 'line': '         PROD_SHORT_CD,', 'line_no': 371}, {'indent': 9, 'line': '         TRADEMARK_NO,', 'line_no': 372}, {'indent': 9, 'line': '         BIO_ACTIVITY,', 'line_no': 373}, {'indent': 9, 'line': '         APPLICANT,', 'line_no': 374}, {'indent': 9, 'line': '         CONTACT,', 'line_no': 375}, {'indent': 9, 'line': '         REGISTRAR,', 'line_no': 376}, {'indent': 9, 'line': '         LINE_EXT_INFO,', 'line_no': 377}, {'indent': 9, 'line': '         PORTF_PROJ_CD,', 'line_no': 378}, {'indent': 9, 'line': '         CO_DEV_PRTNR,', 'line_no': 379}, {'indent': 9, 'line': '         TECHNOLOGY_PRTNR,', 'line_no': 380}, {'indent': 9, 'line': '         OFFICIAL_IND,', 'line_no': 381}, {'indent': 9, 'line': '         CO_MAR_PRTNR,', 'line_no': 382}, {'indent': 9, 'line': '         VALID_TO,', 'line_no': 383}, {'indent': 9, 'line': '         PORTF_DA_GROUP_ID,', 'line_no': 384}, {'indent': 9, 'line': '         MANUAL_SHORT_DESC', 'line_no': 385}, {'indent': 6, 'line': '      ) VALUES (', 'line_no': 386}, {'indent': 9, 'line': '         :NEW.THEME_NO,', 'line_no': 387}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE,', 'line_no': 388}, {'indent': 9, 'line': '         V_ODG_NO,', 'line_no': 389}, {'indent': 9, 'line': '         V_RESGRP_CD,', 'line_no': 390}, {'indent': 9, 'line': '         V_RESLIN_CD,', 'line_no': 391}, {'indent': 9, 'line': '         V_DESCRIPTION,', 'line_no': 392}, {'indent': 9, 'line': '         V_SHORT_NAME,', 'line_no': 393}, {'indent': 9, 'line': '         V_STATUS_CD,', 'line_no': 394}, {'indent': 9, 'line': '         V_DBA_CD,', 'line_no': 395}, {'indent': 9, 'line': '         :NEW.IN_PREP_IND,', 'line_no': 396}, {'indent': 9, 'line': '         :NEW.PROD_SHORT_CD,', 'line_no': 397}, {'indent': 9, 'line': '         :NEW.TRADEMARK_NO,', 'line_no': 398}, {'indent': 9, 'line': '         :NEW.BIO_ACTIVITY,', 'line_no': 399}, {'indent': 9, 'line': '         :NEW.APPLICANT,', 'line_no': 400}, {'indent': 9, 'line': '         :NEW.CONTACT,', 'line_no': 401}, {'indent': 9, 'line': '         TXO_UTIL.GET_USERID,', 'line_no': 402}, {'indent': 9, 'line': '         :NEW.LINE_EXT_INFO,', 'line_no': 403}, {'indent': 9, 'line': '         V_PORTF_PROJ_CD,', 'line_no': 404}, {'indent': 9, 'line': '         :NEW.CO_DEV_PRTNR,', 'line_no': 405}, {'indent': 9, 'line': '         :NEW.TECHNOLOGY_PRTNR,', 'line_no': 406}, {'indent': 9, 'line': '         :NEW.OFFICIAL_IND,', 'line_no': 407}, {'indent': 9, 'line': '         :NEW.CO_MAR_PRTNR,', 'line_no': 408}, {'indent': 9, 'line': '         V_VALID_TO,', 'line_no': 409}, {'indent': 9, 'line': '         :NEW.PORTF_DA_GROUP_ID,', 'line_no': 410}, {'indent': 9, 'line': '         :NEW.MANUAL_SHORT_DESC', 'line_no': 411}, {'indent': 6, 'line': '      );', 'line_no': 412}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 432, 'elif_indent': 3, 'condition': '(UPDATING)', 'then_line_no': 432, 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}, {'indent': 6, 'line': '      SELECT', 'line_no': 494}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}, {'indent': 6, 'line': '      FROM', 'line_no': 496}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}, {'indent': 6, 'line': '      WHERE', 'line_no': 498}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}, {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}]}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}], 'if_elses': [], 'else_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}]}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 660, 'then_line_no': 661, 'if_indent': 3, 'end_if_line_no': 747, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_line_no': 751, 'then_line_no': 753, 'if_indent': 3, 'end_if_line_no': 803, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    SELECT || 54 || 3
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 54 || select_statement
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 57 || select_statement
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,270 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    SELECT || 61 || 3
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 61 || select_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 67 || select_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    SELECT || 70 || 3
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 70 || select_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 94 || select_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 36
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_PORTF_PROJ;', 'line_no': 98}]
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE IN_PREP_NOT_PORTF_PROJ; || 98 || 9
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 98 || raise_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 98 || raise_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE IN_PREP_NOT_CLOSED;', 'line_no': 103}]
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE IN_PREP_NOT_CLOSED; || 103 || 9
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 103 || raise_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 103 || raise_statement
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,271 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}]
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || 107 || 9
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                               || :NEW.THEME_NO || 108 || 30
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                               || '!'); || 109 || 30
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 37
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 133}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         SELECT', 'line_no': 117}, {'indent': 12, 'line': '            RG_NO,', 'line_no': 118}, {'indent': 12, 'line': '            M.COMPARATOR_IND INTO V_MOLECULE_RG_NO,', 'line_no': 119}, {'indent': 12, 'line': '            V_COMPARATOR_IND', 'line_no': 120}, {'indent': 9, 'line': '         FROM', 'line_no': 121}, {'indent': 12, 'line': '            V_THEME_MOLECULES M', 'line_no': 122}, {'indent': 9, 'line': '         WHERE', 'line_no': 123}, {'indent': 12, 'line': '            MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 124}, {'indent': 12, 'line': "            AND M.VALID_IND = 'Y';", 'line_no': 125}]
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          SELECT || 117 || 9
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 117 || select_statement
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 125 || select_statement
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';
2025-08-28 06:26:51,272 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE INVALID_MOLECULE_ID;', 'line_no': 128}]
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE INVALID_MOLECULE_ID; || 128 || 12
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 128 || raise_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 128 || raise_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 133}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}]}]
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            NULL;', 'line_no': 133}]
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             NULL; || 133 || 12
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 133 || null_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 133 || null_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE V_THEME_MOLECULES', 'line_no': 137}, {'indent': 12, 'line': '            SET', 'line_no': 138}, {'indent': 15, 'line': '               RG_NO = V_NEW_RG_NO', 'line_no': 139}, {'indent': 12, 'line': '            WHERE', 'line_no': 140}, {'indent': 15, 'line': '               MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 141}, {'indent': 12, 'line': '            v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'line_no': 142}]
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE V_THEME_MOLECULES || 137 || 12
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 137 || update_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 141 || update_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             v_bonus := CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END; || 142 || 12
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 142 || update_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 142 || update_statement
2025-08-28 06:26:51,273 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_line_no': 142, 'assignment_indent': 12}
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 38
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_ODG_NO := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2); || 150 || 3
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 150 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 150 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_line_no': 150, 'assignment_indent': 3}
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 39
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_RESGRP_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2); || 151 || 3
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 151 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 151 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_line_no': 151, 'assignment_indent': 3}
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 40
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_RESLIN_CD := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2); || 152 || 3
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 152 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 152 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_line_no': 152, 'assignment_indent': 3}
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 41
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_RESLIN_DESC := SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT)); || 153 || 3
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 153 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 153 || select_statement
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_line_no': 153, 'assignment_indent': 3}
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 42
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      SELECT', 'line_no': 155}, {'indent': 9, 'line': '         STATUS_CD INTO V_STATUS_CD', 'line_no': 156}, {'indent': 6, 'line': '      FROM', 'line_no': 157}, {'indent': 9, 'line': '         MDM_V_THEME_STATUS', 'line_no': 158}, {'indent': 6, 'line': '      WHERE', 'line_no': 159}, {'indent': 9, 'line': '         STATE_DESC = :NEW.STATUS_DESC;', 'line_no': 160}]
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,274 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       SELECT || 155 || 6
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 155 || select_statement
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 160 || select_statement
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      V_STATUS_CD := NULL;', 'line_no': 162}]
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_STATUS_CD := NULL; || 162 || 6
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 162 || 
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 162 || 
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 162, 'assignment_indent': 6}
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 43
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      SELECT', 'line_no': 166}, {'indent': 9, 'line': '         DBA_CD INTO V_DBA_CD', 'line_no': 167}, {'indent': 6, 'line': '      FROM', 'line_no': 168}, {'indent': 9, 'line': '         MDM_V_DISEASE_BIOLOGY_AREAS', 'line_no': 169}, {'indent': 6, 'line': '      WHERE', 'line_no': 170}, {'indent': 9, 'line': '         DBA_SHORT_DESC', 'line_no': 171}, {'indent': 9, 'line': "         || ' - '", 'line_no': 172}, {'indent': 9, 'line': '         || DBA_DESC = :NEW.DBA_DESC_CONCAT;', 'line_no': 173}]
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       SELECT || 166 || 6
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 166 || select_statement
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 173 || select_statement
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      V_DBA_CD := NULL;', 'line_no': 175}]
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_DBA_CD := NULL; || 175 || 6
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 175 || 
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 175 || 
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 175, 'assignment_indent': 6}
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 44
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_MOLEC_IN_LIC_PRTNR := GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID); || 178 || 3
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 178 || select_statement
2025-08-28 06:26:51,275 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 178 || select_statement
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_line_no': 178, 'assignment_indent': 3}
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 45
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      V_TRADEMARK_NO := :NEW.TRADEMARK_NO;', 'line_no': 180}]
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_TRADEMARK_NO := :NEW.TRADEMARK_NO; || 180 || 6
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 180 || 
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 180 || 
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_line_no': 180, 'assignment_indent': 6}
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      V_TRADEMARK_NO := :OLD.TRADEMARK_NO;', 'line_no': 182}]
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_TRADEMARK_NO := :OLD.TRADEMARK_NO; || 182 || 6
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 182 || 
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 182 || 
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_line_no': 182, 'assignment_indent': 6}
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 46
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_THEME_DESC_PROPOSAL := GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N'); || 185 || 3
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 185 || select_statement
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 185 || select_statement
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_line_no': 185, 'assignment_indent': 3}
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 47
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'line_no': 188}]
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE THEME_DESC_PROPOSAL_TOO_LONG; || 188 || 6
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 188 || raise_statement
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 188 || raise_statement
2025-08-28 06:26:51,276 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 48
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:    V_SHORT_NAME := COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL); || 191 || 3
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 191 || select_statement
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 191 || select_statement
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_line_no': 191, 'assignment_indent': 3}
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 49
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_MOLECULE_ID := :NEW.MOLECULE_ID;', 'line_no': 201}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}]}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 278}, {'indent': 6, 'line': '      SELECT', 'line_no': 281}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 282}, {'indent': 6, 'line': '      FROM', 'line_no': 283}, {'indent': 9, 'line': '         (', 'line_no': 284}, {'indent': 12, 'line': '            SELECT', 'line_no': 285}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 286}, {'indent': 12, 'line': '            FROM', 'line_no': 287}, {'indent': 15, 'line': '               V_THEMES', 'line_no': 288}, {'indent': 12, 'line': '            UNION', 'line_no': 289}, {'indent': 12, 'line': '            ALL', 'line_no': 290}, {'indent': 12, 'line': '            SELECT', 'line_no': 291}, {'indent': 15, 'line': '               THEME_NO', 'line_no': 292}, {'indent': 12, 'line': '            FROM', 'line_no': 293}, {'indent': 15, 'line': '               GMD.THEMES_ARCHIVE', 'line_no': 294}, {'indent': 9, 'line': '         )                  T', 'line_no': 295}, {'indent': 6, 'line': '      WHERE', 'line_no': 296}, {'indent': 9, 'line': '         T.THEME_NO = :NEW.THEME_NO;', 'line_no': 297}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 302}, {'indent': 6, 'line': '      V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 303}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}, {'indent': 9, 'line': '         );', 'line_no': 332}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}]}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 346}, {'indent': 6, 'line': '      SELECT', 'line_no': 347}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 348}, {'indent': 6, 'line': '      FROM', 'line_no': 349}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 350}, {'indent': 6, 'line': '      WHERE', 'line_no': 351}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION;', 'line_no': 352}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 357}, {'indent': 6, 'line': "      V_VALID_TO := TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'line_no': 358}, {'indent': 6, 'line': '      V_SHORT_NAME := NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'line_no': 359}, {'indent': 6, 'line': '      INSERT INTO GMD.THEMES(', 'line_no': 360}, {'indent': 9, 'line': '         THEME_NO,', 'line_no': 361}, {'indent': 9, 'line': '         REGISTRAT_DATE,', 'line_no': 362}, {'indent': 9, 'line': '         ODG_NO,', 'line_no': 363}, {'indent': 9, 'line': '         RESGRP_CD,', 'line_no': 364}, {'indent': 9, 'line': '         RESLIN_CD,', 'line_no': 365}, {'indent': 9, 'line': '         THEME_DESC,', 'line_no': 366}, {'indent': 9, 'line': '         SHORT_NAME,', 'line_no': 367}, {'indent': 9, 'line': '         STATUS_CD,', 'line_no': 368}, {'indent': 9, 'line': '         DBA_CD,', 'line_no': 369}, {'indent': 9, 'line': '         IN_PREP_IND,', 'line_no': 370}, {'indent': 9, 'line': '         PROD_SHORT_CD,', 'line_no': 371}, {'indent': 9, 'line': '         TRADEMARK_NO,', 'line_no': 372}, {'indent': 9, 'line': '         BIO_ACTIVITY,', 'line_no': 373}, {'indent': 9, 'line': '         APPLICANT,', 'line_no': 374}, {'indent': 9, 'line': '         CONTACT,', 'line_no': 375}, {'indent': 9, 'line': '         REGISTRAR,', 'line_no': 376}, {'indent': 9, 'line': '         LINE_EXT_INFO,', 'line_no': 377}, {'indent': 9, 'line': '         PORTF_PROJ_CD,', 'line_no': 378}, {'indent': 9, 'line': '         CO_DEV_PRTNR,', 'line_no': 379}, {'indent': 9, 'line': '         TECHNOLOGY_PRTNR,', 'line_no': 380}, {'indent': 9, 'line': '         OFFICIAL_IND,', 'line_no': 381}, {'indent': 9, 'line': '         CO_MAR_PRTNR,', 'line_no': 382}, {'indent': 9, 'line': '         VALID_TO,', 'line_no': 383}, {'indent': 9, 'line': '         PORTF_DA_GROUP_ID,', 'line_no': 384}, {'indent': 9, 'line': '         MANUAL_SHORT_DESC', 'line_no': 385}, {'indent': 6, 'line': '      ) VALUES (', 'line_no': 386}, {'indent': 9, 'line': '         :NEW.THEME_NO,', 'line_no': 387}, {'indent': 9, 'line': '         V_D_REGISTRAT_DATE,', 'line_no': 388}, {'indent': 9, 'line': '         V_ODG_NO,', 'line_no': 389}, {'indent': 9, 'line': '         V_RESGRP_CD,', 'line_no': 390}, {'indent': 9, 'line': '         V_RESLIN_CD,', 'line_no': 391}, {'indent': 9, 'line': '         V_DESCRIPTION,', 'line_no': 392}, {'indent': 9, 'line': '         V_SHORT_NAME,', 'line_no': 393}, {'indent': 9, 'line': '         V_STATUS_CD,', 'line_no': 394}, {'indent': 9, 'line': '         V_DBA_CD,', 'line_no': 395}, {'indent': 9, 'line': '         :NEW.IN_PREP_IND,', 'line_no': 396}, {'indent': 9, 'line': '         :NEW.PROD_SHORT_CD,', 'line_no': 397}, {'indent': 9, 'line': '         :NEW.TRADEMARK_NO,', 'line_no': 398}, {'indent': 9, 'line': '         :NEW.BIO_ACTIVITY,', 'line_no': 399}, {'indent': 9, 'line': '         :NEW.APPLICANT,', 'line_no': 400}, {'indent': 9, 'line': '         :NEW.CONTACT,', 'line_no': 401}, {'indent': 9, 'line': '         TXO_UTIL.GET_USERID,', 'line_no': 402}, {'indent': 9, 'line': '         :NEW.LINE_EXT_INFO,', 'line_no': 403}, {'indent': 9, 'line': '         V_PORTF_PROJ_CD,', 'line_no': 404}, {'indent': 9, 'line': '         :NEW.CO_DEV_PRTNR,', 'line_no': 405}, {'indent': 9, 'line': '         :NEW.TECHNOLOGY_PRTNR,', 'line_no': 406}, {'indent': 9, 'line': '         :NEW.OFFICIAL_IND,', 'line_no': 407}, {'indent': 9, 'line': '         :NEW.CO_MAR_PRTNR,', 'line_no': 408}, {'indent': 9, 'line': '         V_VALID_TO,', 'line_no': 409}, {'indent': 9, 'line': '         :NEW.PORTF_DA_GROUP_ID,', 'line_no': 410}, {'indent': 9, 'line': '         :NEW.MANUAL_SHORT_DESC', 'line_no': 411}, {'indent': 6, 'line': '      );', 'line_no': 412}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 195}]
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE ADMIN_UPDATE_ONLY; || 195 || 9
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 195 || raise_statement
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 195 || raise_statement
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_MOLECULE_ID := :NEW.MOLECULE_ID; || 201 || 6
2025-08-28 06:26:51,277 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 201 || 
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 201 || 
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_line_no': 201, 'assignment_indent': 6}
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}]}]
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE PORTF_PROJ_MOL_CRE_ERR;', 'line_no': 205}]
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE PORTF_PROJ_MOL_CRE_ERR; || 205 || 12
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 205 || raise_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 205 || raise_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULES_MTN(', 'line_no': 207}, {'indent': 15, 'line': '               MOLECULE_DESC,', 'line_no': 208}, {'indent': 15, 'line': '               VALID_IND,', 'line_no': 209}, {'indent': 15, 'line': '               RG_NO,', 'line_no': 210}, {'indent': 15, 'line': '               CANCER_IMMUNOTHERAPY_IND,', 'line_no': 211}, {'indent': 15, 'line': '               MOLECULE_TYPE_ID,', 'line_no': 212}, {'indent': 15, 'line': '               PHARMACOLOGICAL_TYPE_ID', 'line_no': 213}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 214}, {'indent': 15, 'line': '               NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL),', 'line_no': 215}, {'indent': 15, 'line': "               'Y',", 'line_no': 216}, {'indent': 15, 'line': '               V_NEW_RG_NO,', 'line_no': 217}, {'indent': 15, 'line': "               'N',", 'line_no': 218}, {'indent': 15, 'line': '               C_MOLECULE_TYPE_ID,', 'line_no': 219}, {'indent': 15, 'line': '               C_PHARMACOLOGICAL_TYPE_ID', 'line_no': 220}, {'indent': 12, 'line': '            );', 'line_no': 221}, {'indent': 12, 'line': '            SELECT', 'line_no': 222}, {'indent': 15, 'line': '               MOLECULE_ID INTO V_MOLECULE_ID', 'line_no': 223}, {'indent': 12, 'line': '            FROM', 'line_no': 224}, {'indent': 15, 'line': '               V_THEME_MOLECULES', 'line_no': 225}, {'indent': 12, 'line': '            WHERE', 'line_no': 226}, {'indent': 15, 'line': '               MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL)', 'line_no': 227}, {'indent': 15, 'line': "               AND VALID_IND = 'Y'", 'line_no': 228}, {'indent': 15, 'line': '               AND RG_NO = V_NEW_RG_NO', 'line_no': 229}, {'indent': 15, 'line': "               AND CANCER_IMMUNOTHERAPY_IND = 'N'", 'line_no': 230}, {'indent': 15, 'line': '               AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID', 'line_no': 231}, {'indent': 15, 'line': '               AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;', 'line_no': 232}, {'indent': 12, 'line': '            INSERT INTO THEME_MOLECULE_MAP TMMAP(', 'line_no': 235}, {'indent': 15, 'line': '               TMMAP.THEME_NO,', 'line_no': 236}, {'indent': 15, 'line': '               TMMAP.MOLECULE_ID,', 'line_no': 237}, {'indent': 15, 'line': '               TMMAP.MOLECULE_SEQ_NO,', 'line_no': 238}, {'indent': 15, 'line': '               TMMAP.VALID_IND', 'line_no': 239}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 240}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 241}, {'indent': 15, 'line': '               V_MOLECULE_ID,', 'line_no': 242}, {'indent': 15, 'line': '               1,', 'line_no': 243}, {'indent': 15, 'line': "               'Y'", 'line_no': 244}, {'indent': 12, 'line': '            );', 'line_no': 245}]
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             INSERT INTO MDM_V_THEME_MOLECULES_MTN( || 207 || 12
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 207 || insert_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 221 || insert_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             SELECT || 222 || 12
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 222 || select_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 232 || select_statement
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 26
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             INSERT INTO THEME_MOLECULE_MAP TMMAP( || 235 || 12
2025-08-28 06:26:51,278 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 235 || insert_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 245 || insert_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 259}]
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                RAISE INVALID_THEME_NO; || 259 || 15
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 259 || raise_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 259 || raise_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               RAISE INVALID_THEME_NO;', 'line_no': 272}]
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                RAISE INVALID_THEME_NO; || 272 || 15
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 272 || raise_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 272 || raise_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE INVALID_THEME_NO;', 'line_no': 275}]
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE INVALID_THEME_NO; || 275 || 12
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 275 || raise_statement
2025-08-28 06:26:51,279 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 275 || raise_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 278 || 6
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 278 || 
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 278 || 
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 278, 'assignment_indent': 6}
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       SELECT || 281 || 6
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 281 || select_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 297 || select_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 22
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE THEME_NO_CANNOT_BE_INSERTED;', 'line_no': 299}]
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE THEME_NO_CANNOT_BE_INSERTED; || 299 || 9
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 299 || raise_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 299 || raise_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 23
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 302 || 6
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 302 || select_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 302 || select_statement
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 302, 'assignment_indent': 6}
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 24
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_D_REGISTRAT_DATE := SYSDATE; || 303 || 6
2025-08-28 06:26:51,280 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 303 || select_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 303 || select_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 303, 'assignment_indent': 6}
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 25
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE INSERTSMUSTBEOFFICIAL;', 'line_no': 307}]
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE INSERTSMUSTBEOFFICIAL; || 307 || 9
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 307 || raise_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 307 || raise_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 26
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 313}]
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE THEMEDESCRIPTIONMANDATORY; || 313 || 12
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 313 || raise_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 313 || raise_statement
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 27
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 320}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => NULL,', 'line_no': 321}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => V_MOLECULE_ID,', 'line_no': 322}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 323}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 324}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 325}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 326}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 327}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 328}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 329}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 330}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 331}, {'indent': 9, 'line': '         );', 'line_no': 332}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 337}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 338}]
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( || 320 || 9
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 320 || 
2025-08-28 06:26:51,281 - root - DEBUG - [OracleTriggerAnalyzer.py:973] - stmt end: 332 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE DESCRIPTION_TOO_LONG;', 'line_no': 334}]
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE DESCRIPTION_TOO_LONG; || 334 || 12
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 334 || raise_statement
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 334 || raise_statement
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_DESCRIPTION := TRIM(V_DESCRIPTION); || 337 || 9
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 337 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 337 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_PORTF_PROJ_CD := 'Y'; || 338 || 9
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 338 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 338 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 342}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'N';", 'line_no': 343}]
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_DESCRIPTION := :NEW.THEME_DESC; || 342 || 9
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 342 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 342 || 
2025-08-28 06:26:51,282 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 342, 'assignment_indent': 9}
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_PORTF_PROJ_CD := 'N'; || 343 || 9
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 343 || 
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 343 || 
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_line_no': 343, 'assignment_indent': 9}
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 28
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 346 || 6
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 346 || select_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 346 || select_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 346, 'assignment_indent': 6}
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 29
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       SELECT || 347 || 6
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 347 || select_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 352 || select_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 35
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 354}]
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE THEME_DESC_NOT_UNIQUE; || 354 || 9
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 354 || raise_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 354 || raise_statement
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 36
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 357 || 6
2025-08-28 06:26:51,283 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 357 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 357 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 357, 'assignment_indent': 6}
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 37
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_VALID_TO := TO_DATE('09.09.9999', 'DD.MM.YYYY'); || 358 || 6
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 358 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 358 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_line_no': 358, 'assignment_indent': 6}
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 38
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_SHORT_NAME := NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30)); || 359 || 6
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 359 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 359 || select_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_line_no': 359, 'assignment_indent': 6}
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 39
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       INSERT INTO GMD.THEMES( || 360 || 6
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 360 || insert_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 412 || insert_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 92
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 417}, {'indent': 12, 'line': '            A.THEME_NO,', 'line_no': 418}, {'indent': 12, 'line': '            A.MOLECULE_ID,', 'line_no': 419}, {'indent': 12, 'line': '            A.MOLECULE_SEQ_NO,', 'line_no': 420}, {'indent': 12, 'line': '            A.VALID_IND', 'line_no': 421}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 422}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 423}, {'indent': 12, 'line': '            V_MOLECULE_ID,', 'line_no': 424}, {'indent': 12, 'line': '            1,', 'line_no': 425}, {'indent': 12, 'line': "            'Y'", 'line_no': 426}, {'indent': 9, 'line': '         );', 'line_no': 427}]
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( || 417 || 9
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 417 || insert_statement
2025-08-28 06:26:51,284 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 427 || insert_statement
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 493}, {'indent': 6, 'line': '      SELECT', 'line_no': 494}, {'indent': 9, 'line': '         COUNT(T.THEME_NO) INTO V_COUNTER', 'line_no': 495}, {'indent': 6, 'line': '      FROM', 'line_no': 496}, {'indent': 9, 'line': '         V_THEMES T', 'line_no': 497}, {'indent': 6, 'line': '      WHERE', 'line_no': 498}, {'indent': 9, 'line': '         T.THEME_DESC = V_DESCRIPTION', 'line_no': 499}, {'indent': 9, 'line': '         AND T.THEME_NO <> :NEW.THEME_NO;', 'line_no': 500}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}], 'if_elses': [], 'else_statements': []}, {'indent': 6, 'line': '      V_COUNTER := NULL;', 'line_no': 505}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}], 'if_elses': [], 'else_statements': [{'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}]}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}], 'if_elses': [], 'else_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}]}]}], 'else_statements': [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]}]
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE ADMIN_UPDATE_ONLY;', 'line_no': 438}]
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE ADMIN_UPDATE_ONLY; || 438 || 9
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 438 || raise_statement
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 438 || raise_statement
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE THEME_NO_ONLY_INSERT;', 'line_no': 442}]
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE THEME_NO_ONLY_INSERT; || 442 || 9
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 442 || raise_statement
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 442 || raise_statement
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,285 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': "         V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'line_no': 452}]
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_D_REGISTRAT_DATE := TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy'); || 452 || 9
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 452 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 452 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         V_D_REGISTRAT_DATE := SYSDATE;', 'line_no': 455}]
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_D_REGISTRAT_DATE := SYSDATE; || 455 || 9
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 455 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 455 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 455, 'assignment_indent': 9}
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO(', 'line_no': 461}, {'indent': 12, 'line': '            P_THEME_NO_PORTF => :NEW.THEME_NO,', 'line_no': 462}, {'indent': 12, 'line': '            P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID,', 'line_no': 463}, {'indent': 12, 'line': '            P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD,', 'line_no': 464}, {'indent': 12, 'line': '            P_ODG_NO_PORT => V_ODG_NO,', 'line_no': 465}, {'indent': 12, 'line': '            P_RESGRP_CD_PORT => V_RESGRP_CD,', 'line_no': 466}, {'indent': 12, 'line': '            P_RESLIN_CD_PORT => V_RESLIN_CD,', 'line_no': 467}, {'indent': 12, 'line': '            P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO,', 'line_no': 468}, {'indent': 12, 'line': '            P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR,', 'line_no': 469}, {'indent': 12, 'line': '            P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO,', 'line_no': 470}, {'indent': 12, 'line': '            P_SHORT_NAME_PORTF => :NEW.SHORT_NAME,', 'line_no': 471}, {'indent': 12, 'line': "            P_TRUNC_DESC_LENGTH => 'N'", 'line_no': 472}, {'indent': 9, 'line': '         );', 'line_no': 473}, {'indent': 9, 'line': '         V_DESCRIPTION := TRIM(V_DESCRIPTION);', 'line_no': 474}, {'indent': 9, 'line': "         V_PORTF_PROJ_CD := 'Y';", 'line_no': 475}]
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( || 461 || 9
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 461 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:973] - stmt end: 473 || 
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - V_DESCRIPTION := GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_DESCRIPTION := TRIM(V_DESCRIPTION); || 474 || 9
2025-08-28 06:26:51,286 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 474 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 474 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_PORTF_PROJ_CD := 'Y'; || 475 || 9
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 475 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 475 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}]}]
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE THEMEDESCRIPTIONMANDATORY;', 'line_no': 479}]
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE THEMEDESCRIPTIONMANDATORY; || 479 || 12
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 479 || raise_statement
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 479 || raise_statement
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_DESCRIPTION := :NEW.THEME_DESC;', 'line_no': 481}, {'indent': 12, 'line': '            V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD;', 'line_no': 482}]
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_DESCRIPTION := :NEW.THEME_DESC; || 481 || 12
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 481 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 481 || 
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 481, 'assignment_indent': 12}
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_PORTF_PROJ_CD := :NEW.PORTF_PROJ_CD; || 482 || 12
2025-08-28 06:26:51,287 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 482 || 
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 482 || 
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_line_no': 482, 'assignment_indent': 12}
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE DESCRIPTION_TOO_LONG;', 'line_no': 487}]
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE DESCRIPTION_TOO_LONG; || 487 || 9
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 487 || raise_statement
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 487 || raise_statement
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 493 || 6
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 493 || 
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 493 || 
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 493, 'assignment_indent': 6}
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       SELECT || 494 || 6
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 494 || select_statement
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 500 || select_statement
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         RAISE THEME_DESC_NOT_UNIQUE;', 'line_no': 502}]
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          RAISE THEME_DESC_NOT_UNIQUE; || 502 || 9
2025-08-28 06:26:51,288 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 502 || raise_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 502 || raise_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       V_COUNTER := NULL; || 505 || 6
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 505 || select_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 505 || select_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 505, 'assignment_indent': 6}
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 509}, {'indent': 9, 'line': '         SET', 'line_no': 510}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 511}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 512}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 513}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 514}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 515}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 516}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 517}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 518}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 519}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 520}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 521}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 522}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 523}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 524}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 525}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 526}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 527}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 528}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 529}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 530}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 531}, {'indent': 9, 'line': '         WHERE', 'line_no': 532}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO', 'line_no': 533}, {'indent': 12, 'line': "            AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'line_no': 534}]
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          UPDATE GMD.THEMES || 509 || 9
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 509 || update_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 534 || update_statement
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 539}, {'indent': 9, 'line': '         SELECT', 'line_no': 542}, {'indent': 12, 'line': '            COUNT(*) INTO V_COUNTER', 'line_no': 543}, {'indent': 9, 'line': '         FROM', 'line_no': 544}, {'indent': 12, 'line': '            V_THEMES T', 'line_no': 545}, {'indent': 9, 'line': '         WHERE', 'line_no': 546}, {'indent': 12, 'line': '            TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE)', 'line_no': 547}, {'indent': 12, 'line': '            AND T.THEME_NO = :NEW.THEME_NO;', 'line_no': 548}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         V_COUNTER := NULL;', 'line_no': 553}, {'indent': 9, 'line': '         UPDATE GMD.THEMES', 'line_no': 554}, {'indent': 9, 'line': '         SET', 'line_no': 555}, {'indent': 12, 'line': '            ODG_NO = V_ODG_NO,', 'line_no': 556}, {'indent': 12, 'line': '            RESGRP_CD = V_RESGRP_CD,', 'line_no': 557}, {'indent': 12, 'line': '            RESLIN_CD = V_RESLIN_CD,', 'line_no': 558}, {'indent': 12, 'line': '            THEME_DESC = V_DESCRIPTION,', 'line_no': 559}, {'indent': 12, 'line': '            SHORT_NAME = V_SHORT_NAME,', 'line_no': 560}, {'indent': 12, 'line': '            STATUS_CD = V_STATUS_CD,', 'line_no': 561}, {'indent': 12, 'line': '            DBA_CD = V_DBA_CD,', 'line_no': 562}, {'indent': 12, 'line': '            IN_PREP_IND = :NEW.IN_PREP_IND,', 'line_no': 563}, {'indent': 12, 'line': '            PROD_SHORT_CD = :NEW.PROD_SHORT_CD,', 'line_no': 564}, {'indent': 12, 'line': '            TRADEMARK_NO = :NEW.TRADEMARK_NO,', 'line_no': 565}, {'indent': 12, 'line': '            BIO_ACTIVITY = :NEW.BIO_ACTIVITY,', 'line_no': 566}, {'indent': 12, 'line': '            APPLICANT = :NEW.APPLICANT,', 'line_no': 567}, {'indent': 12, 'line': '            CONTACT = :NEW.CONTACT,', 'line_no': 568}, {'indent': 12, 'line': '            LINE_EXT_INFO = :NEW.LINE_EXT_INFO,', 'line_no': 569}, {'indent': 12, 'line': '            PORTF_PROJ_CD = V_PORTF_PROJ_CD,', 'line_no': 570}, {'indent': 12, 'line': '            CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR,', 'line_no': 571}, {'indent': 12, 'line': '            TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR,', 'line_no': 572}, {'indent': 12, 'line': '            OFFICIAL_IND = :NEW.OFFICIAL_IND,', 'line_no': 573}, {'indent': 12, 'line': '            CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR,', 'line_no': 574}, {'indent': 12, 'line': '            REGISTRAT_DATE = SYSDATE,', 'line_no': 575}, {'indent': 12, 'line': '            REGISTRAR = V_USERID,', 'line_no': 576}, {'indent': 12, 'line': '            PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID,', 'line_no': 577}, {'indent': 12, 'line': '            MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC', 'line_no': 578}, {'indent': 9, 'line': '         WHERE', 'line_no': 579}, {'indent': 12, 'line': '            THEME_NO = :NEW.THEME_NO;', 'line_no': 580}]
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_COUNTER := NULL; || 539 || 9
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 539 || 
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 539 || 
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 539, 'assignment_indent': 9}
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          SELECT || 542 || 9
2025-08-28 06:26:51,289 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 542 || select_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 548 || select_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'line_no': 550}]
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ONLYONEOFFICIALCHANGEPERDAY; || 550 || 12
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 550 || raise_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 550 || raise_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          V_COUNTER := NULL; || 553 || 9
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 553 || select_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 553 || select_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 553, 'assignment_indent': 9}
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          UPDATE GMD.THEMES || 554 || 9
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 554 || update_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 580 || update_statement
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A(', 'line_no': 590}, {'indent': 15, 'line': '               A.THEME_NO,', 'line_no': 591}, {'indent': 15, 'line': '               A.MOLECULE_ID,', 'line_no': 592}, {'indent': 15, 'line': '               A.MOLECULE_SEQ_NO,', 'line_no': 593}, {'indent': 15, 'line': '               A.VALID_IND', 'line_no': 594}, {'indent': 12, 'line': '            ) VALUES (', 'line_no': 595}, {'indent': 15, 'line': '               :NEW.THEME_NO,', 'line_no': 596}, {'indent': 15, 'line': '               :NEW.MOLECULE_ID,', 'line_no': 597}, {'indent': 15, 'line': '               1,', 'line_no': 598}, {'indent': 15, 'line': "               'Y'", 'line_no': 599}, {'indent': 12, 'line': '            );', 'line_no': 600}]
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,290 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( || 590 || 12
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 590 || insert_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 600 || insert_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 604}, {'indent': 12, 'line': '            SET', 'line_no': 605}, {'indent': 15, 'line': '               A.MOLECULE_ID = :NEW.MOLECULE_ID,', 'line_no': 606}, {'indent': 15, 'line': "               A.VALID_IND = 'Y'", 'line_no': 607}, {'indent': 12, 'line': '            WHERE', 'line_no': 608}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 609}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO = 1', 'line_no': 610}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 611}]
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE MDM_V_THEME_MOLECULE_MAP A || 604 || 12
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 604 || update_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 611 || update_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            SELECT', 'line_no': 613}, {'indent': 15, 'line': '               COUNT(*) INTO V_SEC_MOL_CNT', 'line_no': 614}, {'indent': 12, 'line': '            FROM', 'line_no': 615}, {'indent': 15, 'line': '               MDM_V_THEME_MOLECULE_MAP_MTN A', 'line_no': 616}, {'indent': 12, 'line': '            WHERE', 'line_no': 617}, {'indent': 15, 'line': '               A.THEME_NO = :NEW.THEME_NO', 'line_no': 618}, {'indent': 15, 'line': '               AND A.MOLECULE_SEQ_NO > 1', 'line_no': 619}, {'indent': 15, 'line': "               AND A.VALID_IND = 'Y';", 'line_no': 620}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}], 'if_elses': [], 'else_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}]}]
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             SELECT || 613 || 12
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 613 || select_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 620 || select_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               RAISE SEC_MOL_LIST_NOT_EMPTY;', 'line_no': 622}]
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                RAISE SEC_MOL_LIST_NOT_EMPTY; || 622 || 15
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 622 || raise_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 622 || raise_statement
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               UPDATE MDM_V_THEME_MOLECULE_MAP A', 'line_no': 626}, {'indent': 15, 'line': '               SET', 'line_no': 627}, {'indent': 18, 'line': "                  A.VALID_IND = 'N'", 'line_no': 628}, {'indent': 15, 'line': '               WHERE', 'line_no': 629}, {'indent': 18, 'line': '                  A.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 630}, {'indent': 18, 'line': '                  AND A.THEME_NO = :NEW.THEME_NO', 'line_no': 631}, {'indent': 18, 'line': '                  AND A.MOLECULE_SEQ_NO = 1', 'line_no': 632}, {'indent': 18, 'line': "                  AND A.VALID_IND = 'Y';", 'line_no': 633}]
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,291 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                UPDATE MDM_V_THEME_MOLECULE_MAP A || 626 || 15
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 626 || update_statement
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 633 || update_statement
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            NULL;', 'line_no': 636}]
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             NULL; || 636 || 12
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 636 || null_statement
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 636 || null_statement
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 50
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         SELECT', 'line_no': 666}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 667}, {'indent': 9, 'line': '         FROM', 'line_no': 668}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 669}, {'indent': 9, 'line': '         WHERE', 'line_no': 670}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 671}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 672}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          SELECT || 666 || 9
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 666 || select_statement
2025-08-28 06:26:51,292 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 672 || select_statement
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 678}, {'indent': 12, 'line': '            SET', 'line_no': 679}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'E',", 'line_no': 680}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 681}, {'indent': 15, 'line': '               PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 682}, {'indent': 15, 'line': "               REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 683}, {'indent': 12, 'line': '            WHERE', 'line_no': 684}, {'indent': 15, 'line': '               PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 685}]
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN || 678 || 12
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 678 || update_statement
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 685 || update_statement
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}], 'if_elses': [], 'else_statements': []}]}]
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 690}, {'indent': 12, 'line': '            SET', 'line_no': 691}, {'indent': 15, 'line': "               PROPOSAL_STATUS_CD = 'A',", 'line_no': 692}, {'indent': 15, 'line': '               EVOLVED_THEME_NO = NULL', 'line_no': 693}, {'indent': 12, 'line': '            WHERE', 'line_no': 694}, {'indent': 15, 'line': '               PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 695}]
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN || 690 || 12
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 690 || update_statement
2025-08-28 06:26:51,293 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 695 || update_statement
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 702}, {'indent': 15, 'line': '               SET', 'line_no': 703}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'A',", 'line_no': 704}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = NULL', 'line_no': 705}, {'indent': 15, 'line': '               WHERE', 'line_no': 706}, {'indent': 18, 'line': '                  PROPOSAL_ID = :OLD.PROPOSAL_ID;', 'line_no': 707}, {'indent': 15, 'line': '               UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 710}, {'indent': 15, 'line': '               SET', 'line_no': 711}, {'indent': 18, 'line': "                  PROPOSAL_STATUS_CD = 'E',", 'line_no': 712}, {'indent': 18, 'line': '                  EVOLVED_THEME_NO = :NEW.THEME_NO,', 'line_no': 713}, {'indent': 18, 'line': '                  PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 714}, {'indent': 18, 'line': "                  REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 715}, {'indent': 15, 'line': '               WHERE', 'line_no': 716}, {'indent': 18, 'line': '                  PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 717}]
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN || 702 || 15
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 702 || update_statement
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 707 || update_statement
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN || 710 || 15
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 710 || update_statement
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 717 || update_statement
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         SELECT', 'line_no': 728}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 729}, {'indent': 9, 'line': '         FROM', 'line_no': 730}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 731}, {'indent': 9, 'line': '         WHERE', 'line_no': 732}, {'indent': 12, 'line': '            NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 733}, {'indent': 12, 'line': "            AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 734}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,294 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          SELECT || 728 || 9
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 728 || select_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 734 || select_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP', 'line_no': 738}, {'indent': 12, 'line': '            SET', 'line_no': 739}, {'indent': 15, 'line': '               NMP.PROPOSAL_NAME = V_SHORT_NAME,', 'line_no': 740}, {'indent': 15, 'line': "               NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **'", 'line_no': 741}, {'indent': 12, 'line': '            WHERE', 'line_no': 742}, {'indent': 15, 'line': '               NMP.EVOLVED_THEME_NO =:NEW.THEME_NO', 'line_no': 743}, {'indent': 15, 'line': "               AND NMP.PROPOSAL_STATUS_CD = 'E';", 'line_no': 744}]
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP || 738 || 12
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 738 || update_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 744 || update_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 51
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 9, 'line': '         SELECT', 'line_no': 755}, {'indent': 12, 'line': '            COUNT(*) INTO V_EVOLVED_NMP_CNT', 'line_no': 756}, {'indent': 9, 'line': '         FROM', 'line_no': 757}, {'indent': 12, 'line': '            MDM_V_NEW_MEDICINE_PROPOSALS_MTN', 'line_no': 758}, {'indent': 9, 'line': '         WHERE', 'line_no': 759}, {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID', 'line_no': 760}, {'indent': 12, 'line': '            AND PROPOSAL_NAME = V_SHORT_NAME', 'line_no': 761}, {'indent': 12, 'line': "            AND PROPOSAL_STATUS_CD = 'E';", 'line_no': 762}]
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          SELECT || 755 || 9
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 755 || select_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 762 || select_statement
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,295 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'indent': 9, 'line': '         INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN (', 'line_no': 787}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 788}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 789}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 790}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 791}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 792}, {'indent': 12, 'line': '            REASON_FOR_CHANGE', 'line_no': 793}, {'indent': 9, 'line': '         ) VALUES (', 'line_no': 794}, {'indent': 12, 'line': "            'E',", 'line_no': 795}, {'indent': 12, 'line': '            :NEW.THEME_NO,', 'line_no': 796}, {'indent': 12, 'line': '            V_SHORT_NAME,', 'line_no': 797}, {'indent': 12, 'line': '            NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID),', 'line_no': 798}, {'indent': 12, 'line': '            NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID),', 'line_no': 799}, {'indent': 12, 'line': "            '** Automatic creation of nmp for early development themes **'", 'line_no': 800}, {'indent': 9, 'line': '         );', 'line_no': 801}]
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]}], 'exception_line_no': 781, 'end_line_no': 784}]
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 15, 'line': '               SELECT', 'line_no': 772}, {'indent': 18, 'line': '                  PHARMACOLOGICAL_TYPE_ID,', 'line_no': 773}, {'indent': 18, 'line': '                  MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID,', 'line_no': 774}, {'indent': 18, 'line': '                  V_MOLECULE_TYPE_ID', 'line_no': 775}, {'indent': 15, 'line': '               FROM', 'line_no': 776}, {'indent': 18, 'line': '                  V_THEME_MOLECULES M', 'line_no': 777}, {'indent': 15, 'line': '               WHERE', 'line_no': 778}, {'indent': 18, 'line': '                  MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 779}, {'indent': 18, 'line': "                  AND M.VALID_IND = 'Y';", 'line_no': 780}]
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                SELECT || 772 || 15
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 772 || select_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 780 || select_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 18, 'line': '                  RAISE INVALID_MOLECULE_ID;', 'line_no': 783}]
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                   RAISE INVALID_MOLECULE_ID; || 783 || 18
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 783 || raise_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 783 || raise_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( || 787 || 9
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 787 || insert_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 801 || insert_statement
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');", 'line_no': 826}]
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,296 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF'); || 826 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');", 'line_no': 828}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF'); || 828 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');", 'line_no': 830}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF'); || 830 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');", 'line_no': 832}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID'); || 832 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');", 'line_no': 834}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF'); || 834 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');", 'line_no': 836}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No'); || 836 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');", 'line_no': 838}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted'); || 838 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');", 'line_no': 840}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated'); || 840 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Theme Description "\'', 'line_no': 842}, {'indent': 38, 'line': '                                      || V_DESCRIPTION', 'line_no': 843}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 844}]
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Theme Description "' || 842 || 6
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || V_DESCRIPTION || 843 || 38
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || '" is too long'); || 844 || 38
2025-08-28 06:26:51,297 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Short Description Proposal "\'', 'line_no': 846}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_PROPOSAL', 'line_no': 847}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 848}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Short Description Proposal "' || 846 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || :OLD.THEME_DESC_PROPOSAL || 847 || 38
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || '" is too long'); || 848 || 38
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Downstream Theme Description "\'', 'line_no': 850}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_ALT', 'line_no': 851}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 852}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Downstream Theme Description "' || 850 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || :OLD.THEME_DESC_ALT || 851 || 38
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                       || '" is too long'); || 852 || 38
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');", 'line_no': 854}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists'); || 854 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');", 'line_no': 856}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists'); || 856 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');", 'line_no': 858}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes'); || 858 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\' );', 'line_no': 860}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled' ); || 860 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');", 'line_no': 862}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists'); || 862 || 6
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');", 'line_no': 864}]
2025-08-28 06:26:51,298 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF'); || 864 || 6
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(', 'line_no': 866}, {'indent': 9, 'line': '         -20900,', 'line_no': 867}, {'indent': 7, 'line': "       'Debug in Themes IOF standard'", 'line_no': 868}, {'indent': 7, 'line': '       );', 'line_no': 869}]
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:       RAISE_APPLICATION_ERROR( || 866 || 6
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:          -20900, || 867 || 9
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:        'Debug in Themes IOF standard' || 868 || 7
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:        ); || 869 || 7
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_line_no': 54, 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_line_no': 61, 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_line_no': 70, 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 95, 'then_line_no': 96, 'if_indent': 3, 'end_if_line_no': 111, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 115, 'then_line_no': 115, 'if_indent': 3, 'end_if_line_no': 145, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 128, 'statement_indent': 12}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 137, 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_line_no': 142, 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_line_no': 150, 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_line_no': 151, 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_line_no': 152, 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_line_no': 153, 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 154, 'then_line_no': 154, 'if_indent': 3, 'end_if_line_no': 163, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_line_no': 155, 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 162, 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 165, 'then_line_no': 165, 'if_indent': 3, 'end_if_line_no': 176, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_line_no': 166, 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 175, 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_line_no': 178, 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 179, 'then_line_no': 179, 'if_indent': 3, 'end_if_line_no': 183, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_line_no': 180, 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_line_no': 182, 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_line_no': 185, 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_line_no': 186, 'then_line_no': 187, 'if_indent': 3, 'end_if_line_no': 189, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_line_no': 188, 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_line_no': 191, 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 192, 'then_line_no': 192, 'if_indent': 3, 'end_if_line_no': 656, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_line_no': 201, 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_line_no': 207, 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_line_no': 222, 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 235, 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 278, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 281, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 302, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 303, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 342, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_line_no': 343, 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 346, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_line_no': 347, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 357, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_line_no': 358, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_line_no': 359, 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_line_no': 360, 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 432, 'elif_indent': 3, 'condition': '(UPDATING)', 'then_line_no': 432, 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 455, 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 479, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 481, 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_line_no': 482, 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 493, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_line_no': 494, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 505, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 539, 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 542, 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_line_no': 550, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 553, 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 554, 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 626, 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 660, 'then_line_no': 661, 'if_indent': 3, 'end_if_line_no': 747, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 690, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 702, 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 710, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_line_no': 751, 'then_line_no': 753, 'if_indent': 3, 'end_if_line_no': 803, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,299 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_line_no': 97, 'then_line_no': 97, 'if_indent': 6, 'end_if_line_no': 99, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 101, 'then_line_no': 102, 'if_indent': 6, 'end_if_line_no': 104, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 106, 'then_line_no': 106, 'if_indent': 6, 'end_if_line_no': 110, 'then_statements': [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_line_no': 98, 'statement_indent': 9}]
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_line_no': 103, 'statement_indent': 9}]
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}, {'indent': 30, 'line': '                              || :NEW.THEME_NO', 'line_no': 108}, {'indent': 30, 'line': "                              || '!');", 'line_no': 109}]
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 9, 'line': "         TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme '", 'line_no': 107}
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: TXO_UTIL.SET_WARNING('NO MOLECULE ASSIGNED TO IN-PREP THEME '
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 107
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 109
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: TXO_UTIL.SET_WARNING('No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!');
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'begin_end', 'begin_line_no': 116, 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 127, 'when_indent': 9, 'then_line_no': 127, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 128, 'statement_indent': 12}]}], 'exception_line_no': 126, 'end_line_no': 129}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_line_no': 131, 'then_line_no': 131, 'if_indent': 6, 'end_if_line_no': 144, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 137, 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_line_no': 142, 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,300 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 117, 'statement_indent': 9}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 128, 'statement_indent': 12}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_line_no': 132, 'then_line_no': 132, 'if_indent': 9, 'end_if_line_no': 143, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 137, 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_line_no': 142, 'assignment_indent': 12}]}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 133, 'statement_indent': 12}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 137, 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_line_no': 142, 'assignment_indent': 12}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 6
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 7
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 8
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 9
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_line_no': 155, 'statement_indent': 6}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 162, 'assignment_indent': 6}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 10
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_line_no': 166, 'statement_indent': 6}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 175, 'assignment_indent': 6}]
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 11
2025-08-28 06:26:51,301 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 12
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_line_no': 180, 'assignment_indent': 6}]
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_line_no': 182, 'assignment_indent': 6}]
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 13
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 14
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_line_no': 188, 'statement_indent': 6}]
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 15
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 16
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_line_no': 193, 'then_line_no': 194, 'if_indent': 6, 'end_if_line_no': 196, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_line_no': 201, 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 203, 'if_indent': 6, 'end_if_line_no': 247, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_line_no': 207, 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_line_no': 222, 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 235, 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_line_no': 249, 'case_indent': 6, 'end_case_line_no': 276, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 250, 'when_indent': 9, 'condition': '4', 'then_line_no': 250, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_line_no': 261, 'when_indent': 9, 'condition': '5', 'then_line_no': 261, 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 278, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 281, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 298, 'then_line_no': 298, 'if_indent': 6, 'end_if_line_no': 300, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 302, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 303, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 6, 'end_if_line_no': 308, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_line_no': 310, 'then_line_no': 310, 'if_indent': 6, 'end_if_line_no': 315, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_line_no': 319, 'then_line_no': 319, 'if_indent': 6, 'end_if_line_no': 344, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 342, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_line_no': 343, 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 346, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_line_no': 347, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 353, 'then_line_no': 353, 'if_indent': 6, 'end_if_line_no': 355, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 357, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_line_no': 358, 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_line_no': 359, 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_line_no': 360, 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 413, 'then_line_no': 414, 'if_indent': 6, 'end_if_line_no': 428, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 195, 'statement_indent': 9}]
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,302 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 9, 'end_if_line_no': 246, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_line_no': 207, 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_line_no': 222, 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 235, 'statement_indent': 12}]}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_line_no': 205, 'statement_indent': 12}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_line_no': 207, 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_line_no': 222, 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 235, 'statement_indent': 12}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 251, 'then_line_no': 258, 'if_indent': 12, 'end_if_line_no': 260, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 259, 'statement_indent': 15}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_line_no': 262, 'then_line_no': 271, 'if_indent': 12, 'end_if_line_no': 273, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 272, 'statement_indent': 15}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_line_no': 275, 'statement_indent': 12}]
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,303 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 6
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_line_no': 299, 'statement_indent': 9}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 7
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 8
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 9
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_line_no': 307, 'statement_indent': 9}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 10
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 311, 'then_line_no': 312, 'if_indent': 9, 'end_if_line_no': 314, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 313, 'statement_indent': 12}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 11
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 320, 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 333, 'then_line_no': 333, 'if_indent': 9, 'end_if_line_no': 335, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 337, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 338, 'assignment_indent': 9}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 334, 'statement_indent': 12}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 342, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_line_no': 343, 'assignment_indent': 9}]
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,304 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 12
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 13
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 14
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 354, 'statement_indent': 9}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 15
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 16
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 17
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 18
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 19
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 417, 'statement_indent': 9}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_line_no': 435, 'then_line_no': 437, 'if_indent': 6, 'end_if_line_no': 439, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_line_no': 441, 'then_line_no': 441, 'if_indent': 6, 'end_if_line_no': 443, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 449, 'then_line_no': 449, 'if_indent': 6, 'end_if_line_no': 456, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 455, 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_line_no': 458, 'then_line_no': 460, 'if_indent': 6, 'end_if_line_no': 484, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 479, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 481, 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_line_no': 482, 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_line_no': 486, 'then_line_no': 486, 'if_indent': 6, 'end_if_line_no': 488, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 493, 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_line_no': 494, 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 501, 'then_line_no': 501, 'if_indent': 6, 'end_if_line_no': 503, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 505, 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_line_no': 508, 'then_line_no': 508, 'if_indent': 6, 'end_if_line_no': 581, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 539, 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 542, 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_line_no': 550, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 553, 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 554, 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_line_no': 586, 'case_indent': 6, 'end_case_line_no': 637, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 587, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 587, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 601, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_line_no': 601, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}]}, {'type': 'when_statement', 'when_line_no': 612, 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_line_no': 612, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 626, 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}]}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_line_no': 438, 'statement_indent': 9}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_line_no': 442, 'statement_indent': 9}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_line_no': 452, 'assignment_indent': 9}]
2025-08-28 06:26:51,305 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_line_no': 455, 'assignment_indent': 9}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_line_no': 461, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_line_no': 474, 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_line_no': 475, 'assignment_indent': 9}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_line_no': 477, 'then_line_no': 478, 'if_indent': 9, 'end_if_line_no': 483, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 479, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 481, 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_line_no': 482, 'assignment_indent': 12}]}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_line_no': 479, 'statement_indent': 12}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_line_no': 481, 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_line_no': 482, 'assignment_indent': 12}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_line_no': 487, 'statement_indent': 9}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 6
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 7
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_line_no': 502, 'statement_indent': 9}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 8
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 9
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_line_no': 509, 'statement_indent': 9}]
2025-08-28 06:26:51,306 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 539, 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 542, 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_line_no': 549, 'then_line_no': 549, 'if_indent': 9, 'end_if_line_no': 551, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_line_no': 550, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 553, 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_line_no': 554, 'statement_indent': 9}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_line_no': 550, 'statement_indent': 12}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 10
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_line_no': 590, 'statement_indent': 12}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 604, 'statement_indent': 12}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 613, 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_line_no': 621, 'then_line_no': 621, 'if_indent': 12, 'end_if_line_no': 634, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 626, 'statement_indent': 15}]}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_line_no': 622, 'statement_indent': 15}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_line_no': 626, 'statement_indent': 15}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 636, 'statement_indent': 12}]
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,307 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 17
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 662, 'then_line_no': 663, 'if_indent': 6, 'end_if_line_no': 720, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 690, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 702, 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 710, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_line_no': 724, 'then_line_no': 725, 'if_indent': 6, 'end_if_line_no': 746, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 666, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_line_no': 677, 'then_line_no': 677, 'if_indent': 9, 'end_if_line_no': 686, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 678, 'statement_indent': 12}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 688, 'then_line_no': 689, 'if_indent': 9, 'end_if_line_no': 719, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 690, 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 702, 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 710, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 690, 'statement_indent': 12}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_line_no': 697, 'then_line_no': 699, 'if_indent': 12, 'end_if_line_no': 718, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 702, 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 710, 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_line_no': 702, 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_line_no': 710, 'statement_indent': 15}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 728, 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_line_no': 735, 'then_line_no': 735, 'if_indent': 9, 'end_if_line_no': 745, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 738, 'statement_indent': 12}]
2025-08-28 06:26:51,308 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 18
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 754, 'then_line_no': 754, 'if_indent': 6, 'end_if_line_no': 763, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_line_no': 767, 'then_line_no': 769, 'if_indent': 6, 'end_if_line_no': 802, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_line_no': 755, 'statement_indent': 9}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 770, 'then_line_no': 770, 'if_indent': 9, 'end_if_line_no': 785, 'then_statements': [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_line_no': 787, 'statement_indent': 9}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'begin_end', 'begin_line_no': 771, 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_line_no': 782, 'when_indent': 15, 'then_line_no': 782, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]}], 'exception_line_no': 781, 'end_line_no': 784}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_line_no': 772, 'statement_indent': 15}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_line_no': 783, 'statement_indent': 18}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');", 'line_no': 826}]
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');", 'line_no': 826}
2025-08-28 06:26:51,309 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 826
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 826
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20115, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');", 'line_no': 828}]
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');", 'line_no': 828}
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 828
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 828
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20116, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');", 'line_no': 830}]
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');", 'line_no': 830}
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 830
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 830
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20117, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');", 'line_no': 832}]
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');", 'line_no': 832}
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20118, 'THIS IS NOT A VALID MOLECULE ID');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 832
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 832
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20118, 'This is not a valid Molecule ID');
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');", 'line_no': 834}]
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,310 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');", 'line_no': 834}
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 834
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 834
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20119, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');", 'line_no': 836}]
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');", 'line_no': 836}
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20101, 'THIS IS NOT A VALID THEME NO');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 836
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 836
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20101, 'This is not a valid Theme No');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');", 'line_no': 838}]
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');", 'line_no': 838}
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THEME CANNOT BE DELETED WHEN THE DELETION IS NOT ON THE SAME DAY, ON WHICH THE THEME HAS BEEN INSERTED');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 838
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 838
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'Theme cannot be deleted when the deletion is not on the same day, on which the Theme has been inserted');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');", 'line_no': 840}]
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');", 'line_no': 840}
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THEME NO CANNOT BE UPDATED');
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 840
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 840
2025-08-28 06:26:51,311 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'Theme No cannot be updated');
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Theme Description "\'', 'line_no': 842}, {'indent': 38, 'line': '                                      || V_DESCRIPTION', 'line_no': 843}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 844}]
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Theme Description "\'', 'line_no': 842}
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THE AUTOMATICALLY GENERATED THEME DESCRIPTION "'
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 842
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 844
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Theme Description "' || V_DESCRIPTION || '" is too long');
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Theme Description "' || V_DESCRIPTION || '" is too long');
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Short Description Proposal "\'', 'line_no': 846}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_PROPOSAL', 'line_no': 847}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 848}]
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Short Description Proposal "\'', 'line_no': 846}
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THE AUTOMATICALLY GENERATED SHORT DESCRIPTION PROPOSAL "'
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 846
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 848
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Short Description Proposal "' || :OLD.THEME_DESC_PROPOSAL || '" is too long');
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Short Description Proposal "' || :OLD.THEME_DESC_PROPOSAL || '" is too long');
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Downstream Theme Description "\'', 'line_no': 850}, {'indent': 38, 'line': '                                      || :OLD.THEME_DESC_ALT', 'line_no': 851}, {'indent': 38, 'line': '                                      || \'" is too long\');', 'line_no': 852}]
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'The automatically generated Downstream Theme Description "\'', 'line_no': 850}
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THE AUTOMATICALLY GENERATED DOWNSTREAM THEME DESCRIPTION "'
2025-08-28 06:26:51,312 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 850
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 852
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Downstream Theme Description "' || :OLD.THEME_DESC_ALT || '" is too long');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'The automatically generated Downstream Theme Description "' || :OLD.THEME_DESC_ALT || '" is too long');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');", 'line_no': 854}]
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');", 'line_no': 854}
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THIS THEME NO ALREADY EXISTS');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 854
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 854
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'This Theme No already exists');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');", 'line_no': 856}]
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');", 'line_no': 856}
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'OFFICIAL CHANGE FOR THIS THEME NO AND DAY ALREADY EXISTS');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 856
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 856
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'Official Change for this Theme No and Day already exists');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');", 'line_no': 858}]
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');", 'line_no': 858}
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'NEW THEMES CAN ONLY BE INSERTED BY OFFICIAL CHANGES');
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 858
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 858
2025-08-28 06:26:51,313 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'New Themes can only be inserted by Official Changes');
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\' );', 'line_no': 860}]
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(-20400, \'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled\' );', 'line_no': 860}
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'IF PHARMA RX PORTFOLIO PROJECT IS SET TO "NO", THEN THE THEME DESCRIPTION MUST BE FILLED' );
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 860
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 860
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'If Pharma Rx Portfolio Project is set to "No", then the Theme Description must be filled' );
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');", 'line_no': 862}]
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');", 'line_no': 862}
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20400, 'THIS THEME DESCRIPTION ALREADY EXISTS');
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 862
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 862
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20400, 'This Theme Description already exists');
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': "      RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');", 'line_no': 864}]
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': "      RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');", 'line_no': 864}
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 864
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 864
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR( -20120, 'MDM_V_THEMES_IOF');
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(', 'line_no': 866}, {'indent': 9, 'line': '         -20900,', 'line_no': 867}, {'indent': 7, 'line': "       'Debug in Themes IOF standard'", 'line_no': 868}, {'indent': 7, 'line': '       );', 'line_no': 869}]
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,314 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 6, 'line': '      RAISE_APPLICATION_ERROR(', 'line_no': 866}
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 866
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 869
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR( -20900, 'Debug in Themes IOF standard' );
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR( -20900, 'Debug in Themes IOF standard' );
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.09684872627258301 seconds
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,315 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 29 vars, 2 consts, 18 excs, 63 comments
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - Analysis statistics: 29 vars, 2 consts, 18 excs, 63 comments
2025-08-28 06:26:51,315 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger1_analysis.json
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger1_analysis.json
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger1.sql ===
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - âœ“ Created trigger1_analysis.json
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - === Processing file 2/8: trigger2.sql ===
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger2.sql
2025-08-28 06:26:51,319 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger2_analysis.json
2025-08-28 06:26:51,320 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger2.sql ===
2025-08-28 06:26:51,320 - root - DEBUG - [common.py:105] - Successfully read 18805 characters from files/oracle\trigger2.sql
2025-08-28 06:26:51,320 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,320 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 18805 characters of SQL
2025-08-28 06:26:51,320 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,320 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,320 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,320 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,321 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 422 total, 89 with semicolons, 43 empty lines skipped
2025-08-28 06:26:51,321 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,321 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 6 comments extracted, 364 lines cleaned
2025-08-28 06:26:51,321 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,321 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 67 comments extracted, 315 lines cleaned
2025-08-28 06:26:51,321 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 18
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-17
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_MAP_EXISTS
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_MOLEC_ID_MISSING
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_NO_PORTF_MOLECULE_LEFT
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_UPD_INV_MAP
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS_INV_MAP
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INV_MOL_SEQUENCE
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: UPDATE_UPD
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNT_T_MAPPINGS
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNT_T_MOL_MAP
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MOLECULE_SEQ_NO
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_SEQ_NO_DUPLICATE_CNT
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: INVALID_MAPPING_EXISTS
2025-08-28 06:26:51,322 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_MANUAL_SHORT_DESC
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'ERR_MAP_EXISTS', 'when_line_no': 440, 'when_indent': 4, 'then_line_no': 440, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 441}]}, {'type': 'exception_handler', 'exception_name': 'ERR_MOLEC_ID_MISSING', 'when_line_no': 442, 'when_indent': 4, 'then_line_no': 442, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 443}]}, {'type': 'exception_handler', 'exception_name': 'ERR_UPD_INV_MAP', 'when_line_no': 444, 'when_indent': 4, 'then_line_no': 444, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 445}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS_INV_MAP', 'when_line_no': 446, 'when_indent': 4, 'then_line_no': 446, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 447}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INV_MOL_SEQUENCE', 'when_line_no': 448, 'when_indent': 4, 'then_line_no': 448, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 449}]}]
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 125 i: 200
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 126}
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1502] - {'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 126}
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 126}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 126 then_i: 126
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 126}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 156}
2025-08-28 06:26:51,323 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 156}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 156 then_i: 156
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 16, 'line': '                WHEN :NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1 THEN', 'line_no': 156}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    SELECT', 'line_no': 21}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC', 'line_no': 22}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    FROM', 'line_no': 23}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        GMD.THEMES', 'line_no': 24}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    WHERE', 'line_no': 25}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'line_no': 26}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (DELETING) THEN', 'line_no': 27}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 27
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 27 i: 58
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 21
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 33}, {'indent': 8, 'line': '        SET', 'line_no': 34}, {'indent': 12, 'line': "            TMM.VALID_IND = 'N'", 'line_no': 35}, {'indent': 8, 'line': '        WHERE', 'line_no': 36}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 37}, {'indent': 12, 'line': '            AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 38}, {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 41}, {'indent': 8, 'line': '        SET', 'line_no': 42}, {'indent': 12, 'line': '            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 43}, {'indent': 8, 'line': '        WHERE', 'line_no': 44}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 45}, {'indent': 12, 'line': '            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 46}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 47}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}]
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 27, 'then_line_no': 27, 'if_indent': 4, 'end_if_line_no': 58, 'then_statements': [{'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 33}, {'indent': 8, 'line': '        SET', 'line_no': 34}, {'indent': 12, 'line': "            TMM.VALID_IND = 'N'", 'line_no': 35}, {'indent': 8, 'line': '        WHERE', 'line_no': 36}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 37}, {'indent': 12, 'line': '            AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 38}, {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 41}, {'indent': 8, 'line': '        SET', 'line_no': 42}, {'indent': 12, 'line': '            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 43}, {'indent': 8, 'line': '        WHERE', 'line_no': 44}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 45}, {'indent': 12, 'line': '            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 46}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 47}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,324 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 33}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SET', 'line_no': 34}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            TMM.VALID_IND = 'N'", 'line_no': 35}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 36}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 37}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 38}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 41}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SET', 'line_no': 42}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 43}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 44}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 45}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 46}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 47}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        );', 'line_no': 57}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (INSERTING OR UPDATING) THEN', 'line_no': 60}
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 60
2025-08-28 06:26:51,325 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 60 i: 401
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 184
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        SELECT', 'line_no': 61}, {'indent': 12, 'line': '            COUNT (*) INTO V_COUNT_T_MAPPINGS', 'line_no': 62}, {'indent': 8, 'line': '        FROM', 'line_no': 63}, {'indent': 12, 'line': '            V_THEME_MOLECULE_MAP TMM', 'line_no': 64}, {'indent': 8, 'line': '        WHERE', 'line_no': 65}, {'indent': 12, 'line': '            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 66}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 67}, {'indent': 8, 'line': '        IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 68}, {'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}, {'indent': 8, 'line': '        END IF;', 'line_no': 87}, {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 89}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) THEN', 'line_no': 90}, {'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}, {'indent': 12, 'line': '            END IF;', 'line_no': 92}, {'indent': 8, 'line': '        END IF;', 'line_no': 93}, {'indent': 8, 'line': "        IF (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) THEN", 'line_no': 98}, {'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 107}, {'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}, {'indent': 12, 'line': '            END IF;', 'line_no': 109}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 119}, {'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}, {'indent': 12, 'line': '            END IF;', 'line_no': 121}, {'indent': 8, 'line': '        END IF;', 'line_no': 122}, {'indent': 8, 'line': '        IF (INSERTING) THEN', 'line_no': 124}, {'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}, {'indent': 8, 'line': '        END IF;', 'line_no': 201}, {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 202}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 203}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}, {'indent': 12, 'line': '            END IF;', 'line_no': 289}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 291}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}, {'indent': 12, 'line': '            END IF;', 'line_no': 351}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO THEN', 'line_no': 352}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}, {'indent': 12, 'line': '            END IF;', 'line_no': 392}, {'indent': 8, 'line': '        END IF;', 'line_no': 393}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}]
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 60, 'then_line_no': 60, 'if_indent': 4, 'end_if_line_no': 401, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 61}, {'indent': 12, 'line': '            COUNT (*) INTO V_COUNT_T_MAPPINGS', 'line_no': 62}, {'indent': 8, 'line': '        FROM', 'line_no': 63}, {'indent': 12, 'line': '            V_THEME_MOLECULE_MAP TMM', 'line_no': 64}, {'indent': 8, 'line': '        WHERE', 'line_no': 65}, {'indent': 12, 'line': '            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 66}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 67}, {'indent': 8, 'line': '        IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 68}, {'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}, {'indent': 8, 'line': '        END IF;', 'line_no': 87}, {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 89}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) THEN', 'line_no': 90}, {'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}, {'indent': 12, 'line': '            END IF;', 'line_no': 92}, {'indent': 8, 'line': '        END IF;', 'line_no': 93}, {'indent': 8, 'line': "        IF (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) THEN", 'line_no': 98}, {'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 107}, {'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}, {'indent': 12, 'line': '            END IF;', 'line_no': 109}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 119}, {'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}, {'indent': 12, 'line': '            END IF;', 'line_no': 121}, {'indent': 8, 'line': '        END IF;', 'line_no': 122}, {'indent': 8, 'line': '        IF (INSERTING) THEN', 'line_no': 124}, {'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}, {'indent': 8, 'line': '        END IF;', 'line_no': 201}, {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 202}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 203}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}, {'indent': 12, 'line': '            END IF;', 'line_no': 289}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 291}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}, {'indent': 12, 'line': '            END IF;', 'line_no': 351}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO THEN', 'line_no': 352}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}, {'indent': 12, 'line': '            END IF;', 'line_no': 392}, {'indent': 8, 'line': '        END IF;', 'line_no': 393}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SELECT', 'line_no': 61}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT (*) INTO V_COUNT_T_MAPPINGS', 'line_no': 62}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        FROM', 'line_no': 63}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_THEME_MOLECULE_MAP TMM', 'line_no': 64}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 65}
2025-08-28 06:26:51,326 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 66}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 67}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF (:NEW.MOLECULE_ID IS NULL) THEN', 'line_no': 68}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 68
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 68 i: 87
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}]
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 89}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 89
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 89 i: 93
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) THEN', 'line_no': 90}, {'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}, {'indent': 12, 'line': '            END IF;', 'line_no': 92}]
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'indent': 12, 'line': '            IF (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) THEN', 'line_no': 90}, {'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}, {'indent': 12, 'line': '            END IF;', 'line_no': 92}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) THEN', 'line_no': 90}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 90
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 90 i: 92
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}]
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) THEN", 'line_no': 98}
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 98
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 98 i: 122
2025-08-28 06:26:51,327 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 24
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 107}, {'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}, {'indent': 12, 'line': '            END IF;', 'line_no': 109}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 119}, {'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}, {'indent': 12, 'line': '            END IF;', 'line_no': 121}]
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 107}, {'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}, {'indent': 12, 'line': '            END IF;', 'line_no': 109}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 119}, {'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}, {'indent': 12, 'line': '            END IF;', 'line_no': 121}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 99}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 101}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 103}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 107}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 107
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 107 i: 109
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}]
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 111}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 113}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 115}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (V_COUNT_T_MOL_MAP > 0) THEN', 'line_no': 119}
2025-08-28 06:26:51,328 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 119
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 119 i: 121
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}]
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF (INSERTING) THEN', 'line_no': 124}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 124
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 124 i: 201
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}]
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}, {'indent': 20, 'line': '                    ELSE', 'line_no': 137}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}, {'indent': 20, 'line': '                    END IF;', 'line_no': 152}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}, {'indent': 20, 'line': '                    ELSE', 'line_no': 177}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}, {'indent': 20, 'line': '                    END IF;', 'line_no': 192}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 127}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 127
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 127 i: 152
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 23
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 139, 152
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]}
2025-08-28 06:26:51,329 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SET', 'line_no': 131}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 134}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            'Y'", 'line_no': 150}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        );', 'line_no': 151}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 159}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 161}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 167}
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 167
2025-08-28 06:26:51,330 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 167 i: 192
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 23
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 179, 192
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SET', 'line_no': 171}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 174}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            'Y'", 'line_no': 190}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        );', 'line_no': 191}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF (UPDATING) THEN', 'line_no': 202}
2025-08-28 06:26:51,331 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 202
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 202 i: 393
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 134
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 203}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}, {'indent': 12, 'line': '            END IF;', 'line_no': 289}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 291}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}, {'indent': 12, 'line': '            END IF;', 'line_no': 351}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO THEN', 'line_no': 352}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}, {'indent': 12, 'line': '            END IF;', 'line_no': 392}]
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 203}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}, {'indent': 12, 'line': '            END IF;', 'line_no': 289}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 291}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}, {'indent': 12, 'line': '            END IF;', 'line_no': 351}, {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO THEN', 'line_no': 352}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}, {'indent': 12, 'line': '            END IF;', 'line_no': 392}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID IS NOT NULL) THEN', 'line_no': 203}
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 203
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 203 i: 289
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 61
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}]
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}, {'indent': 16, 'line': '                END IF;', 'line_no': 211}, {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}, {'indent': 16, 'line': '                END IF;', 'line_no': 285}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) THEN', 'line_no': 204}
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 204
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 204 i: 211
2025-08-28 06:26:51,332 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 8
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}]
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 206}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 208}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 213}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 213
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 213 i: 285
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 51
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}]
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}, {'indent': 20, 'line': '                    ELSE', 'line_no': 239}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}, {'indent': 20, 'line': '                    END IF;', 'line_no': 250}, {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}, {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}, {'indent': 20, 'line': '                    ELSE', 'line_no': 265}, {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}, {'indent': 20, 'line': '                    END IF;', 'line_no': 280}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 223}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 225}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    IF (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) THEN', 'line_no': 228}
2025-08-28 06:26:51,333 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 228
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 228 i: 250
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 19
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 242, 250
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SET', 'line_no': 232}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 234}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SET', 'line_no': 243}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 245}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 254}
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 254
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 254 i: 280
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 24
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 267, 280
2025-08-28 06:26:51,334 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SET', 'line_no': 258}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 262}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            'Y'", 'line_no': 278}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        );', 'line_no': 279}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) THEN', 'line_no': 291}
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 291
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 291 i: 351
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 40
2025-08-28 06:26:51,335 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}]
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}, {'indent': 16, 'line': '                ELSE', 'line_no': 331}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}, {'indent': 16, 'line': '                END IF;', 'line_no': 346}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SET', 'line_no': 303}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 305}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SET', 'line_no': 311}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 313}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 320}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 320
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 320 i: 346
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 24
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 333, 346
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 324}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}
2025-08-28 06:26:51,336 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 328}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        'Y'", 'line_no': 344}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 345}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO THEN', 'line_no': 352}
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 352
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 352 i: 392
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 31
2025-08-28 06:26:51,337 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}]
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}, {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}, {'indent': 16, 'line': '                ELSE', 'line_no': 374}, {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}, {'indent': 16, 'line': '                END IF;', 'line_no': 387}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SET', 'line_no': 356}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 358}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF (INVALID_MAPPING_EXISTS) THEN', 'line_no': 363}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 363
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 363 i: 387
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 22
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 376, 387
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 367}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}
2025-08-28 06:26:51,338 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 371}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 386}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        );', 'line_no': 400}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    SELECT', 'line_no': 403}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT', 'line_no': 404}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    FROM', 'line_no': 405}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        (', 'line_no': 406}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 407}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MOLECULE_SEQ_NO', 'line_no': 408}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 409}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                THEME_MOLECULE_MAP TMM', 'line_no': 410}
2025-08-28 06:26:51,339 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 411}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 412}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                AND VALID_IND = 'Y'", 'line_no': 413}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            GROUP BY', 'line_no': 414}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MOLECULE_SEQ_NO', 'line_no': 415}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            HAVING', 'line_no': 416}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COUNT (*) > 1', 'line_no': 417}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        );', 'line_no': 418}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (V_SEQ_NO_DUPLICATE_CNT > 0) THEN', 'line_no': 419}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 419
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 419 i: 421
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        RAISE ERR_INV_MOL_SEQUENCE;', 'line_no': 420}]
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_line_no': 419, 'then_line_no': 419, 'if_indent': 4, 'end_if_line_no': 421, 'then_statements': [{'indent': 8, 'line': '        RAISE ERR_INV_MOL_SEQUENCE;', 'line_no': 420}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE ERR_INV_MOL_SEQUENCE;', 'line_no': 420}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 441}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 443}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 445}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 447}
2025-08-28 06:26:51,340 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 449}
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 4, 'line': '    SELECT', 'line_no': 21}, {'indent': 8, 'line': '        MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC', 'line_no': 22}, {'indent': 4, 'line': '    FROM', 'line_no': 23}, {'indent': 8, 'line': '        GMD.THEMES', 'line_no': 24}, {'indent': 4, 'line': '    WHERE', 'line_no': 25}, {'indent': 8, 'line': '        THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'line_no': 26}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 27, 'then_line_no': 27, 'if_indent': 4, 'end_if_line_no': 58, 'then_statements': [{'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 33}, {'indent': 8, 'line': '        SET', 'line_no': 34}, {'indent': 12, 'line': "            TMM.VALID_IND = 'N'", 'line_no': 35}, {'indent': 8, 'line': '        WHERE', 'line_no': 36}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 37}, {'indent': 12, 'line': '            AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 38}, {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 41}, {'indent': 8, 'line': '        SET', 'line_no': 42}, {'indent': 12, 'line': '            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 43}, {'indent': 8, 'line': '        WHERE', 'line_no': 44}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 45}, {'indent': 12, 'line': '            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 46}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 47}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 60, 'then_line_no': 60, 'if_indent': 4, 'end_if_line_no': 401, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 61}, {'indent': 12, 'line': '            COUNT (*) INTO V_COUNT_T_MAPPINGS', 'line_no': 62}, {'indent': 8, 'line': '        FROM', 'line_no': 63}, {'indent': 12, 'line': '            V_THEME_MOLECULE_MAP TMM', 'line_no': 64}, {'indent': 8, 'line': '        WHERE', 'line_no': 65}, {'indent': 12, 'line': '            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 66}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 67}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}], 'if_elses': [], 'else_statements': []}, {'indent': 4, 'line': '    SELECT', 'line_no': 403}, {'indent': 8, 'line': '        COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT', 'line_no': 404}, {'indent': 4, 'line': '    FROM', 'line_no': 405}, {'indent': 8, 'line': '        (', 'line_no': 406}, {'indent': 12, 'line': '            SELECT', 'line_no': 407}, {'indent': 16, 'line': '                MOLECULE_SEQ_NO', 'line_no': 408}, {'indent': 12, 'line': '            FROM', 'line_no': 409}, {'indent': 16, 'line': '                THEME_MOLECULE_MAP TMM', 'line_no': 410}, {'indent': 12, 'line': '            WHERE', 'line_no': 411}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 412}, {'indent': 16, 'line': "                AND VALID_IND = 'Y'", 'line_no': 413}, {'indent': 12, 'line': '            GROUP BY', 'line_no': 414}, {'indent': 16, 'line': '                MOLECULE_SEQ_NO', 'line_no': 415}, {'indent': 12, 'line': '            HAVING', 'line_no': 416}, {'indent': 16, 'line': '                COUNT (*) > 1', 'line_no': 417}, {'indent': 8, 'line': '        );', 'line_no': 418}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_line_no': 419, 'then_line_no': 419, 'if_indent': 4, 'end_if_line_no': 421, 'then_statements': [{'indent': 8, 'line': '        RAISE ERR_INV_MOL_SEQUENCE;', 'line_no': 420}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     SELECT || 21 || 4
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 21 || select_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 26 || select_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 33}, {'indent': 8, 'line': '        SET', 'line_no': 34}, {'indent': 12, 'line': "            TMM.VALID_IND = 'N'", 'line_no': 35}, {'indent': 8, 'line': '        WHERE', 'line_no': 36}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 37}, {'indent': 12, 'line': '            AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 38}, {'indent': 8, 'line': '        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 41}, {'indent': 8, 'line': '        SET', 'line_no': 42}, {'indent': 12, 'line': '            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 43}, {'indent': 8, 'line': '        WHERE', 'line_no': 44}, {'indent': 12, 'line': '            TMM.THEME_NO = :OLD.THEME_NO', 'line_no': 45}, {'indent': 12, 'line': '            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 46}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 47}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}]
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         UPDATE THEME_MOLECULE_MAP TMM || 33 || 8
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 33 || update_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 38 || update_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         UPDATE THEME_MOLECULE_MAP TMM || 41 || 8
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 41 || update_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 47 || update_statement
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( || 52 || 8
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,341 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_THEME_NO => :OLD.THEME_NO, || 53 || 12
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_MOLECULE_ID => :OLD.MOLECULE_ID, || 54 || 12
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_DATE => SYSDATE, || 55 || 12
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC || 56 || 12
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 18
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         ); || 57 || 8
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        SELECT', 'line_no': 61}, {'indent': 12, 'line': '            COUNT (*) INTO V_COUNT_T_MAPPINGS', 'line_no': 62}, {'indent': 8, 'line': '        FROM', 'line_no': 63}, {'indent': 12, 'line': '            V_THEME_MOLECULE_MAP TMM', 'line_no': 64}, {'indent': 8, 'line': '        WHERE', 'line_no': 65}, {'indent': 12, 'line': '            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 66}, {'indent': 12, 'line': "            AND TMM.VALID_IND = 'Y';", 'line_no': 67}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}]
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         SELECT || 61 || 8
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 61 || select_statement
2025-08-28 06:26:51,342 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 67 || select_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_MOLEC_ID_MISSING;', 'line_no': 69}]
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_MOLEC_ID_MISSING; || 69 || 12
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 69 || raise_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 69 || raise_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                RAISE ERR_UPD_INV_MAP;', 'line_no': 91}]
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 RAISE ERR_UPD_INV_MAP; || 91 || 16
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 91 || raise_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 91 || raise_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            SELECT', 'line_no': 99}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 100}, {'indent': 12, 'line': '            FROM', 'line_no': 101}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 102}, {'indent': 12, 'line': '            WHERE', 'line_no': 103}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 104}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 105}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'Y';", 'line_no': 106}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            SELECT', 'line_no': 111}, {'indent': 16, 'line': '                COUNT (*) INTO V_COUNT_T_MOL_MAP', 'line_no': 112}, {'indent': 12, 'line': '            FROM', 'line_no': 113}, {'indent': 16, 'line': '                V_THEME_MOLECULE_MAP TMM', 'line_no': 114}, {'indent': 12, 'line': '            WHERE', 'line_no': 115}, {'indent': 16, 'line': '                TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 116}, {'indent': 16, 'line': '                AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID', 'line_no': 117}, {'indent': 16, 'line': "                AND TMM.VALID_IND = 'N';", 'line_no': 118}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             SELECT || 99 || 12
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 99 || select_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 106 || select_statement
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,343 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                RAISE ERR_MAP_EXISTS;', 'line_no': 108}]
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 RAISE ERR_MAP_EXISTS; || 108 || 16
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 108 || raise_statement
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 108 || raise_statement
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             SELECT || 111 || 12
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 111 || select_statement
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 118 || select_statement
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                INVALID_MAPPING_EXISTS := TRUE;', 'line_no': 120}]
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 INVALID_MAPPING_EXISTS := TRUE; || 120 || 16
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 120 || 
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 120 || 
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]}]}], 'else_statements': [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]}]
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,344 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]}]
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 130}, {'indent': 24, 'line': '                        SET', 'line_no': 131}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 132}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 133}, {'indent': 24, 'line': '                        WHERE', 'line_no': 134}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 135}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 136}]
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         UPDATE THEME_MOLECULE_MAP TMM || 130 || 24
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 130 || update_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 136 || update_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 139}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 140}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 141}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 142}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 143}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 144}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 145}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 146}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 147}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 148}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 149}, {'indent': 28, 'line': "                            'Y'", 'line_no': 150}, {'indent': 24, 'line': '                        );', 'line_no': 151}]
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         INSERT INTO THEME_MOLECULE_MAP TMM ( || 139 || 24
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 139 || insert_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 151 || insert_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 158}, {'indent': 20, 'line': '                    SET', 'line_no': 159}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 160}, {'indent': 20, 'line': '                    WHERE', 'line_no': 161}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 162}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 163}, {'indent': 24, 'line': "                        AND TMM.VALID_IND = 'Y';", 'line_no': 164}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]}]
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE THEME_MOLECULE_MAP TMM || 158 || 20
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 158 || update_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 164 || update_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 170}, {'indent': 24, 'line': '                        SET', 'line_no': 171}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 172}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO', 'line_no': 173}, {'indent': 24, 'line': '                        WHERE', 'line_no': 174}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 175}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 176}]
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         UPDATE THEME_MOLECULE_MAP TMM || 170 || 24
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 170 || update_statement
2025-08-28 06:26:51,345 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 176 || update_statement
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 179}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 180}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 181}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 182}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 183}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 184}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 185}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 186}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 187}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 188}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 189}, {'indent': 28, 'line': "                            'Y'", 'line_no': 190}, {'indent': 24, 'line': '                        );', 'line_no': 191}]
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         INSERT INTO THEME_MOLECULE_MAP TMM ( || 179 || 24
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 179 || insert_statement
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 191 || insert_statement
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    RAISE ERR_INS_INV_MAP;', 'line_no': 199}]
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     RAISE ERR_INS_INV_MAP; || 199 || 20
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 199 || raise_statement
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 199 || raise_statement
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,346 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 205}, {'indent': 20, 'line': '                    SET', 'line_no': 206}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR', 'line_no': 207}, {'indent': 20, 'line': '                    WHERE', 'line_no': 208}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 209}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 210}]
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE THEME_MOLECULE_MAP TMM || 205 || 20
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 205 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 210 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 222}, {'indent': 20, 'line': '                    SET', 'line_no': 223}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'N'", 'line_no': 224}, {'indent': 20, 'line': '                    WHERE', 'line_no': 225}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 226}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 227}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}], 'if_elses': [], 'else_statements': [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]}]
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE THEME_MOLECULE_MAP TMM || 222 || 20
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 222 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 227 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 231}, {'indent': 24, 'line': '                        SET', 'line_no': 232}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 233}, {'indent': 24, 'line': '                        WHERE', 'line_no': 234}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 235}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 236}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 237}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;', 'line_no': 238}]
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         UPDATE THEME_MOLECULE_MAP TMM || 231 || 24
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 231 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 238 || update_statement
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 242}, {'indent': 24, 'line': '                        SET', 'line_no': 243}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1', 'line_no': 244}, {'indent': 24, 'line': '                        WHERE', 'line_no': 245}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 246}, {'indent': 28, 'line': "                            AND TMM.VALID_IND = 'Y'", 'line_no': 247}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO', 'line_no': 248}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;', 'line_no': 249}]
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,347 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         UPDATE THEME_MOLECULE_MAP TMM || 242 || 24
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 242 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 249 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 257}, {'indent': 24, 'line': '                        SET', 'line_no': 258}, {'indent': 28, 'line': "                            TMM.VALID_IND = 'Y',", 'line_no': 259}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 260}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR', 'line_no': 261}, {'indent': 24, 'line': '                        WHERE', 'line_no': 262}, {'indent': 28, 'line': '                            TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 263}, {'indent': 28, 'line': '                            AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 264}]
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         UPDATE THEME_MOLECULE_MAP TMM || 257 || 24
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 257 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 264 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 267}, {'indent': 28, 'line': '                            TMM.THEME_NO,', 'line_no': 268}, {'indent': 28, 'line': '                            TMM.MOLECULE_ID,', 'line_no': 269}, {'indent': 28, 'line': '                            TMM.MOLECULE_SEQ_NO,', 'line_no': 270}, {'indent': 28, 'line': '                            TMM.MOLECULE_MAP_CHAR,', 'line_no': 271}, {'indent': 28, 'line': '                            TMM.VALID_IND', 'line_no': 272}, {'indent': 24, 'line': '                        ) VALUES (', 'line_no': 273}, {'indent': 28, 'line': '                            :NEW.THEME_NO,', 'line_no': 274}, {'indent': 28, 'line': '                            :NEW.MOLECULE_ID,', 'line_no': 275}, {'indent': 28, 'line': '                            :NEW.MOLECULE_SEQ_NO,', 'line_no': 276}, {'indent': 28, 'line': '                            :NEW.MOLECULE_MAP_CHAR,', 'line_no': 277}, {'indent': 28, 'line': "                            'Y'", 'line_no': 278}, {'indent': 24, 'line': '                        );', 'line_no': 279}]
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         INSERT INTO THEME_MOLECULE_MAP TMM ( || 267 || 24
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 267 || insert_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 279 || insert_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 302}, {'indent': 16, 'line': '                SET', 'line_no': 303}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 304}, {'indent': 16, 'line': '                WHERE', 'line_no': 305}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 306}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;', 'line_no': 307}, {'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 310}, {'indent': 16, 'line': '                SET', 'line_no': 311}, {'indent': 20, 'line': '                    TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1', 'line_no': 312}, {'indent': 16, 'line': '                WHERE', 'line_no': 313}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 314}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO', 'line_no': 315}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO', 'line_no': 316}, {'indent': 20, 'line': "                    AND TMM.VALID_IND = 'Y';", 'line_no': 317}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]}]
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 UPDATE THEME_MOLECULE_MAP TMM || 302 || 16
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 302 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 307 || update_statement
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;
2025-08-28 06:26:51,348 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 UPDATE THEME_MOLECULE_MAP TMM || 310 || 16
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 310 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 317 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 323}, {'indent': 20, 'line': '                    SET', 'line_no': 324}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 325}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 326}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 327}, {'indent': 20, 'line': '                    WHERE', 'line_no': 328}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 329}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 330}]
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE THEME_MOLECULE_MAP TMM || 323 || 20
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 323 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 330 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 333}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 334}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 335}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 336}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR,', 'line_no': 337}, {'indent': 24, 'line': '                        TMM.VALID_IND', 'line_no': 338}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 339}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 340}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 341}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 342}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR,', 'line_no': 343}, {'indent': 24, 'line': "                        'Y'", 'line_no': 344}, {'indent': 20, 'line': '                    );', 'line_no': 345}]
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     INSERT INTO THEME_MOLECULE_MAP TMM ( || 333 || 20
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 333 || insert_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 345 || insert_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 355}, {'indent': 16, 'line': '                SET', 'line_no': 356}, {'indent': 20, 'line': "                    TMM.VALID_IND = 'N'", 'line_no': 357}, {'indent': 16, 'line': '                WHERE', 'line_no': 358}, {'indent': 20, 'line': '                    TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 359}, {'indent': 20, 'line': '                    AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID', 'line_no': 360}, {'indent': 20, 'line': '                    AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;', 'line_no': 361}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]}]
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 UPDATE THEME_MOLECULE_MAP TMM || 355 || 16
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 355 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 361 || update_statement
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;
2025-08-28 06:26:51,349 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE THEME_MOLECULE_MAP TMM', 'line_no': 366}, {'indent': 20, 'line': '                    SET', 'line_no': 367}, {'indent': 24, 'line': "                        TMM.VALID_IND = 'Y',", 'line_no': 368}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO,', 'line_no': 369}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR', 'line_no': 370}, {'indent': 20, 'line': '                    WHERE', 'line_no': 371}, {'indent': 24, 'line': '                        TMM.THEME_NO = :NEW.THEME_NO', 'line_no': 372}, {'indent': 24, 'line': '                        AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'line_no': 373}]
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE THEME_MOLECULE_MAP TMM || 366 || 20
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 366 || update_statement
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 373 || update_statement
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    INSERT INTO THEME_MOLECULE_MAP TMM (', 'line_no': 376}, {'indent': 24, 'line': '                        TMM.THEME_NO,', 'line_no': 377}, {'indent': 24, 'line': '                        TMM.MOLECULE_ID,', 'line_no': 378}, {'indent': 24, 'line': '                        TMM.MOLECULE_SEQ_NO,', 'line_no': 379}, {'indent': 24, 'line': '                        TMM.MOLECULE_MAP_CHAR', 'line_no': 380}, {'indent': 20, 'line': '                    ) VALUES (', 'line_no': 381}, {'indent': 24, 'line': '                        :NEW.THEME_NO,', 'line_no': 382}, {'indent': 24, 'line': '                        :NEW.MOLECULE_ID,', 'line_no': 383}, {'indent': 24, 'line': '                        :NEW.MOLECULE_SEQ_NO,', 'line_no': 384}, {'indent': 24, 'line': '                        :NEW.MOLECULE_MAP_CHAR', 'line_no': 385}, {'indent': 20, 'line': '                    );', 'line_no': 386}]
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     INSERT INTO THEME_MOLECULE_MAP TMM ( || 376 || 20
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 376 || insert_statement
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 386 || insert_statement
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( || 395 || 8
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_THEME_NO => :NEW.THEME_NO, || 396 || 12
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_MOLECULE_ID => 0, || 397 || 12
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_DATE => SYSDATE, || 398 || 12
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC || 399 || 12
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         ); || 400 || 8
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,350 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     SELECT || 403 || 4
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 403 || select_statement
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 418 || select_statement
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 24
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE ERR_INV_MOL_SEQUENCE;', 'line_no': 420}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE ERR_INV_MOL_SEQUENCE; || 420 || 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 420 || raise_statement
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 420 || raise_statement
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 441}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF'); || 441 || 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 443}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF'); || 443 || 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 445}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF'); || 445 || 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 447}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF'); || 447 || 8
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 449}]
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,351 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF'); || 449 || 8
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_line_no': 21, 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 27, 'then_line_no': 27, 'if_indent': 4, 'end_if_line_no': 58, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 33, 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 41, 'statement_indent': 8}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 60, 'then_line_no': 60, 'if_indent': 4, 'end_if_line_no': 401, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 61, 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 139, 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 179, 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 333, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_line_no': 376, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_line_no': 403, 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_line_no': 419, 'then_line_no': 419, 'if_indent': 4, 'end_if_line_no': 421, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_line_no': 420, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 33, 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 41, 'statement_indent': 8}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}, {'indent': 12, 'line': '            P_THEME_NO => :OLD.THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            P_MOLECULE_ID => :OLD.MOLECULE_ID,', 'line_no': 54}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 55}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 56}, {'indent': 8, 'line': '        );', 'line_no': 57}]
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 52}
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 52
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 57
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );
2025-08-28 06:26:51,352 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );
2025-08-28 06:26:51,353 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,353 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,353 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 61, 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_line_no': 68, 'then_line_no': 68, 'if_indent': 8, 'end_if_line_no': 87, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 89, 'then_line_no': 89, 'if_indent': 8, 'end_if_line_no': 93, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_line_no': 98, 'then_line_no': 98, 'if_indent': 8, 'end_if_line_no': 122, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 124, 'then_line_no': 124, 'if_indent': 8, 'end_if_line_no': 201, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 139, 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 179, 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_line_no': 202, 'then_line_no': 202, 'if_indent': 8, 'end_if_line_no': 393, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 333, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_line_no': 376, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}, {'indent': 12, 'line': '            P_THEME_NO => :NEW.THEME_NO,', 'line_no': 396}, {'indent': 12, 'line': '            P_MOLECULE_ID => 0,', 'line_no': 397}, {'indent': 12, 'line': '            P_DATE => SYSDATE,', 'line_no': 398}, {'indent': 12, 'line': '            P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC', 'line_no': 399}, {'indent': 8, 'line': '        );', 'line_no': 400}]
2025-08-28 06:26:51,353 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_line_no': 69, 'statement_indent': 12}]
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_line_no': 90, 'then_line_no': 90, 'if_indent': 12, 'end_if_line_no': 92, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_line_no': 91, 'statement_indent': 16}]
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_line_no': 99, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 107, 'then_line_no': 107, 'if_indent': 12, 'end_if_line_no': 109, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_line_no': 111, 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_line_no': 119, 'then_line_no': 119, 'if_indent': 12, 'end_if_line_no': 121, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,354 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_line_no': 108, 'statement_indent': 16}]
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_line_no': 120, 'assignment_indent': 16}]
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': '', 'type': 'case_when', 'case_line_no': 125, 'case_indent': 12, 'end_case_line_no': 200, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 126, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_line_no': 126, 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 139, 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_line_no': 156, 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_line_no': 156, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 179, 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]}]
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 127, 'then_line_no': 127, 'if_indent': 20, 'end_if_line_no': 152, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 139, 'statement_indent': 24}]}]
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,355 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 130, 'statement_indent': 24}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 139, 'statement_indent': 24}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 158, 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 167, 'then_line_no': 167, 'if_indent': 20, 'end_if_line_no': 192, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 179, 'statement_indent': 24}]}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 170, 'statement_indent': 24}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 179, 'statement_indent': 24}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_line_no': 199, 'statement_indent': 20}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 203, 'then_line_no': 203, 'if_indent': 12, 'end_if_line_no': 289, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 291, 'then_line_no': 291, 'if_indent': 12, 'end_if_line_no': 351, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 333, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_line_no': 352, 'then_line_no': 352, 'if_indent': 12, 'end_if_line_no': 392, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_line_no': 376, 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,356 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_line_no': 204, 'then_line_no': 204, 'if_indent': 16, 'end_if_line_no': 211, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 213, 'then_line_no': 213, 'if_indent': 16, 'end_if_line_no': 285, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_line_no': 205, 'statement_indent': 20}]
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 222, 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_line_no': 228, 'then_line_no': 228, 'if_indent': 20, 'end_if_line_no': 250, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 254, 'then_line_no': 254, 'if_indent': 20, 'end_if_line_no': 280, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]}]
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_line_no': 231, 'statement_indent': 24}]
2025-08-28 06:26:51,357 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 242, 'statement_indent': 24}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 257, 'statement_indent': 24}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 267, 'statement_indent': 24}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_line_no': 302, 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_line_no': 310, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 320, 'then_line_no': 320, 'if_indent': 16, 'end_if_line_no': 346, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 333, 'statement_indent': 20}]}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 323, 'statement_indent': 20}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_line_no': 333, 'statement_indent': 20}]
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,358 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_line_no': 355, 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_line_no': 363, 'then_line_no': 363, 'if_indent': 16, 'end_if_line_no': 387, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_line_no': 376, 'statement_indent': 20}]}]
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_line_no': 366, 'statement_indent': 20}]
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_line_no': 376, 'statement_indent': 20}]
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 6
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (', 'line_no': 395}
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC (
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 395
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 400
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC ( P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC );
2025-08-28 06:26:51,359 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_line_no': 420, 'statement_indent': 8}]
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 441}]
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 441}
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 441
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 441
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20110, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 443}]
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 443}
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 443
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 443
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20111, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 445}]
2025-08-28 06:26:51,360 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 445}
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 445
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 445
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20112, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 447}]
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 447}
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 447
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 447
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 449}]
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');", 'line_no': 449}
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 449
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 449
2025-08-28 06:26:51,361 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20120, 'MDM_THEME_MOLECULE_MAP_IOF');
2025-08-28 06:26:51,362 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,362 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.04149150848388672 seconds
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,362 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 6 vars, 0 consts, 7 excs, 73 comments
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - Analysis statistics: 6 vars, 0 consts, 7 excs, 73 comments
2025-08-28 06:26:51,362 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger2_analysis.json
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger2_analysis.json
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger2.sql ===
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - âœ“ Created trigger2_analysis.json
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - === Processing file 3/8: trigger3.sql ===
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger3.sql
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger3_analysis.json
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger3.sql ===
2025-08-28 06:26:51,365 - root - DEBUG - [common.py:105] - Successfully read 12985 characters from files/oracle\trigger3.sql
2025-08-28 06:26:51,366 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,366 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 12985 characters of SQL
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,366 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,366 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 244 total, 58 with semicolons, 21 empty lines skipped
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 244 lines cleaned
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 17 comments extracted, 227 lines cleaned
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,366 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 14
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-13
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TRIGGER_NAME
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: CNTR
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_UPD
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_CTRY_CHG
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_NOT_ALLOWED_TO_INVALIDATE
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_USERID
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: TEST_ERR
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNTRY_CD
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COMPANY_TYPE_CD
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS_LEGAL_ADDR
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_VALID_FROM
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'ERR_UPD', 'when_line_no': 253, 'when_indent': 4, 'then_line_no': 253, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);", 'line_no': 254}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS', 'when_line_no': 255, 'when_indent': 4, 'then_line_no': 255, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 256}]}, {'type': 'exception_handler', 'exception_name': 'ERR_CTRY_CHG', 'when_line_no': 257, 'when_indent': 4, 'then_line_no': 257, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 258}]}, {'type': 'exception_handler', 'exception_name': 'TEST_ERR', 'when_line_no': 259, 'when_indent': 4, 'then_line_no': 259, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);", 'line_no': 260}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS_LEGAL_ADDR', 'when_line_no': 261, 'when_indent': 4, 'then_line_no': 261, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 262}]}, {'type': 'exception_handler', 'exception_name': 'ERR_NOT_ALLOWED_TO_INVALIDATE', 'when_line_no': 263, 'when_indent': 4, 'then_line_no': 263, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 264}]}]
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 4, 'line': '    BEGIN', 'line_no': 15} 0
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:1631] - Exception line: {'indent': 4, 'line': '    EXCEPTION', 'line_no': 17} 2
2025-08-28 06:26:51,367 - root - DEBUG - [OracleTriggerAnalyzer.py:1640] - End line: {'indent': 4, 'line': '    END;', 'line_no': 20} 5
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}]
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}], 'exception_line_no': 17, 'end_line_no': 20}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    CNTR := 0;', 'line_no': 22}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    SELECT', 'line_no': 23}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        COUNT (*) INTO CNTR', 'line_no': 24}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    FROM', 'line_no': 25}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        CFG_V_COMPANY_ADDRESSES', 'line_no': 26}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    WHERE', 'line_no': 27}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'line_no': 28}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'line_no': 29}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (INSERTING) THEN', 'line_no': 30}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 30
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 30 i: 34
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        IF (CNTR > 0) THEN', 'line_no': 31}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}, {'indent': 8, 'line': '        END IF;', 'line_no': 33}]
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'indent': 8, 'line': '        IF (CNTR > 0) THEN', 'line_no': 31}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}, {'indent': 8, 'line': '        END IF;', 'line_no': 33}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF (CNTR > 0) THEN', 'line_no': 31}
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 31
2025-08-28 06:26:51,368 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 31 i: 33
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}]
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (INSERTING OR UPDATING) THEN', 'line_no': 36}
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 36
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 36 i: 243
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 174
2025-08-28 06:26:51,369 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'indent': 8, 'line': "        IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN", 'line_no': 43}, {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}, {'indent': 8, 'line': '        END IF;', 'line_no': 45}, {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN", 'line_no': 47}, {'indent': 12, 'line': '            IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}, {'indent': 8, 'line': '        END IF;', 'line_no': 196}, {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN", 'line_no': 198}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}, {'indent': 8, 'line': '        END IF;', 'line_no': 242}]
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'indent': 8, 'line': "        IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN", 'line_no': 43}, {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}, {'indent': 8, 'line': '        END IF;', 'line_no': 45}, {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN", 'line_no': 47}, {'indent': 12, 'line': '            IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}, {'indent': 8, 'line': '        END IF;', 'line_no': 196}, {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN", 'line_no': 198}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}, {'indent': 8, 'line': '        END IF;', 'line_no': 242}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SELECT', 'line_no': 37}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        FROM', 'line_no': 39}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 41}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) THEN", 'line_no': 43}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 43
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 43 i: 45
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}]
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) THEN", 'line_no': 47}
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 47
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 47 i: 196
2025-08-28 06:26:51,370 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 122
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}]
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'indent': 12, 'line': '            IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 48}
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 48
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 48 i: 50
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}]
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 52}
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 52
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 52 i: 195
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 117
2025-08-28 06:26:51,371 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 76, 195
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}]}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}
2025-08-28 06:26:51,372 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 72}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) THEN', 'line_no': 76}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 76
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 76 i: 194
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 96
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 176, 194
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}
2025-08-28 06:26:51,373 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 99}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SELECT', 'line_no': 105}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    FROM', 'line_no': 107}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 109}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    IF (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) THEN", 'line_no': 114}
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 114
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 114 i: 172
2025-08-28 06:26:51,374 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 47
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}]
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SELECT', 'line_no': 118}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        FROM', 'line_no': 120}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 122}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        IF (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') THEN", 'line_no': 126}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 126
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 126 i: 134
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 133, 134
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}
2025-08-28 06:26:51,375 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        );', 'line_no': 145}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        IF (V_COMPANY_TYPE_CD = 'L') THEN", 'line_no': 148}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 148
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 148 i: 171
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 24
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}]
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                SELECT', 'line_no': 150}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                FROM', 'line_no': 152}
2025-08-28 06:26:51,376 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                WHERE', 'line_no': 154}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                );', 'line_no': 169}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}
2025-08-28 06:26:51,377 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 193}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) THEN", 'line_no': 198}
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 198
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 198 i: 242
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 41
2025-08-28 06:26:51,378 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}]
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF (CNTR = 0) THEN', 'line_no': 199}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 199
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 199 i: 241
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 39
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 223, 241
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}
2025-08-28 06:26:51,379 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 219}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}
2025-08-28 06:26:51,380 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 240}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (DELETING) THEN', 'line_no': 245}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 245
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 245 i: 251
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 6
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN", 'line_no': 246}, {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}, {'indent': 8, 'line': '        END IF;', 'line_no': 248}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN", 'line_no': 246}, {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}, {'indent': 8, 'line': '        END IF;', 'line_no': 248}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) THEN", 'line_no': 246}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 246
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 246 i: 248
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}]
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);", 'line_no': 254}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 256}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 258}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);", 'line_no': 260}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 262}
2025-08-28 06:26:51,381 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 264}
2025-08-28 06:26:51,382 - root - DEBUG - [OracleTriggerAnalyzer.py:1083] - for_i: 149 i: 149
2025-08-28 06:26:51,382 - root - DEBUG - [OracleTriggerAnalyzer.py:1178] - for_loop_statement: {'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []} 149 159
2025-08-28 06:26:51,382 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}], 'exception_line_no': 17, 'end_line_no': 20}, {'indent': 4, 'line': '    CNTR := 0;', 'line_no': 22}, {'indent': 4, 'line': '    SELECT', 'line_no': 23}, {'indent': 8, 'line': '        COUNT (*) INTO CNTR', 'line_no': 24}, {'indent': 4, 'line': '    FROM', 'line_no': 25}, {'indent': 8, 'line': '        CFG_V_COMPANY_ADDRESSES', 'line_no': 26}, {'indent': 4, 'line': '    WHERE', 'line_no': 27}, {'indent': 8, 'line': '        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'line_no': 28}, {'indent': 8, 'line': '        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'line_no': 29}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,382 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,382 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}]
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_USERID := TXO_UTIL.GET_USERID; || 16 || 8
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 16 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 16 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_USERID := USER; || 19 || 12
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 19 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 19 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     CNTR := 0; || 22 || 4
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 22 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 22 || 
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 22, 'assignment_indent': 4}
2025-08-28 06:26:51,383 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     SELECT || 23 || 4
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 23 || select_statement
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 29 || select_statement
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}]
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_INS; || 32 || 12
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 32 || raise_statement
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 32 || raise_statement
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,384 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         SELECT || 37 || 8
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 37 || select_statement
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 42 || select_statement
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}]
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_INS_LEGAL_ADDR; || 44 || 12
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 44 || raise_statement
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 44 || raise_statement
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}]
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}]
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,385 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 RAISE ERR_CTRY_CHG; || 49 || 16
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 49 || raise_statement
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 49 || raise_statement
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}]
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 55 || 16
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 56 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 57 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 58 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 59 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 60 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 61 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 62 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 63 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 64 || 20
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,386 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 65 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 66 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 67 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 68 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 69 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 70 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'INSERT' || 71 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 72 || 16
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 82 || 20
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COMPANY_CD => :NEW.COMPANY_CD, || 83 || 24
2025-08-28 06:26:51,387 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 84 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 85 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_STREET => :NEW.STREET, || 86 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_HOUSE_NO => :NEW.HOUSE_NO, || 87 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_BUILDING => :NEW.BUILDING, || 88 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 89 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ZIP_CODE => :NEW.ZIP_CODE, || 90 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_CITY=> :NEW.CITY, || 91 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 92 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COUNTRY_ID => :NEW.COUNTRY_ID, || 93 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LATITUDE => :NEW.LATITUDE, || 94 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LONGITUDE => :NEW.LONGITUDE, || 95 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 96 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_VALID_FROM => :NEW.VALID_FROM, || 97 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ACTION_TYPE => 'CTRY_CHANGE' || 98 || 24
2025-08-28 06:26:51,388 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     ); || 99 || 20
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 18
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     CNTR := 0; || 102 || 20
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 102 || 
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 102 || 
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 19
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     SELECT || 105 || 20
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 105 || select_statement
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 113 || select_statement
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 28
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         SELECT || 118 || 24
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 118 || select_statement
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 123 || select_statement
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}]
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy'); || 129 || 28
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 129 || 
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 129 || 
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}
2025-08-28 06:26:51,389 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy'); || 133 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 133 || 
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 133 || 
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 136 || 24
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_COMPANY_CD => :NEW.COMPANY_CD, || 137 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_REPORTING_ENTITY_CD => 'J-' || 138 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                                      || V_COUNTRY_CD, || 139 || 53
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_VALID_FROM_DATE => V_VALID_FROM, || 140 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_VALID_TO_DATE => NULL, || 141 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_CHANGE_USER => V_USERID, || 142 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_MAPPING_TYPE => 'JU', || 143 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_ACTION_TYPE => 'INSERT' || 144 || 28
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         ); || 145 || 24
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}]
2025-08-28 06:26:51,390 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 176 || 20
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COMPANY_CD => :NEW.COMPANY_CD, || 177 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 178 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 179 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_STREET => :NEW.STREET, || 180 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_HOUSE_NO => :NEW.HOUSE_NO, || 181 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_BUILDING => :NEW.BUILDING, || 182 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 183 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ZIP_CODE => :NEW.ZIP_CODE, || 184 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_CITY=> :NEW.CITY, || 185 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 186 || 24
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,391 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COUNTRY_ID => :NEW.COUNTRY_ID, || 187 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LATITUDE => :NEW.LATITUDE, || 188 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LONGITUDE => :NEW.LONGITUDE, || 189 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 190 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_VALID_FROM => :NEW.VALID_FROM, || 191 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ACTION_TYPE => 'UPDATE' || 192 || 24
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     ); || 193 || 20
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}]
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}]
2025-08-28 06:26:51,392 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 202 || 16
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 203 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 204 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 205 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 206 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 207 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 208 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 209 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 210 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 211 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 212 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 213 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 214 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 215 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 216 || 20
2025-08-28 06:26:51,393 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 217 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'INSERT' || 218 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 219 || 16
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 223 || 16
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 224 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 225 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 226 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 227 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 228 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 229 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 230 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 231 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 232 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 233 || 20
2025-08-28 06:26:51,394 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 234 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 235 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 236 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 237 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 238 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'UPDATE' || 239 || 20
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 240 || 16
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}]
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_NOT_ALLOWED_TO_INVALIDATE; || 247 || 12
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 247 || raise_statement
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 247 || raise_statement
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'); || 250 || 8
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);", 'line_no': 254}]
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,395 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD); || 254 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 256}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.'); || 256 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 258}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.'); || 258 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);", 'line_no': 260}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR); || 260 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 262}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company'); || 262 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 264}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address'); || 264 || 8
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}]}], 'exception_line_no': 17, 'end_line_no': 20}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 22, 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_line_no': 23, 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}]
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,396 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}]
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}]
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}]
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,397 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}]
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}]
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}]
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 55
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 72
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]
2025-08-28 06:26:51,398 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 82
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 99
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 18
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 19
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 20
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}]
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,399 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 136
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 145
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 12
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}]
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,400 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 176
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 193
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}]
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}]
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}
2025-08-28 06:26:51,401 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 202
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 219
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]
2025-08-28 06:26:51,402 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 223
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 240
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,403 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}]
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,404 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 250
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 250
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);", 'line_no': 254}]
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);", 'line_no': 254}
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20111, 'THE ADDRESS CANNOT BE UPDATED BECAUSE THE ADDRESS TYPE IS DIFFERENT. OLD ADDRESS TYPE: ' || :OLD.ADDRESS_TYPE_CD || ' NEW ADDRESS TYPE: ' || :NEW.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 254
2025-08-28 06:26:51,405 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 254
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || :OLD.ADDRESS_TYPE_CD || ' New address type: ' || :NEW.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 256}]
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 256}
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20112, 'AN ADDRESS ALREADY EXISTS FOR THIS COMPANY AND ADDRESS TYPE. TO MODIFY THE EXISTING ADDRESS, PLEASE USE THE UPDATE BUTTON.');
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 256
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 256
2025-08-28 06:26:51,406 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 258}]
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 258}
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'THE COMPANY COUNTRY MODIFIED BUT NOT THE VALID FROM DATE. PLEASE UPDATE ALSO THE VALID FROM DATE.');
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 258
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 258
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);", 'line_no': 260}]
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);", 'line_no': 260}
2025-08-28 06:26:51,407 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'NEW: ' || :NEW.COMPANY_CD || ' OLD:' || :OLD.COMPANY_CD || 'COUNT: ' || CNTR);
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 260
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 260
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'New: ' || :NEW.COMPANY_CD || ' Old:' || :OLD.COMPANY_CD || 'Count: ' || CNTR);
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 262}]
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 262}
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'THE LEGAL ADDRESS CANNOT BE INSERTED FOR THIS TYPE OF COMPANY');
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 262
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 262
2025-08-28 06:26:51,408 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 264}]
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 264}
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'IT IS NOT ALLOWED TO INVALIDATE/DELETE THIS TYPE OF ADDRESS');
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 264
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 264
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');
2025-08-28 06:26:51,409 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,410 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.043938398361206055 seconds
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,410 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - Analysis statistics: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-28 06:26:51,410 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger3_analysis.json
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger3_analysis.json
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger3.sql ===
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - âœ“ Created trigger3_analysis.json
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - === Processing file 4/8: trigger4.sql ===
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger4.sql
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger4_analysis.json
2025-08-28 06:26:51,415 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger4.sql ===
2025-08-28 06:26:51,416 - root - DEBUG - [common.py:105] - Successfully read 4077 characters from files/oracle\trigger4.sql
2025-08-28 06:26:51,416 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,416 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 4077 characters of SQL
2025-08-28 06:26:51,416 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,416 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,416 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,417 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,417 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 22 total, 16 with semicolons, 1 empty lines skipped
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 22 lines cleaned
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 0 comments extracted, 22 lines cleaned
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 9
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-8
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_ACTION
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: COL_NAMES
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: COL_NEW_VALUES
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: COL_OLD_VALUES
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:2241] - LOWER(TG_TABLE_NAME)
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:2241] - '_his'
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TABLE_NAME
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_SCHEMA_NAME
2025-08-28 06:26:51,417 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    IF TG_OP = 'INSERT' THEN", 'line_no': 10}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 10
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 10 i: 16
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 7
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1303] - then_statements: 0 2
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 4, 'line': "    ELSIF TG_OP = 'DELETE' THEN", 'line_no': 14}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1313] - {'indent': 4, 'line': "    ELSIF TG_OP = 'UPDATE' THEN", 'line_no': 12}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1348] - [{'indent': 4, 'line': "    ELSIF TG_OP = 'UPDATE' THEN", 'line_no': 12}, {'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}]
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1351] - elif_else_then_statements[0]: {'indent': 4, 'line': "    ELSIF TG_OP = 'UPDATE' THEN", 'line_no': 12}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1378] - elif_else_then_statements 0: 12 then_i: 12
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1379] - case_when_then_statements: [{'indent': 4, 'line': "    ELSIF TG_OP = 'UPDATE' THEN", 'line_no': 12}, {'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}]
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1380] - elif_else_then_statements[0]['indent']: 4
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': "        V_ACTION := 'D';", 'line_no': 15}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 4, 'line': '    END IF;', 'line_no': 16}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_line_no': 10, 'then_line_no': 10, 'if_indent': 4, 'end_if_line_no': 16, 'then_statements': [{'indent': 8, 'line': "        V_ACTION := 'I';", 'line_no': 11}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 12, 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_line_no': 12, 'then_statements': [{'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}]}], 'else_statements': []}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        V_ACTION := 'I';", 'line_no': 11}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    COL_NAMES := ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'line_no': 18}
2025-08-28 06:26:51,418 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    COL_NEW_VALUES := ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'line_no': 19}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    COL_OLD_VALUES := ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'line_no': 20}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );', 'line_no': 21}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    RETURN NULL;', 'line_no': 22}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_line_no': 10, 'then_line_no': 10, 'if_indent': 4, 'end_if_line_no': 16, 'then_statements': [{'indent': 8, 'line': "        V_ACTION := 'I';", 'line_no': 11}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 12, 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_line_no': 12, 'then_statements': [{'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}]}], 'else_statements': []}, {'indent': 4, 'line': "    COL_NAMES := ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'line_no': 18}, {'indent': 4, 'line': "    COL_NEW_VALUES := ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'line_no': 19}, {'indent': 4, 'line': "    COL_OLD_VALUES := ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'line_no': 20}, {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );', 'line_no': 21}, {'indent': 4, 'line': '    RETURN NULL;', 'line_no': 22}]
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        V_ACTION := 'I';", 'line_no': 11}]
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_ACTION := 'I'; || 11 || 8
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 11 || 
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 11 || 
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_line_no': 11, 'assignment_indent': 8}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        V_ACTION := 'U';", 'line_no': 13}]
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_ACTION := 'U'; || 13 || 8
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 13 || 
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 13 || 
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_line_no': 13, 'assignment_indent': 8}
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     COL_NAMES := ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ]; || 18 || 4
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 18 || 
2025-08-28 06:26:51,419 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 18 || 
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_line_no': 18, 'assignment_indent': 4}
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     COL_NEW_VALUES := ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ]; || 19 || 4
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 19 || 
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 19 || 
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 19, 'assignment_indent': 4}
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     COL_OLD_VALUES := ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ]; || 20 || 4
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 20 || 
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 20 || 
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 20, 'assignment_indent': 4}
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES ); || 21 || 4
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     RETURN NULL; || 22 || 4
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:890] - stmt start: 22 || return_statement
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:892] - stmt end: 22 || return_statement
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_line_no': 10, 'then_line_no': 10, 'if_indent': 4, 'end_if_line_no': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_line_no': 11, 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_line_no': 12, 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_line_no': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_line_no': 13, 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_line_no': 18, 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 19, 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_line_no': 20, 'assignment_indent': 4}, {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );', 'line_no': 21}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 22, 'statement_indent': 4}]
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_line_no': 11, 'assignment_indent': 8}]
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,420 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_line_no': 13, 'assignment_indent': 8}]
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );', 'line_no': 21}
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.004775524139404297 seconds
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,421 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 6 vars, 0 consts, 0 excs, 0 comments
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - Analysis statistics: 6 vars, 0 consts, 0 excs, 0 comments
2025-08-28 06:26:51,421 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger4_analysis.json
2025-08-28 06:26:51,422 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger4_analysis.json
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger4.sql ===
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - âœ“ Created trigger4_analysis.json
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - === Processing file 5/8: trigger5.sql ===
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger5.sql
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger5_analysis.json
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger5.sql ===
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - Successfully read 1503 characters from files/oracle\trigger5.sql
2025-08-28 06:26:51,423 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,424 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 1503 characters of SQL
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,424 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,424 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 34 total, 13 with semicolons, 2 empty lines skipped
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 34 lines cleaned
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 0 comments extracted, 34 lines cleaned
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,424 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 4
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-3
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_USERID
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TRG_UPD_DATE_STR
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 9 i: 24
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R') THEN", 'line_no': 10}
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1502] - {'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R') THEN", 'line_no': 10}
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R') THEN", 'line_no': 10}, {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 10 then_i: 10
2025-08-28 06:26:51,425 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R') THEN", 'line_no': 10}, {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I') THEN", 'line_no': 16}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I') THEN", 'line_no': 16}, {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 16 then_i: 16
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 16, 'line': "                WHEN NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I') THEN", 'line_no': 16}, {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 20, 'line': '                    NULL;', 'line_no': 23}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    V_USERID := COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'line_no': 5}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    V_TRG_UPD_DATE_STR := TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'line_no': 6}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': "    IF TG_OP = 'UPDATE' THEN", 'line_no': 7}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 7
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 7 i: 33
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 11
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': "        IF COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') THEN", 'line_no': 8}, {'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}, {'indent': 8, 'line': '        END IF;', 'line_no': 32}]
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_line_no': 7, 'then_line_no': 7, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'indent': 8, 'line': "        IF COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') THEN", 'line_no': 8}, {'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}, {'indent': 8, 'line': '        END IF;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,426 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') THEN", 'line_no': 8}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 8
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 8 i: 32
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 9
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}]
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 12}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 14}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SET', 'line_no': 18}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 20}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    NULL;', 'line_no': 23}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}
2025-08-28 06:26:51,427 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            );', 'line_no': 31}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    RETURN NULL;', 'line_no': 35}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 4, 'line': '    V_USERID := COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'line_no': 5}, {'indent': 4, 'line': "    V_TRG_UPD_DATE_STR := TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'line_no': 6}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_line_no': 7, 'then_line_no': 7, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'indent': 4, 'line': '    RETURN NULL;', 'line_no': 35}]
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     V_USERID := COALESCE(NEW.UPD_USER, OLD.UPD_USER); || 5 || 4
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 5 || 
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 5 || 
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_line_no': 5, 'assignment_indent': 4}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     V_TRG_UPD_DATE_STR := TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD'); || 6 || 4
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 6 || 
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 6 || 
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_line_no': 6, 'assignment_indent': 4}
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]}], 'else_statements': [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}]
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,428 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 11}, {'indent': 20, 'line': '                    SET', 'line_no': 12}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.PROD_FAM_NAME', 'line_no': 13}, {'indent': 20, 'line': '                    WHERE', 'line_no': 14}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 15}]
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE GMD.THEME_MOLECULES || 11 || 20
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 11 || update_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 15 || update_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    UPDATE GMD.THEME_MOLECULES', 'line_no': 17}, {'indent': 20, 'line': '                    SET', 'line_no': 18}, {'indent': 24, 'line': '                        MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME', 'line_no': 19}, {'indent': 20, 'line': '                    WHERE', 'line_no': 20}, {'indent': 24, 'line': '                        PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'line_no': 21}]
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     UPDATE GMD.THEME_MOLECULES || 17 || 20
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 17 || update_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 21 || update_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    NULL;', 'line_no': 23}]
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     NULL; || 23 || 20
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 23 || null_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 23 || null_statement
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( || 26 || 12
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, || 27 || 16
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 P_REGISTRAR => V_USERID::TEXT, || 28 || 16
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, || 29 || 16
2025-08-28 06:26:51,429 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT || 30 || 16
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             ); || 31 || 12
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     RETURN NULL; || 35 || 4
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:890] - stmt start: 35 || return_statement
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:892] - stmt end: 35 || return_statement
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_line_no': 5, 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_line_no': 6, 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_line_no': 7, 'then_line_no': 7, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_line_no': 35, 'statement_indent': 4}]
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_line_no': 8, 'then_line_no': 8, 'if_indent': 8, 'end_if_line_no': 32, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': '', 'type': 'case_when', 'case_line_no': 9, 'case_indent': 12, 'end_case_line_no': 24, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 10, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_line_no': 10, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]}, {'type': 'when_statement', 'when_line_no': 16, 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_line_no': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]}, {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}, {'indent': 16, 'line': '                P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT,', 'line_no': 27}, {'indent': 16, 'line': '                P_REGISTRAR => V_USERID::TEXT,', 'line_no': 28}, {'indent': 16, 'line': "                P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT,", 'line_no': 29}, {'indent': 16, 'line': '                P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT', 'line_no': 30}, {'indent': 12, 'line': '            );', 'line_no': 31}]
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 11, 'statement_indent': 20}]
2025-08-28 06:26:51,430 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_line_no': 17, 'statement_indent': 20}]
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 23, 'statement_indent': 20}]
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 12, 'line': '            CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(', 'line_no': 26}
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC(
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 26
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 31
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT );
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.0077970027923583984 seconds
2025-08-28 06:26:51,431 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,431 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,431 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 2 vars, 0 consts, 0 excs, 0 comments
2025-08-28 06:26:51,431 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,432 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,432 - root - DEBUG - [common.py:105] - Analysis statistics: 2 vars, 0 consts, 0 excs, 0 comments
2025-08-28 06:26:51,432 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger5_analysis.json
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger5_analysis.json
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger5.sql ===
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - âœ“ Created trigger5_analysis.json
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - === Processing file 6/8: trigger6.sql ===
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - Source path: files/oracle\trigger6.sql
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - Output path: files/format_json\trigger6_analysis.json
2025-08-28 06:26:51,433 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger trigger6.sql ===
2025-08-28 06:26:51,434 - root - DEBUG - [common.py:105] - Successfully read 3810 characters from files/oracle\trigger6.sql
2025-08-28 06:26:51,434 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,434 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 3810 characters of SQL
2025-08-28 06:26:51,434 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,434 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,434 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,435 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,435 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 81 total, 32 with semicolons, 8 empty lines skipped
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 81 lines cleaned
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 6 comments extracted, 75 lines cleaned
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 12
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-11
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TRIGGER_NAME
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_EVOLVED_THEME_NO
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_PROPOSAL_ID
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: C_PROPOSAL_STATUS_ACTIVE
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: C_PROPOSAL_STATUS_EVOLVED
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: C_PROPOSAL_STATUS_TERMINATED
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: V_NO_UPDATE_TO_EVOLVED
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: V_NO_UPDATE_TERMINATED_TO_ACTIVE
2025-08-28 06:26:51,435 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: V_NO_UPDATE_EVOLVED_TO_TERMINATED
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: V_EXPLORATORY_THEMENO_NOT_NULL
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'DUP_VAL_ON_INDEX', 'when_line_no': 81, 'when_indent': 4, 'then_line_no': 81, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);', 'line_no': 82}]}, {'type': 'exception_handler', 'exception_name': 'V_NO_UPDATE_EVOLVED_TO_TERMINATED', 'when_line_no': 83, 'when_indent': 4, 'then_line_no': 83, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);', 'line_no': 84}]}, {'type': 'exception_handler', 'exception_name': 'V_NO_UPDATE_TO_EVOLVED', 'when_line_no': 85, 'when_indent': 4, 'then_line_no': 85, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);', 'line_no': 86}]}, {'type': 'exception_handler', 'exception_name': 'V_EXPLORATORY_THEMENO_NOT_NULL', 'when_line_no': 87, 'when_indent': 4, 'then_line_no': 87, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);', 'line_no': 88}]}]
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO;', 'line_no': 13}
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) THEN', 'line_no': 18}
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 18
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 18 i: 20
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_TO_EVOLVED;', 'line_no': 19}]
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 4, 'end_if_line_no': 20, 'then_statements': [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_TO_EVOLVED;', 'line_no': 19}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE V_NO_UPDATE_TO_EVOLVED;', 'line_no': 19}
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) THEN', 'line_no': 24}
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 24
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 24 i: 26
2025-08-28 06:26:51,436 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'line_no': 25}]
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_line_no': 24, 'then_line_no': 24, 'if_indent': 4, 'end_if_line_no': 26, 'then_statements': [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'line_no': 25}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'line_no': 25}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) THEN', 'line_no': 30}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 30
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 30 i: 32
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        V_EVOLVED_THEME_NO := NULL;', 'line_no': 31}]
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 32, 'then_statements': [{'indent': 8, 'line': '        V_EVOLVED_THEME_NO := NULL;', 'line_no': 31}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        V_EVOLVED_THEME_NO := NULL;', 'line_no': 31}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) THEN', 'line_no': 36}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 36
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 36 i: 38
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'line_no': 37}]
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 38, 'then_statements': [{'indent': 8, 'line': '        RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'line_no': 37}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,437 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'line_no': 37}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF (INSERTING) THEN', 'line_no': 40}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 40
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 40 i: 79
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 40
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1303] - then_statements: 0 24
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': '        UPDATE V_NEW_MEDICINE_PROPOSALS', 'line_no': 65}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': '        SET', 'line_no': 66}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            EXPLORATORY_THEME_NO = :NEW.EXPLORATORY_THEME_NO,', 'line_no': 67}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PROPOSAL_NAME = :NEW.PROPOSAL_NAME,', 'line_no': 68}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PROPOSAL_STATUS_CD = :NEW.PROPOSAL_STATUS_CD,', 'line_no': 69}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            EVOLVED_THEME_NO = V_EVOLVED_THEME_NO,', 'line_no': 70}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            MOLECULE_TYPE_ID = :NEW.MOLECULE_TYPE_ID,', 'line_no': 71}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID = :NEW.PHARMACOLOGICAL_TYPE_ID,', 'line_no': 72}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            FIREWALL_ID = :NEW.FIREWALL_ID', 'line_no': 73}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': '        WHERE', 'line_no': 74}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            PROPOSAL_ID = :NEW.PROPOSAL_ID;', 'line_no': 75}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': "        IF NVL(:OLD.PARTNER_ID, 'NULL') <> NVL(:NEW.PARTNER_ID, 'NULL') THEN", 'line_no': 76}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(:NEW.PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 77}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': '        END IF;', 'line_no': 78}
2025-08-28 06:26:51,438 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 4, 'line': '    END IF;', 'line_no': 79}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 40, 'then_line_no': 40, 'if_indent': 4, 'end_if_line_no': 79, 'then_statements': [{'indent': 8, 'line': '        V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'line_no': 41}, {'indent': 8, 'line': '        INSERT INTO V_NEW_MEDICINE_PROPOSALS(', 'line_no': 42}, {'indent': 12, 'line': '            PROPOSAL_ID,', 'line_no': 43}, {'indent': 12, 'line': '            EXPLORATORY_THEME_NO,', 'line_no': 44}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 45}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 46}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 47}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 48}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 49}, {'indent': 12, 'line': '            FIREWALL_ID', 'line_no': 50}, {'indent': 8, 'line': '        ) VALUES (', 'line_no': 51}, {'indent': 12, 'line': '            V_PROPOSAL_ID,', 'line_no': 52}, {'indent': 12, 'line': '            :NEW.EXPLORATORY_THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            :NEW.PROPOSAL_NAME,', 'line_no': 54}, {'indent': 12, 'line': '            :NEW.PROPOSAL_STATUS_CD,', 'line_no': 55}, {'indent': 12, 'line': '            :NEW.EVOLVED_THEME_NO,', 'line_no': 56}, {'indent': 12, 'line': '            :NEW.MOLECULE_TYPE_ID,', 'line_no': 57}, {'indent': 12, 'line': '            :NEW.PHARMACOLOGICAL_TYPE_ID,', 'line_no': 58}, {'indent': 12, 'line': '            :NEW.FIREWALL_ID', 'line_no': 59}, {'indent': 8, 'line': '        );', 'line_no': 60}, {'indent': 8, 'line': '        IF :NEW.PARTNER_ID IS NOT NULL THEN', 'line_no': 61}, {'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}, {'indent': 8, 'line': '        END IF;', 'line_no': 63}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'line_no': 41}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        INSERT INTO V_NEW_MEDICINE_PROPOSALS(', 'line_no': 42}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_ID,', 'line_no': 43}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            EXPLORATORY_THEME_NO,', 'line_no': 44}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 45}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 46}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 47}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 48}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 49}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FIREWALL_ID', 'line_no': 50}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        ) VALUES (', 'line_no': 51}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_PROPOSAL_ID,', 'line_no': 52}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.EXPLORATORY_THEME_NO,', 'line_no': 53}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.PROPOSAL_NAME,', 'line_no': 54}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.PROPOSAL_STATUS_CD,', 'line_no': 55}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.EVOLVED_THEME_NO,', 'line_no': 56}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.MOLECULE_TYPE_ID,', 'line_no': 57}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.PHARMACOLOGICAL_TYPE_ID,', 'line_no': 58}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            :NEW.FIREWALL_ID', 'line_no': 59}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        );', 'line_no': 60}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF :NEW.PARTNER_ID IS NOT NULL THEN', 'line_no': 61}
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 61
2025-08-28 06:26:51,439 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 61 i: 63
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}]
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);', 'line_no': 82}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);', 'line_no': 84}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);', 'line_no': 86}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);', 'line_no': 88}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 4, 'line': '    V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO;', 'line_no': 13}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 4, 'end_if_line_no': 20, 'then_statements': [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_TO_EVOLVED;', 'line_no': 19}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_line_no': 24, 'then_line_no': 24, 'if_indent': 4, 'end_if_line_no': 26, 'then_statements': [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'line_no': 25}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 32, 'then_statements': [{'indent': 8, 'line': '        V_EVOLVED_THEME_NO := NULL;', 'line_no': 31}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 38, 'then_statements': [{'indent': 8, 'line': '        RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'line_no': 37}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 40, 'then_line_no': 40, 'if_indent': 4, 'end_if_line_no': 79, 'then_statements': [{'indent': 8, 'line': '        V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'line_no': 41}, {'indent': 8, 'line': '        INSERT INTO V_NEW_MEDICINE_PROPOSALS(', 'line_no': 42}, {'indent': 12, 'line': '            PROPOSAL_ID,', 'line_no': 43}, {'indent': 12, 'line': '            EXPLORATORY_THEME_NO,', 'line_no': 44}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 45}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 46}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 47}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 48}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 49}, {'indent': 12, 'line': '            FIREWALL_ID', 'line_no': 50}, {'indent': 8, 'line': '        ) VALUES (', 'line_no': 51}, {'indent': 12, 'line': '            V_PROPOSAL_ID,', 'line_no': 52}, {'indent': 12, 'line': '            :NEW.EXPLORATORY_THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            :NEW.PROPOSAL_NAME,', 'line_no': 54}, {'indent': 12, 'line': '            :NEW.PROPOSAL_STATUS_CD,', 'line_no': 55}, {'indent': 12, 'line': '            :NEW.EVOLVED_THEME_NO,', 'line_no': 56}, {'indent': 12, 'line': '            :NEW.MOLECULE_TYPE_ID,', 'line_no': 57}, {'indent': 12, 'line': '            :NEW.PHARMACOLOGICAL_TYPE_ID,', 'line_no': 58}, {'indent': 12, 'line': '            :NEW.FIREWALL_ID', 'line_no': 59}, {'indent': 8, 'line': '        );', 'line_no': 60}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     V_EVOLVED_THEME_NO := :NEW.EVOLVED_THEME_NO; || 13 || 4
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 13 || 
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 13 || 
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_line_no': 13, 'assignment_indent': 4}
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_TO_EVOLVED;', 'line_no': 19}]
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE V_NO_UPDATE_TO_EVOLVED; || 19 || 8
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 19 || raise_statement
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 19 || raise_statement
2025-08-28 06:26:51,440 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'line_no': 25}]
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED; || 25 || 8
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 25 || raise_statement
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 25 || raise_statement
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        V_EVOLVED_THEME_NO := NULL;', 'line_no': 31}]
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_EVOLVED_THEME_NO := NULL; || 31 || 8
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 31 || 
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 31 || 
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 31, 'assignment_indent': 8}
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'line_no': 37}]
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE V_EXPLORATORY_THEMENO_NOT_NULL; || 37 || 8
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 37 || raise_statement
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 37 || raise_statement
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'line_no': 41}, {'indent': 8, 'line': '        INSERT INTO V_NEW_MEDICINE_PROPOSALS(', 'line_no': 42}, {'indent': 12, 'line': '            PROPOSAL_ID,', 'line_no': 43}, {'indent': 12, 'line': '            EXPLORATORY_THEME_NO,', 'line_no': 44}, {'indent': 12, 'line': '            PROPOSAL_NAME,', 'line_no': 45}, {'indent': 12, 'line': '            PROPOSAL_STATUS_CD,', 'line_no': 46}, {'indent': 12, 'line': '            EVOLVED_THEME_NO,', 'line_no': 47}, {'indent': 12, 'line': '            MOLECULE_TYPE_ID,', 'line_no': 48}, {'indent': 12, 'line': '            PHARMACOLOGICAL_TYPE_ID,', 'line_no': 49}, {'indent': 12, 'line': '            FIREWALL_ID', 'line_no': 50}, {'indent': 8, 'line': '        ) VALUES (', 'line_no': 51}, {'indent': 12, 'line': '            V_PROPOSAL_ID,', 'line_no': 52}, {'indent': 12, 'line': '            :NEW.EXPLORATORY_THEME_NO,', 'line_no': 53}, {'indent': 12, 'line': '            :NEW.PROPOSAL_NAME,', 'line_no': 54}, {'indent': 12, 'line': '            :NEW.PROPOSAL_STATUS_CD,', 'line_no': 55}, {'indent': 12, 'line': '            :NEW.EVOLVED_THEME_NO,', 'line_no': 56}, {'indent': 12, 'line': '            :NEW.MOLECULE_TYPE_ID,', 'line_no': 57}, {'indent': 12, 'line': '            :NEW.PHARMACOLOGICAL_TYPE_ID,', 'line_no': 58}, {'indent': 12, 'line': '            :NEW.FIREWALL_ID', 'line_no': 59}, {'indent': 8, 'line': '        );', 'line_no': 60}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,441 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_PROPOSAL_ID := PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL; || 41 || 8
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 41 || 
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 41 || 
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_line_no': 41, 'assignment_indent': 8}
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         INSERT INTO V_NEW_MEDICINE_PROPOSALS( || 42 || 8
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:815] - stmt start: 42 || insert_statement
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:824] - stmt end: 60 || insert_statement
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 20
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}]
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID); || 62 || 12
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);', 'line_no': 82}]
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME); || 82 || 8
2025-08-28 06:26:51,442 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);', 'line_no': 84}]
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME); || 84 || 8
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);', 'line_no': 86}]
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME); || 86 || 8
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);', 'line_no': 88}]
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME); || 88 || 8
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_line_no': 13, 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_line_no': 18, 'then_line_no': 18, 'if_indent': 4, 'end_if_line_no': 20, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_line_no': 19, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_line_no': 24, 'then_line_no': 24, 'if_indent': 4, 'end_if_line_no': 26, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_line_no': 25, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 32, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 31, 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 38, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_line_no': 37, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_line_no': 40, 'then_line_no': 40, 'if_indent': 4, 'end_if_line_no': 79, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_line_no': 41, 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_line_no': 42, 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,443 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,444 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,444 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_line_no': 19, 'statement_indent': 8}]
2025-08-28 06:26:51,444 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,444 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,444 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_line_no': 25, 'statement_indent': 8}]
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_line_no': 31, 'assignment_indent': 8}]
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_line_no': 37, 'statement_indent': 8}]
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_line_no': 41, 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_line_no': 42, 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_line_no': 61, 'then_line_no': 61, 'if_indent': 8, 'end_if_line_no': 63, 'then_statements': [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,445 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}]
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 12, 'line': '            MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);', 'line_no': 62}
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 62
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 62
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA(V_PROPOSAL_ID, :NEW.PARTNER_ID);
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,446 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);', 'line_no': 82}]
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);', 'line_no': 82}
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 82
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 82
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20600, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);', 'line_no': 84}]
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);', 'line_no': 84}
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 84
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 84
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20800, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);', 'line_no': 86}]
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);', 'line_no': 86}
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 86
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 86
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20900, V_TRIGGER_NAME);
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);', 'line_no': 88}]
2025-08-28 06:26:51,447 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);', 'line_no': 88}
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 88
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 88
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR(-20940, V_TRIGGER_NAME);
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.013504505157470703 seconds
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,448 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 6 vars, 0 consts, 4 excs, 6 comments
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - Analysis statistics: 6 vars, 0 consts, 4 excs, 6 comments
2025-08-28 06:26:51,448 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\trigger6_analysis.json
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\trigger6_analysis.json
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger trigger6.sql ===
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - âœ“ Created trigger6_analysis.json
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - === Processing file 7/8: yyy.sql ===
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Source path: files/oracle\yyy.sql
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Output path: files/format_json\yyy_analysis.json
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger yyy.sql ===
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Successfully read 15624 characters from files/oracle\yyy.sql
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,450 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 15624 characters of SQL
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,451 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,451 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 334 total, 98 with semicolons, 35 empty lines skipped
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 334 lines cleaned
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 19 comments extracted, 317 lines cleaned
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 23
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-22
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:424] - Processed constant: V_TRIGGER_NAME
2025-08-28 06:26:51,451 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: CNTR
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_DEL
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_UPD
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_USERID
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_REPORTING_ENTITY_CD
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_LEGAL_COMPANY_CD
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_OLD_LEGAL_COMPANY_CD
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_REP_CBC_FLAG
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_VALID_FROM_DATE
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: RU_NOT_IN_CBC_SCOPE
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_NO_ADR
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_CPY_STILL_IN_SCOPE
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: CPY_IN_USE
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: INVALID_LEGAL_COMP
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_CPY_STILL_IN_MFR
2025-08-28 06:26:51,452 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC
2025-08-28 06:26:51,453 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_ADDR_VALID_FROM_DATE
2025-08-28 06:26:51,453 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNTRY_CD
2025-08-28 06:26:51,453 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COMPANY_CODES_LIST
2025-08-28 06:26:51,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,453 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'ERR_DEL', 'when_line_no': 345, 'when_indent': 4, 'then_line_no': 345, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);', 'line_no': 346}]}, {'type': 'exception_handler', 'exception_name': 'ERR_UPD', 'when_line_no': 347, 'when_indent': 4, 'then_line_no': 347, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);', 'line_no': 348}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS', 'when_line_no': 349, 'when_indent': 4, 'then_line_no': 349, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);', 'line_no': 350}]}, {'type': 'exception_handler', 'exception_name': 'ERR_VALID_FROM_DATE', 'when_line_no': 351, 'when_indent': 4, 'then_line_no': 351, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');", 'line_no': 352}]}, {'type': 'exception_handler', 'exception_name': 'RU_NOT_IN_CBC_SCOPE', 'when_line_no': 353, 'when_indent': 4, 'then_line_no': 353, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');", 'line_no': 354}]}, {'type': 'exception_handler', 'exception_name': 'ERR_CPY_STILL_IN_SCOPE', 'when_line_no': 355, 'when_indent': 4, 'then_line_no': 355, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');", 'line_no': 356}]}, {'type': 'exception_handler', 'exception_name': 'ERR_NO_ADR', 'when_line_no': 357, 'when_indent': 4, 'then_line_no': 357, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');", 'line_no': 358}]}, {'type': 'exception_handler', 'exception_name': 'CPY_IN_USE', 'when_line_no': 359, 'when_indent': 4, 'then_line_no': 359, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: '", 'line_no': 360}, {'indent': 42, 'line': '                                          || V_COMPANY_CODES_LIST);', 'line_no': 361}]}, {'type': 'exception_handler', 'exception_name': 'INVALID_LEGAL_COMP', 'when_line_no': 362, 'when_indent': 4, 'then_line_no': 362, 'exception_statements': [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD', 'line_no': 363}, {'indent': 42, 'line': "                                          || ' is not a valid Legal Company Code');", 'line_no': 364}]}, {'type': 'exception_handler', 'exception_name': 'ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC', 'when_line_no': 365, 'when_indent': 4, 'then_line_no': 365, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');", 'line_no': 366}]}, {'type': 'exception_handler', 'exception_name': 'ERR_CPY_STILL_IN_MFR', 'when_line_no': 367, 'when_indent': 4, 'then_line_no': 367, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');", 'line_no': 368}]}]
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 4, 'line': '    BEGIN', 'line_no': 24} 0
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1631] - Exception line: {'indent': 4, 'line': '    EXCEPTION', 'line_no': 26} 2
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1640] - End line: {'indent': 4, 'line': '    END;', 'line_no': 29} 5
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 27, 'when_indent': 8, 'then_line_no': 27, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 28}]}]
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 128 i: 158
2025-08-28 06:26:51,454 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 12, 'line': "            WHEN NVL (:OLD.REPORTING_ENTITY_CD, '-') !=", 'line_no': 129}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 12, 'line': "            WHEN NVL (:OLD.REPORTING_ENTITY_CD, '-') !=", 'line_no': 129}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 12, 'line': "            WHEN NVL (:OLD.REPORTING_ENTITY_CD, '-') !=", 'line_no': 129}, {'indent': 12, 'line': "            NVL (:NEW.REPORTING_ENTITY_CD, '-')", 'line_no': 130}, {'indent': 12, 'line': "            OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'),", 'line_no': 131}, {'indent': 12, 'line': '            SYSDATE + 100) !=', 'line_no': 132}, {'indent': 12, 'line': "            NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'),", 'line_no': 133}, {'indent': 12, 'line': '            SYSDATE + 100)', 'line_no': 134}, {'indent': 12, 'line': "            OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'),", 'line_no': 135}, {'indent': 12, 'line': '            SYSDATE + 100) !=', 'line_no': 136}, {'indent': 12, 'line': "            NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'),", 'line_no': 137}, {'indent': 12, 'line': '            SYSDATE + 100)', 'line_no': 138}, {'indent': 12, 'line': '            THEN', 'line_no': 139}, {'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'indent': 16, 'line': '                CASE', 'line_no': 141}, {'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}, {'indent': 20, 'line': '                    OR :NEW.VALID_FROM_DATE IS NULL)', 'line_no': 143}, {'indent': 20, 'line': '                    THEN', 'line_no': 144}, {'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}, {'indent': 20, 'line': '                    ELSE', 'line_no': 146}, {'indent': 24, 'line': '                        NULL;', 'line_no': 147}, {'indent': 16, 'line': '                END CASE;', 'line_no': 148}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - WHEN NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) THEN
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 129 then_i: 139
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 12, 'line': "            WHEN NVL (:OLD.REPORTING_ENTITY_CD, '-') !=", 'line_no': 129}, {'indent': 12, 'line': "            NVL (:NEW.REPORTING_ENTITY_CD, '-')", 'line_no': 130}, {'indent': 12, 'line': "            OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'),", 'line_no': 131}, {'indent': 12, 'line': '            SYSDATE + 100) !=', 'line_no': 132}, {'indent': 12, 'line': "            NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'),", 'line_no': 133}, {'indent': 12, 'line': '            SYSDATE + 100)', 'line_no': 134}, {'indent': 12, 'line': "            OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'),", 'line_no': 135}, {'indent': 12, 'line': '            SYSDATE + 100) !=', 'line_no': 136}, {'indent': 12, 'line': "            NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'),", 'line_no': 137}, {'indent': 12, 'line': '            SYSDATE + 100)', 'line_no': 138}, {'indent': 12, 'line': '            THEN', 'line_no': 139}, {'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'indent': 16, 'line': '                CASE', 'line_no': 141}, {'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}, {'indent': 20, 'line': '                    OR :NEW.VALID_FROM_DATE IS NULL)', 'line_no': 143}, {'indent': 20, 'line': '                    THEN', 'line_no': 144}, {'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}, {'indent': 20, 'line': '                    ELSE', 'line_no': 146}, {'indent': 24, 'line': '                        NULL;', 'line_no': 147}, {'indent': 16, 'line': '                END CASE;', 'line_no': 148}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 16, 'line': '                NULL;', 'line_no': 157}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 141 i: 148
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}, {'indent': 20, 'line': '                    OR :NEW.VALID_FROM_DATE IS NULL)', 'line_no': 143}, {'indent': 20, 'line': '                    THEN', 'line_no': 144}, {'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - WHEN ( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL) THEN
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 142 then_i: 144
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 20, 'line': '                    WHEN ( :NEW.VALID_FROM_DATE IS NULL', 'line_no': 142}, {'indent': 20, 'line': '                    OR :NEW.VALID_FROM_DATE IS NULL)', 'line_no': 143}, {'indent': 20, 'line': '                    THEN', 'line_no': 144}, {'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 24, 'line': '                        NULL;', 'line_no': 147}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1412] - case_i: 328 i: 340
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1483] - line_info : {'indent': 12, 'line': "            WHEN (NVL (:OLD.OFFICIAL_NAME, '-') !=", 'line_no': 329}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1506] - {'indent': 12, 'line': "            WHEN (NVL (:OLD.OFFICIAL_NAME, '-') !=", 'line_no': 329}
2025-08-28 06:26:51,455 - root - DEBUG - [OracleTriggerAnalyzer.py:1523] - [{'indent': 12, 'line': "            WHEN (NVL (:OLD.OFFICIAL_NAME, '-') !=", 'line_no': 329}, {'indent': 12, 'line': "            NVL (:NEW.OFFICIAL_NAME, '-'))", 'line_no': 330}, {'indent': 12, 'line': '            AND :OLD.OFFICIAL_NAME IS NOT NULL', 'line_no': 331}, {'indent': 12, 'line': '            THEN', 'line_no': 332}, {'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - WHEN (NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL THEN
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1551] - case_when_then_statements 0: 329 then_i: 332
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1552] - case_when_then_statements: [{'indent': 12, 'line': "            WHEN (NVL (:OLD.OFFICIAL_NAME, '-') !=", 'line_no': 329}, {'indent': 12, 'line': "            NVL (:NEW.OFFICIAL_NAME, '-'))", 'line_no': 330}, {'indent': 12, 'line': '            AND :OLD.OFFICIAL_NAME IS NOT NULL', 'line_no': 331}, {'indent': 12, 'line': '            THEN', 'line_no': 332}, {'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1508] - {'indent': 16, 'line': '                NULL;', 'line_no': 339}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'type': 'begin_end', 'begin_line_no': 24, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 25}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 27, 'when_indent': 8, 'then_line_no': 27, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 28}]}], 'exception_line_no': 26, 'end_line_no': 29}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 25}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 28}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD THEN', 'line_no': 31}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 31
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 31 i: 33
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        RAISE ERR_UPD;', 'line_no': 32}]
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'indent': 8, 'line': '        RAISE ERR_UPD;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE ERR_UPD;', 'line_no': 32}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF INSERTING THEN', 'line_no': 35}
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 35
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 35 i: 48
2025-08-28 06:26:51,456 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        CNTR := 0;', 'line_no': 36}, {'indent': 8, 'line': '        SELECT', 'line_no': 39}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 40}, {'indent': 8, 'line': '        FROM', 'line_no': 41}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 42}, {'indent': 8, 'line': '        WHERE', 'line_no': 43}, {'indent': 12, 'line': '            COMPANY_CD = :NEW.COMPANY_CD;', 'line_no': 44}, {'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 45}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}, {'indent': 8, 'line': '        END IF;', 'line_no': 47}]
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 35, 'then_line_no': 35, 'if_indent': 4, 'end_if_line_no': 48, 'then_statements': [{'indent': 8, 'line': '        CNTR := 0;', 'line_no': 36}, {'indent': 8, 'line': '        SELECT', 'line_no': 39}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 40}, {'indent': 8, 'line': '        FROM', 'line_no': 41}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 42}, {'indent': 8, 'line': '        WHERE', 'line_no': 43}, {'indent': 12, 'line': '            COMPANY_CD = :NEW.COMPANY_CD;', 'line_no': 44}, {'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 45}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}, {'indent': 8, 'line': '        END IF;', 'line_no': 47}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        CNTR := 0;', 'line_no': 36}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SELECT', 'line_no': 39}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 40}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        FROM', 'line_no': 41}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 42}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 43}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COMPANY_CD = :NEW.COMPANY_CD;', 'line_no': 44}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 45}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 45
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 45 i: 47
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}]
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF INSERTING OR UPDATING THEN', 'line_no': 50}
2025-08-28 06:26:51,457 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 50
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 50 i: 343
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 205
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1303] - then_statements: 0 202
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 8, 'line': '        RAISE ERR_DEL;', 'line_no': 342}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1309] - line_info: {'indent': 4, 'line': '    END IF;', 'line_no': 343}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 50, 'then_line_no': 50, 'if_indent': 4, 'end_if_line_no': 343, 'then_statements': [{'indent': 8, 'line': "        IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN", 'line_no': 53}, {'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}, {'indent': 8, 'line': '        ELSE', 'line_no': 55}, {'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}, {'indent': 8, 'line': '        END IF;', 'line_no': 57}, {'indent': 8, 'line': '        CNTR := 0;', 'line_no': 61}, {'indent': 8, 'line': '        SELECT', 'line_no': 62}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 63}, {'indent': 8, 'line': '        FROM', 'line_no': 64}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 65}, {'indent': 8, 'line': '        WHERE', 'line_no': 66}, {'indent': 12, 'line': "            COMPANY_TYPE_CD IN ( 'L')", 'line_no': 67}, {'indent': 12, 'line': "            AND VALID_IND = 'Y'", 'line_no': 68}, {'indent': 12, 'line': '            AND COMPANY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 69}, {'indent': 8, 'line': "        IF CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L')", 'line_no': 72}, {'indent': 8, 'line': "        OR (:NEW.COMPANY_TYPE_CD = 'D'", 'line_no': 73}, {'indent': 8, 'line': "        AND :NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 74}, {'indent': 8, 'line': '        AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN', 'line_no': 75}, {'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}, {'indent': 8, 'line': '        END IF;', 'line_no': 77}, {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}, {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}, {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}, {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}, {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}, {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}, {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}, {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}, {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}, {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}, {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}, {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}, {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}, {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}, {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}, {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}, {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}, {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}, {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}, {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}, {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}, {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}, {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}, {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}, {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}, {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}, {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}, {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}, {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}, {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}, {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}, {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}, {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}, {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}, {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}, {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}, {'indent': 0, 'line': ',', 'line_no': 115}, {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}, {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}, {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}, {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}, {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}, {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}, {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}, {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}, {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}, {'indent': 8, 'line': '        );', 'line_no': 125}, {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 157}]}, {'indent': 8, 'line': "        IF NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' THEN", 'line_no': 160}, {'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'indent': 12, 'line': '            IF CNTR > 0 THEN', 'line_no': 172}, {'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}, {'indent': 12, 'line': '            END IF;', 'line_no': 182}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}, {'indent': 8, 'line': '        END IF;', 'line_no': 195}, {'indent': 8, 'line': "        IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN", 'line_no': 199}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}, {'indent': 8, 'line': '        END IF;', 'line_no': 210}, {'indent': 8, 'line': "        IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN", 'line_no': 214}, {'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}, {'indent': 8, 'line': '        END IF;', 'line_no': 216}, {'indent': 8, 'line': "        IF :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN", 'line_no': 220}, {'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}, {'indent': 8, 'line': '        END IF;', 'line_no': 222}, {'indent': 8, 'line': "        IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN", 'line_no': 226}, {'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}, {'indent': 8, 'line': '        END IF;', 'line_no': 228}, {'indent': 8, 'line': "        IF NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN", 'line_no': 232}, {'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}, {'indent': 8, 'line': '        ELSE', 'line_no': 234}, {'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}, {'indent': 8, 'line': '        END IF;', 'line_no': 236}, {'indent': 8, 'line': "        IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN", 'line_no': 240}, {'indent': 12, 'line': "            IF (:NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 241}, {'indent': 12, 'line': "            AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y'", 'line_no': 242}, {'indent': 12, 'line': '            AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN', 'line_no': 243}, {'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}, {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}, {'indent': 16, 'line': '                END IF;', 'line_no': 254}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}, {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}, {'indent': 16, 'line': '                END IF;', 'line_no': 268}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}, {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}, {'indent': 16, 'line': '                END IF;', 'line_no': 283}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}, {'indent': 12, 'line': '            END IF;', 'line_no': 304}, {'indent': 12, 'line': "            IF :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN", 'line_no': 306}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}, {'indent': 12, 'line': '            END IF;', 'line_no': 323}, {'indent': 8, 'line': '        END IF;', 'line_no': 324}, {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 339}]}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL THEN", 'line_no': 53}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 53
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 53 i: 57
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 56, 57
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}]}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}
2025-08-28 06:26:51,458 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        CNTR := 0;', 'line_no': 61}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SELECT', 'line_no': 62}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 63}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        FROM', 'line_no': 64}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 65}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 66}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            COMPANY_TYPE_CD IN ( 'L')", 'line_no': 67}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            AND VALID_IND = 'Y'", 'line_no': 68}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            AND COMPANY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 69}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L')", 'line_no': 72}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 72
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 72 i: 77
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 6
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 8, 'line': "        OR (:NEW.COMPANY_TYPE_CD = 'D'", 'line_no': 73}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 8, 'line': "        AND :NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 74}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 8, 'line': '        AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) THEN', 'line_no': 75}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}]
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 75, 'if_indent': 8, 'end_if_line_no': 77, 'then_statements': [{'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}
2025-08-28 06:26:51,459 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}
2025-08-28 06:26:51,460 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 0, 'line': ',', 'line_no': 115}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        );', 'line_no': 125}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 157}]}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        NULL;', 'line_no': 147}
2025-08-28 06:26:51,461 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 155}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                NULL;', 'line_no': 157}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' THEN", 'line_no': 160}
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 160
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 160 i: 195
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 31
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'indent': 12, 'line': '            IF CNTR > 0 THEN', 'line_no': 172}, {'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}, {'indent': 12, 'line': '            END IF;', 'line_no': 182}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}]
2025-08-28 06:26:51,462 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 160, 'then_line_no': 160, 'if_indent': 8, 'end_if_line_no': 195, 'then_statements': [{'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'indent': 12, 'line': '            IF CNTR > 0 THEN', 'line_no': 172}, {'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}, {'indent': 12, 'line': '            END IF;', 'line_no': 182}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SELECT', 'line_no': 164}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            FROM', 'line_no': 166}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 168}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF CNTR > 0 THEN', 'line_no': 172}
2025-08-28 06:26:51,463 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 172
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 172 i: 182
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 11
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}]
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SELECT', 'line_no': 173}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                FROM', 'line_no': 175}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 177}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}
2025-08-28 06:26:51,464 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 187}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                ) - 1', 'line_no': 190}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 191}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' THEN", 'line_no': 199}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 199
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 199 i: 210
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 12
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}]
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 8, 'end_if_line_no': 210, 'then_statements': [{'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}
2025-08-28 06:26:51,465 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            SET', 'line_no': 201}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                ) - 1', 'line_no': 204}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            WHERE', 'line_no': 205}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' THEN", 'line_no': 214}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 214
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 214 i: 216
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}]
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 214, 'then_line_no': 214, 'if_indent': 8, 'end_if_line_no': 216, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL THEN", 'line_no': 220}
2025-08-28 06:26:51,466 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 220
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 220 i: 222
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}]
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 220, 'then_line_no': 220, 'if_indent': 8, 'end_if_line_no': 222, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' THEN", 'line_no': 226}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 226
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 226 i: 228
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}]
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 226, 'then_line_no': 226, 'if_indent': 8, 'end_if_line_no': 228, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' THEN", 'line_no': 232}
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 232
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 232 i: 236
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,467 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 235, 236
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 232, 'then_line_no': 232, 'if_indent': 8, 'end_if_line_no': 236, 'then_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}]}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' THEN", 'line_no': 240}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 240
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 240 i: 324
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 75
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': "            IF (:NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 241}, {'indent': 12, 'line': "            AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y'", 'line_no': 242}, {'indent': 12, 'line': '            AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN', 'line_no': 243}, {'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}, {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}, {'indent': 16, 'line': '                END IF;', 'line_no': 254}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}, {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}, {'indent': 16, 'line': '                END IF;', 'line_no': 268}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}, {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}, {'indent': 16, 'line': '                END IF;', 'line_no': 283}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}, {'indent': 12, 'line': '            END IF;', 'line_no': 304}, {'indent': 12, 'line': "            IF :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN", 'line_no': 306}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}, {'indent': 12, 'line': '            END IF;', 'line_no': 323}]
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 240, 'then_line_no': 240, 'if_indent': 8, 'end_if_line_no': 324, 'then_statements': [{'indent': 12, 'line': "            IF (:NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 241}, {'indent': 12, 'line': "            AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y'", 'line_no': 242}, {'indent': 12, 'line': '            AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN', 'line_no': 243}, {'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}, {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}, {'indent': 16, 'line': '                END IF;', 'line_no': 254}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}, {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}, {'indent': 16, 'line': '                END IF;', 'line_no': 268}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}, {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}, {'indent': 16, 'line': '                END IF;', 'line_no': 283}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}, {'indent': 12, 'line': '            END IF;', 'line_no': 304}, {'indent': 12, 'line': "            IF :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN", 'line_no': 306}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}, {'indent': 12, 'line': '            END IF;', 'line_no': 323}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            IF (:NEW.CBC_GBE_SCOPE = 'Y'", 'line_no': 241}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 241
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 241 i: 304
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 55
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': "            AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y'", 'line_no': 242}
2025-08-28 06:26:51,468 - root - DEBUG - [OracleTriggerAnalyzer.py:1287] - line_info : {'indent': 12, 'line': '            AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) THEN', 'line_no': 243}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}, {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}, {'indent': 16, 'line': '                END IF;', 'line_no': 254}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}, {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}, {'indent': 16, 'line': '                END IF;', 'line_no': 268}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}, {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}, {'indent': 16, 'line': '                END IF;', 'line_no': 283}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}]
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}, {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}, {'indent': 16, 'line': '                END IF;', 'line_no': 254}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}, {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}, {'indent': 16, 'line': '                END IF;', 'line_no': 268}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}, {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}, {'indent': 16, 'line': '                END IF;', 'line_no': 283}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SELECT', 'line_no': 244}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                FROM', 'line_no': 246}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 248}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': "                IF NVL (V_REP_CBC_FLAG, 'N') = 'N' THEN", 'line_no': 252}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 252
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 252 i: 254
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}]
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SELECT', 'line_no': 259}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                FROM', 'line_no': 261}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 263}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}
2025-08-28 06:26:51,469 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF CNTR = 0 THEN', 'line_no': 266}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 266
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 266 i: 268
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}]
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                SELECT', 'line_no': 270}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                FROM', 'line_no': 274}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                WHERE', 'line_no': 276}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) THEN', 'line_no': 281}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 281
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 281 i: 283
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}]
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}
2025-08-28 06:26:51,470 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 293}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 303}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': "            IF :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' THEN", 'line_no': 306}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 306
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 306 i: 323
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 18
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}]
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}
2025-08-28 06:26:51,471 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 314}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 322}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 339}]}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}
2025-08-28 06:26:51,472 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                NULL;', 'line_no': 339}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);', 'line_no': 346}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);', 'line_no': 348}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);', 'line_no': 350}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');", 'line_no': 352}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');", 'line_no': 354}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');", 'line_no': 356}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');", 'line_no': 358}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: '", 'line_no': 360}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 42, 'line': '                                          || V_COMPANY_CODES_LIST);', 'line_no': 361}
2025-08-28 06:26:51,473 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD', 'line_no': 363}
2025-08-28 06:26:51,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 42, 'line': "                                          || ' is not a valid Legal Company Code');", 'line_no': 364}
2025-08-28 06:26:51,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');", 'line_no': 366}
2025-08-28 06:26:51,474 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');", 'line_no': 368}
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'type': 'begin_end', 'begin_line_no': 24, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 25}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 27, 'when_indent': 8, 'then_line_no': 27, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 28}]}], 'exception_line_no': 26, 'end_line_no': 29}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'indent': 8, 'line': '        RAISE ERR_UPD;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 35, 'then_line_no': 35, 'if_indent': 4, 'end_if_line_no': 48, 'then_statements': [{'indent': 8, 'line': '        CNTR := 0;', 'line_no': 36}, {'indent': 8, 'line': '        SELECT', 'line_no': 39}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 40}, {'indent': 8, 'line': '        FROM', 'line_no': 41}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 42}, {'indent': 8, 'line': '        WHERE', 'line_no': 43}, {'indent': 12, 'line': '            COMPANY_CD = :NEW.COMPANY_CD;', 'line_no': 44}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 50, 'then_line_no': 50, 'if_indent': 4, 'end_if_line_no': 343, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}]}, {'indent': 8, 'line': '        CNTR := 0;', 'line_no': 61}, {'indent': 8, 'line': '        SELECT', 'line_no': 62}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 63}, {'indent': 8, 'line': '        FROM', 'line_no': 64}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 65}, {'indent': 8, 'line': '        WHERE', 'line_no': 66}, {'indent': 12, 'line': "            COMPANY_TYPE_CD IN ( 'L')", 'line_no': 67}, {'indent': 12, 'line': "            AND VALID_IND = 'Y'", 'line_no': 68}, {'indent': 12, 'line': '            AND COMPANY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 69}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 75, 'if_indent': 8, 'end_if_line_no': 77, 'then_statements': [{'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}, {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}, {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}, {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}, {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}, {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}, {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}, {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}, {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}, {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}, {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}, {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}, {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}, {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}, {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}, {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}, {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}, {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}, {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}, {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}, {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}, {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}, {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}, {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}, {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}, {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}, {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}, {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}, {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}, {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}, {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}, {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}, {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}, {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}, {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}, {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}, {'indent': 0, 'line': ',', 'line_no': 115}, {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}, {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}, {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}, {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}, {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}, {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}, {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}, {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}, {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}, {'indent': 8, 'line': '        );', 'line_no': 125}, {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 157}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 160, 'then_line_no': 160, 'if_indent': 8, 'end_if_line_no': 195, 'then_statements': [{'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 8, 'end_if_line_no': 210, 'then_statements': [{'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 214, 'then_line_no': 214, 'if_indent': 8, 'end_if_line_no': 216, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 220, 'then_line_no': 220, 'if_indent': 8, 'end_if_line_no': 222, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 226, 'then_line_no': 226, 'if_indent': 8, 'end_if_line_no': 228, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 232, 'then_line_no': 232, 'if_indent': 8, 'end_if_line_no': 236, 'then_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 240, 'then_line_no': 240, 'if_indent': 8, 'end_if_line_no': 324, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 339}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 25}]
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_USERID := TXO_UTIL.GET_USERID; || 25 || 8
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 25 || 
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 25 || 
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 25, 'assignment_indent': 8}
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 28}]
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_USERID := USER; || 28 || 12
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 28 || 
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 28 || 
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 28, 'assignment_indent': 12}
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE ERR_UPD;', 'line_no': 32}]
2025-08-28 06:26:51,475 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE ERR_UPD; || 32 || 8
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 32 || raise_statement
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 32 || raise_statement
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        CNTR := 0;', 'line_no': 36}, {'indent': 8, 'line': '        SELECT', 'line_no': 39}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 40}, {'indent': 8, 'line': '        FROM', 'line_no': 41}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 42}, {'indent': 8, 'line': '        WHERE', 'line_no': 43}, {'indent': 12, 'line': '            COMPANY_CD = :NEW.COMPANY_CD;', 'line_no': 44}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         CNTR := 0; || 36 || 8
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 36 || 
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 36 || 
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 36, 'assignment_indent': 8}
2025-08-28 06:26:51,476 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         SELECT || 39 || 8
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 39 || select_statement
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 44 || select_statement
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 46}]
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_INS; || 46 || 12
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 46 || raise_statement
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 46 || raise_statement
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,477 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}]}, {'indent': 8, 'line': '        CNTR := 0;', 'line_no': 61}, {'indent': 8, 'line': '        SELECT', 'line_no': 62}, {'indent': 12, 'line': '            COUNT (*) INTO CNTR', 'line_no': 63}, {'indent': 8, 'line': '        FROM', 'line_no': 64}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 65}, {'indent': 8, 'line': '        WHERE', 'line_no': 66}, {'indent': 12, 'line': "            COMPANY_TYPE_CD IN ( 'L')", 'line_no': 67}, {'indent': 12, 'line': "            AND VALID_IND = 'Y'", 'line_no': 68}, {'indent': 12, 'line': '            AND COMPANY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 69}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 75, 'if_indent': 8, 'end_if_line_no': 77, 'then_statements': [{'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}, {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}, {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}, {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}, {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}, {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}, {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}, {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}, {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}, {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}, {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}, {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}, {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}, {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}, {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}, {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}, {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}, {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}, {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}, {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}, {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}, {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}, {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}, {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}, {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}, {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}, {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}, {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}, {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}, {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}, {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}, {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}, {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}, {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}, {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}, {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}, {'indent': 0, 'line': ',', 'line_no': 115}, {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}, {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}, {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}, {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}, {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}, {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}, {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}, {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}, {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}, {'indent': 8, 'line': '        );', 'line_no': 125}, {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 157}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 160, 'then_line_no': 160, 'if_indent': 8, 'end_if_line_no': 195, 'then_statements': [{'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 8, 'end_if_line_no': 210, 'then_statements': [{'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 214, 'then_line_no': 214, 'if_indent': 8, 'end_if_line_no': 216, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 220, 'then_line_no': 220, 'if_indent': 8, 'end_if_line_no': 222, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 226, 'then_line_no': 226, 'if_indent': 8, 'end_if_line_no': 228, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 232, 'then_line_no': 232, 'if_indent': 8, 'end_if_line_no': 236, 'then_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}], 'if_elses': [], 'else_statements': [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 240, 'then_line_no': 240, 'if_indent': 8, 'end_if_line_no': 324, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'indent': 16, 'line': '                NULL;', 'line_no': 339}]}]
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD;', 'line_no': 54}]
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_LEGAL_COMPANY_CD := :NEW.COMPANY_CD; || 54 || 12
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 54 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 54 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD;', 'line_no': 56}]
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_LEGAL_COMPANY_CD := :NEW.LEGAL_COMPANY_CD; || 56 || 12
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 56 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 56 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_line_no': 56, 'assignment_indent': 12}
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         CNTR := 0; || 61 || 8
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 61 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 61 || 
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 61, 'assignment_indent': 8}
2025-08-28 06:26:51,478 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         SELECT || 62 || 8
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 62 || select_statement
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 69 || select_statement
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE INVALID_LEGAL_COMP;', 'line_no': 76}]
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE INVALID_LEGAL_COMP; || 76 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 76 || raise_statement
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 76 || raise_statement
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         MDM_UTIL_COMPANIES.MODIFYCOMPANY ( || 79 || 8
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_COMPANY_CD => :NEW.COMPANY_CD, || 80 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, || 81 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, || 82 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, || 83 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, || 84 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SHORT_NAME => :NEW.SHORT_NAME, || 85 || 12
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 18
2025-08-28 06:26:51,479 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, || 86 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 19
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, || 87 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 20
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, || 88 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 21
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_URL => :NEW.URL, || 89 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 22
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, || 90 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 23
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, || 91 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 24
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, || 92 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 25
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, || 93 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 26
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, || 94 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 27
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_FATCA_CD => :NEW.FATCA_CD, || 95 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 28
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, || 96 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 29
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, || 97 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 30
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAPINST_NO => :NEW.SAPINST_NO, || 98 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 31
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, || 99 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 32
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, || 100 || 12
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 33
2025-08-28 06:26:51,480 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, || 101 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 34
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, || 102 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 35
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, || 103 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 36
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, || 104 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 37
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, || 105 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 38
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_TOP_REMARKS => :NEW.TOP_REMARKS, || 106 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 39
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, || 107 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 40
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_REMARKS => :NEW.REMARKS, || 108 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 41
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, || 109 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 42
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, || 110 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 43
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_TRADING_PARTNER => :NEW.TRADING_PARTNER, || 111 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 44
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, || 112 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 45
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, || 113 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 46
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE || 114 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 47
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item: , || 115 || 0
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 48
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, || 116 || 12
2025-08-28 06:26:51,481 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 49
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, || 117 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 50
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_VALID_IND => :NEW.VALID_IND, || 118 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 51
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_CORE_REMARKS => :NEW.CORE_REMARKS, || 119 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 52
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_REVIEW_USERID => :NEW.REVIEW_USERID, || 120 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 53
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, || 121 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 54
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_REQUESTER_USERID => :NEW.REQUESTER_USERID, || 122 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 55
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_REQUEST_DATE => :NEW.REQUEST_DATE, || 123 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 56
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             I_CHANGE_USER => V_USERID || 124 || 12
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 57
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         ); || 125 || 8
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 58
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD;', 'line_no': 140}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]}], 'else_statements': [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 V_REPORTING_ENTITY_CD := :NEW.REPORTING_ENTITY_CD; || 140 || 16
2025-08-28 06:26:51,482 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 140 || 
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 140 || 
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 140, 'assignment_indent': 16}
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        RAISE ERR_VALID_FROM_DATE;', 'line_no': 145}]
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         RAISE ERR_VALID_FROM_DATE; || 145 || 24
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 145 || raise_statement
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 145 || raise_statement
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        NULL;', 'line_no': 147}]
2025-08-28 06:26:51,483 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         NULL; || 147 || 24
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 147 || null_statement
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 147 || null_statement
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR ( || 149 || 16
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_COMPANY_CD => :NEW.COMPANY_CD, || 150 || 20
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, || 151 || 20
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, || 152 || 20
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_TO_DATE => :NEW.VALID_TO_DATE, || 153 || 20
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_CHANGE_USER => V_USERID || 154 || 20
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 155 || 16
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                NULL;', 'line_no': 157}]
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 NULL; || 157 || 16
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 157 || null_statement
2025-08-28 06:26:51,484 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 157 || null_statement
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 59
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            CNTR := 0;', 'line_no': 161}, {'indent': 12, 'line': '            SELECT', 'line_no': 164}, {'indent': 16, 'line': '                COUNT (*) INTO CNTR', 'line_no': 165}, {'indent': 12, 'line': '            FROM', 'line_no': 166}, {'indent': 16, 'line': '                CFG_V_COMPANIES', 'line_no': 167}, {'indent': 12, 'line': '            WHERE', 'line_no': 168}, {'indent': 16, 'line': '                LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 169}, {'indent': 16, 'line': '                AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 170}, {'indent': 16, 'line': "                AND VALID_IND = 'Y';", 'line_no': 171}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}], 'if_elses': [], 'else_statements': []}, {'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 186}, {'indent': 12, 'line': '            SET', 'line_no': 187}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 188}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 189}, {'indent': 16, 'line': '                ) - 1', 'line_no': 190}, {'indent': 12, 'line': '            WHERE', 'line_no': 191}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 192}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 193}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 194}]
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             CNTR := 0; || 161 || 12
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 161 || 
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 161 || 
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 161, 'assignment_indent': 12}
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             SELECT || 164 || 12
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 164 || select_statement
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 171 || select_statement
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,485 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                SELECT', 'line_no': 173}, {'indent': 20, 'line': "                    LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST", 'line_no': 174}, {'indent': 16, 'line': '                FROM', 'line_no': 175}, {'indent': 20, 'line': '                    CFG_V_COMPANIES', 'line_no': 176}, {'indent': 16, 'line': '                WHERE', 'line_no': 177}, {'indent': 20, 'line': '                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 178}, {'indent': 20, 'line': '                    AND COMPANY_CD <> :NEW.COMPANY_CD', 'line_no': 179}, {'indent': 20, 'line': "                    AND VALID_IND = 'Y';", 'line_no': 180}, {'indent': 16, 'line': '                RAISE CPY_IN_USE;', 'line_no': 181}]
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 SELECT || 173 || 16
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 173 || select_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 180 || select_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 RAISE CPY_IN_USE; || 181 || 16
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 181 || raise_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 181 || raise_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE CFG.CFG_COMPANY_ADDRESSES || 186 || 12
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 186 || update_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 194 || update_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 60
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            UPDATE CFG.CFG_COMPANY_ADDRESSES', 'line_no': 200}, {'indent': 12, 'line': '            SET', 'line_no': 201}, {'indent': 16, 'line': '                VALID_TO = TRUNC (', 'line_no': 202}, {'indent': 20, 'line': '                    SYSDATE', 'line_no': 203}, {'indent': 16, 'line': '                ) - 1', 'line_no': 204}, {'indent': 12, 'line': '            WHERE', 'line_no': 205}, {'indent': 16, 'line': '                COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 206}, {'indent': 16, 'line': "                AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC')", 'line_no': 207}, {'indent': 16, 'line': '                AND ( VALID_TO > TRUNC(SYSDATE)', 'line_no': 208}, {'indent': 16, 'line': '                OR VALID_TO IS NULL);', 'line_no': 209}]
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             UPDATE CFG.CFG_COMPANY_ADDRESSES || 200 || 12
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:830] - stmt start: 200 || update_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:839] - stmt end: 209 || update_statement
2025-08-28 06:26:51,486 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 61
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_SCOPE;', 'line_no': 215}]
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_CPY_STILL_IN_SCOPE; || 215 || 12
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 215 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 215 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 62
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_CPY_STILL_IN_MFR;', 'line_no': 221}]
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_CPY_STILL_IN_MFR; || 221 || 12
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 221 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 221 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 63
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'line_no': 227}]
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC; || 227 || 12
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 227 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 227 || raise_statement
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 64
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 233}]
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_REPORTING_ENTITY_CD := NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD); || 233 || 12
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 233 || 
2025-08-28 06:26:51,487 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 233 || 
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 233, 'assignment_indent': 12}
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD;', 'line_no': 235}]
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_REPORTING_ENTITY_CD := V_LEGAL_COMPANY_CD; || 235 || 12
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 235 || 
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 235 || 
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_line_no': 235, 'assignment_indent': 12}
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 65
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                SELECT', 'line_no': 244}, {'indent': 20, 'line': '                    CBC_FLAG INTO V_REP_CBC_FLAG', 'line_no': 245}, {'indent': 16, 'line': '                FROM', 'line_no': 246}, {'indent': 20, 'line': '                    CFG_V_REPORTING_ENTITIES', 'line_no': 247}, {'indent': 16, 'line': '                WHERE', 'line_no': 248}, {'indent': 20, 'line': '                    REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'line_no': 249}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                CNTR := 0;', 'line_no': 256}, {'indent': 16, 'line': '                SELECT', 'line_no': 259}, {'indent': 20, 'line': '                    COUNT (*) INTO CNTR', 'line_no': 260}, {'indent': 16, 'line': '                FROM', 'line_no': 261}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 262}, {'indent': 16, 'line': '                WHERE', 'line_no': 263}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 264}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 265}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                SELECT', 'line_no': 270}, {'indent': 20, 'line': '                    VALID_FROM,', 'line_no': 271}, {'indent': 20, 'line': '                    COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE,', 'line_no': 272}, {'indent': 20, 'line': '                    V_COUNTRY_CD', 'line_no': 273}, {'indent': 16, 'line': '                FROM', 'line_no': 274}, {'indent': 20, 'line': '                    CFG.CFG_V_COMPANY_ADDRESSES', 'line_no': 275}, {'indent': 16, 'line': '                WHERE', 'line_no': 276}, {'indent': 20, 'line': '                    COMPANY_CD = V_REPORTING_ENTITY_CD', 'line_no': 277}, {'indent': 20, 'line': "                    AND ADDRESS_TYPE_CD = 'RES';", 'line_no': 278}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}]
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 SELECT || 244 || 16
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 244 || select_statement
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 249 || select_statement
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    RAISE RU_NOT_IN_CBC_SCOPE;', 'line_no': 253}]
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     RAISE RU_NOT_IN_CBC_SCOPE; || 253 || 20
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 253 || raise_statement
2025-08-28 06:26:51,488 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 253 || raise_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 CNTR := 0; || 256 || 16
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 256 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 256 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 256, 'assignment_indent': 16}
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 SELECT || 259 || 16
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 259 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 265 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    RAISE ERR_NO_ADR;', 'line_no': 267}]
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     RAISE ERR_NO_ADR; || 267 || 20
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 267 || raise_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 267 || raise_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 SELECT || 270 || 16
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 270 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 278 || select_statement
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 25
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE);', 'line_no': 282}]
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     V_ADDR_VALID_FROM_DATE := TRUNC(SYSDATE); || 282 || 20
2025-08-28 06:26:51,489 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 282 || 
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 282 || 
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 26
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 285 || 16
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 27
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_COMPANY_CD => :NEW.COMPANY_CD, || 286 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 28
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, || 287 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 29
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_FROM_DATE => TRUNC (SYSDATE), || 288 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 30
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_TO_DATE => NULL, || 289 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 31
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_CHANGE_USER => V_USERID, || 290 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 32
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_MAPPING_TYPE => 'CE', || 291 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 33
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_ACTION_TYPE => 'INSERT' || 292 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 34
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 293 || 16
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 35
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 294 || 16
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 36
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_COMPANY_CD => :NEW.COMPANY_CD, || 295 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 37
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_REPORTING_ENTITY_CD => 'J-' || 296 || 20
2025-08-28 06:26:51,490 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 38
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                              || V_COUNTRY_CD, || 297 || 45
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 39
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, || 298 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 40
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_TO_DATE => NULL, || 299 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 41
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_CHANGE_USER => V_USERID, || 300 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 42
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_MAPPING_TYPE => 'JU', || 301 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 43
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_ACTION_TYPE => 'INSERT' || 302 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 44
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 303 || 16
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}]
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 307 || 16
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_COMPANY_CD => :NEW.COMPANY_CD, || 308 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_FROM_DATE => NULL, || 309 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_TO_DATE => TRUNC (SYSDATE), || 310 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_CHANGE_USER => V_USERID, || 311 || 20
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,491 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_MAPPING_TYPE => 'CE', || 312 || 20
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_ACTION_TYPE => 'UPDATE' || 313 || 20
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 314 || 16
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 315 || 16
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_COMPANY_CD => :NEW.COMPANY_CD, || 316 || 20
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_FROM_DATE => NULL, || 317 || 20
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_VALID_TO_DATE => TRUNC (SYSDATE), || 318 || 20
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,492 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_CHANGE_USER => V_USERID, || 319 || 20
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_MAPPING_TYPE => 'JU', || 320 || 20
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     I_ACTION_TYPE => 'UPDATE' || 321 || 20
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 322 || 16
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 66
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( || 333 || 16
2025-08-28 06:26:51,493 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 :NEW.COMPANY_CD, || 334 || 16
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 V_LEGAL_COMPANY_CD, || 335 || 16
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 :NEW.OFFICIAL_NAME, || 336 || 16
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 V_USERID); || 337 || 16
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                NULL;', 'line_no': 339}]
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 NULL; || 339 || 16
2025-08-28 06:26:51,494 - root - DEBUG - [OracleTriggerAnalyzer.py:875] - stmt start: 339 || null_statement
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:877] - stmt end: 339 || null_statement
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);', 'line_no': 346}]
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME); || 346 || 8
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);', 'line_no': 348}]
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME); || 348 || 8
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);', 'line_no': 350}]
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME); || 350 || 8
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');", 'line_no': 352}]
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date'); || 352 || 8
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');", 'line_no': 354}]
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope'); || 354 || 8
2025-08-28 06:26:51,495 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');", 'line_no': 356}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company'); || 356 || 8
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');", 'line_no': 358}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes'); || 358 || 8
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: '", 'line_no': 360}, {'indent': 42, 'line': '                                          || V_COMPANY_CODES_LIST);', 'line_no': 361}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || 360 || 8
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                           || V_COMPANY_CODES_LIST); || 361 || 42
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD', 'line_no': 363}, {'indent': 42, 'line': "                                          || ' is not a valid Legal Company Code');", 'line_no': 364}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD || 363 || 8
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                           || ' is not a valid Legal Company Code'); || 364 || 42
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');", 'line_no': 366}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!'); || 366 || 8
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');", 'line_no': 368}]
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,496 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company'); || 368 || 8
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'begin_end', 'begin_line_no': 24, 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 25, 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 27, 'when_indent': 8, 'then_line_no': 27, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 28, 'assignment_indent': 12}]}], 'exception_line_no': 26, 'end_line_no': 29}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 4, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_line_no': 32, 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 35, 'then_line_no': 35, 'if_indent': 4, 'end_if_line_no': 48, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 36, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_line_no': 39, 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 50, 'then_line_no': 50, 'if_indent': 4, 'end_if_line_no': 343, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_line_no': 56, 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 61, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_line_no': 62, 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 75, 'if_indent': 8, 'end_if_line_no': 77, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 76, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}, {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}, {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}, {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}, {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}, {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}, {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}, {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}, {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}, {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}, {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}, {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}, {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}, {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}, {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}, {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}, {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}, {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}, {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}, {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}, {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}, {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}, {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}, {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}, {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}, {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}, {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}, {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}, {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}, {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}, {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}, {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}, {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}, {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}, {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}, {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}, {'indent': 0, 'line': ',', 'line_no': 115}, {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}, {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}, {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}, {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}, {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}, {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}, {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}, {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}, {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}, {'indent': 8, 'line': '        );', 'line_no': 125}, {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 140, 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 145, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 147, 'statement_indent': 24}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 157, 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 160, 'then_line_no': 160, 'if_indent': 8, 'end_if_line_no': 195, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 161, 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 164, 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 173, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 181, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 186, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 8, 'end_if_line_no': 210, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 200, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 214, 'then_line_no': 214, 'if_indent': 8, 'end_if_line_no': 216, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 215, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 220, 'then_line_no': 220, 'if_indent': 8, 'end_if_line_no': 222, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 221, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 226, 'then_line_no': 226, 'if_indent': 8, 'end_if_line_no': 228, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 227, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 232, 'then_line_no': 232, 'if_indent': 8, 'end_if_line_no': 236, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 233, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_line_no': 235, 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 240, 'then_line_no': 240, 'if_indent': 8, 'end_if_line_no': 324, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 244, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 253, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 256, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 259, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 267, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 270, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 339, 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 25, 'assignment_indent': 8}]
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 28, 'assignment_indent': 12}]
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_line_no': 32, 'statement_indent': 8}]
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 36, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_line_no': 39, 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 45, 'then_line_no': 45, 'if_indent': 8, 'end_if_line_no': 47, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,497 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 46, 'statement_indent': 12}]
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_line_no': 53, 'then_line_no': 53, 'if_indent': 8, 'end_if_line_no': 57, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_line_no': 56, 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 61, 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_line_no': 62, 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 72, 'then_line_no': 75, 'if_indent': 8, 'end_if_line_no': 77, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 76, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}, {'indent': 12, 'line': '            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 80}, {'indent': 12, 'line': '            I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD,', 'line_no': 81}, {'indent': 12, 'line': '            I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE,', 'line_no': 82}, {'indent': 12, 'line': '            I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD,', 'line_no': 83}, {'indent': 12, 'line': '            I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME,', 'line_no': 84}, {'indent': 12, 'line': '            I_SHORT_NAME => :NEW.SHORT_NAME,', 'line_no': 85}, {'indent': 12, 'line': '            I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME,', 'line_no': 86}, {'indent': 12, 'line': '            I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD,', 'line_no': 87}, {'indent': 12, 'line': '            I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD,', 'line_no': 88}, {'indent': 12, 'line': '            I_URL => :NEW.URL,', 'line_no': 89}, {'indent': 12, 'line': '            I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL,', 'line_no': 90}, {'indent': 12, 'line': '            I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO,', 'line_no': 91}, {'indent': 12, 'line': '            I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO,', 'line_no': 92}, {'indent': 12, 'line': '            I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO,', 'line_no': 93}, {'indent': 12, 'line': '            I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND,', 'line_no': 94}, {'indent': 12, 'line': '            I_FATCA_CD => :NEW.FATCA_CD,', 'line_no': 95}, {'indent': 12, 'line': '            I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE,', 'line_no': 96}, {'indent': 12, 'line': '            I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE,', 'line_no': 97}, {'indent': 12, 'line': '            I_SAPINST_NO => :NEW.SAPINST_NO,', 'line_no': 98}, {'indent': 12, 'line': '            I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO,', 'line_no': 99}, {'indent': 12, 'line': '            I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE,', 'line_no': 100}, {'indent': 12, 'line': '            I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE,', 'line_no': 101}, {'indent': 12, 'line': '            I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA,', 'line_no': 102}, {'indent': 12, 'line': '            I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA,', 'line_no': 103}, {'indent': 12, 'line': '            I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND,', 'line_no': 104}, {'indent': 12, 'line': '            I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE,', 'line_no': 105}, {'indent': 12, 'line': '            I_TOP_REMARKS => :NEW.TOP_REMARKS,', 'line_no': 106}, {'indent': 12, 'line': '            I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS,', 'line_no': 107}, {'indent': 12, 'line': '            I_REMARKS => :NEW.REMARKS,', 'line_no': 108}, {'indent': 12, 'line': '            I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC,', 'line_no': 109}, {'indent': 12, 'line': '            I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER,', 'line_no': 110}, {'indent': 12, 'line': '            I_TRADING_PARTNER => :NEW.TRADING_PARTNER,', 'line_no': 111}, {'indent': 12, 'line': '            I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID,', 'line_no': 112}, {'indent': 12, 'line': '            I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG,', 'line_no': 113}, {'indent': 12, 'line': '            I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE', 'line_no': 114}, {'indent': 0, 'line': ',', 'line_no': 115}, {'indent': 12, 'line': '            I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND,', 'line_no': 116}, {'indent': 12, 'line': '            I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND,', 'line_no': 117}, {'indent': 12, 'line': '            I_VALID_IND => :NEW.VALID_IND,', 'line_no': 118}, {'indent': 12, 'line': '            I_CORE_REMARKS => :NEW.CORE_REMARKS,', 'line_no': 119}, {'indent': 12, 'line': '            I_REVIEW_USERID => :NEW.REVIEW_USERID,', 'line_no': 120}, {'indent': 12, 'line': '            I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE,', 'line_no': 121}, {'indent': 12, 'line': '            I_REQUESTER_USERID => :NEW.REQUESTER_USERID,', 'line_no': 122}, {'indent': 12, 'line': '            I_REQUEST_DATE => :NEW.REQUEST_DATE,', 'line_no': 123}, {'indent': 12, 'line': '            I_CHANGE_USER => V_USERID', 'line_no': 124}, {'indent': 8, 'line': '        );', 'line_no': 125}, {'condition': '', 'type': 'case_when', 'case_line_no': 128, 'case_indent': 8, 'end_case_line_no': 158, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 129, 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_line_no': 139, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 140, 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 145, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 147, 'statement_indent': 24}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 157, 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_line_no': 160, 'then_line_no': 160, 'if_indent': 8, 'end_if_line_no': 195, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 161, 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 164, 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 173, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 181, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 186, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 8, 'end_if_line_no': 210, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 200, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_line_no': 214, 'then_line_no': 214, 'if_indent': 8, 'end_if_line_no': 216, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 215, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_line_no': 220, 'then_line_no': 220, 'if_indent': 8, 'end_if_line_no': 222, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 221, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_line_no': 226, 'then_line_no': 226, 'if_indent': 8, 'end_if_line_no': 228, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 227, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_line_no': 232, 'then_line_no': 232, 'if_indent': 8, 'end_if_line_no': 236, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 233, 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_line_no': 235, 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_line_no': 240, 'then_line_no': 240, 'if_indent': 8, 'end_if_line_no': 324, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 244, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 253, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 256, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 259, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 267, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 270, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_line_no': 328, 'case_indent': 8, 'end_case_line_no': 340, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 329, 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_line_no': 332, 'then_statements': [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 339, 'statement_indent': 16}]}]
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_line_no': 54, 'assignment_indent': 12}]
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_line_no': 56, 'assignment_indent': 12}]
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_line_no': 76, 'statement_indent': 12}]
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,498 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        MDM_UTIL_COMPANIES.MODIFYCOMPANY (', 'line_no': 79}
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANY (
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 79
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 125
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANY ( I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID );
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANY ( I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID );
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 51
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_line_no': 140, 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_line_no': 141, 'case_indent': 16, 'end_case_line_no': 148, 'when_clauses': [{'type': 'when_statement', 'when_line_no': 142, 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_line_no': 144, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 145, 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 147, 'statement_indent': 24}]}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 150}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD,', 'line_no': 151}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE,', 'line_no': 152}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => :NEW.VALID_TO_DATE,', 'line_no': 153}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID', 'line_no': 154}, {'indent': 16, 'line': '                );', 'line_no': 155}]
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,499 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_line_no': 145, 'statement_indent': 24}]
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 147, 'statement_indent': 24}]
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (', 'line_no': 149}
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR (
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 149
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 155
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID );
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID );
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 157, 'statement_indent': 16}]
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 52
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 161, 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 164, 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 172, 'then_line_no': 172, 'if_indent': 12, 'end_if_line_no': 182, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 173, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 181, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_line_no': 186, 'statement_indent': 12}]
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_line_no': 173, 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_line_no': 181, 'statement_indent': 16}]
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,500 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 53
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_line_no': 200, 'statement_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 54
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_line_no': 215, 'statement_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 55
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_line_no': 221, 'statement_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 56
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_line_no': 227, 'statement_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 57
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_line_no': 233, 'assignment_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_line_no': 235, 'assignment_indent': 12}]
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,501 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 58
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_line_no': 241, 'then_line_no': 243, 'if_indent': 12, 'end_if_line_no': 304, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 244, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 253, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 256, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 259, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 267, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 270, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_line_no': 306, 'then_line_no': 306, 'if_indent': 12, 'end_if_line_no': 323, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_line_no': 244, 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_line_no': 252, 'then_line_no': 252, 'if_indent': 16, 'end_if_line_no': 254, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 253, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 256, 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 259, 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 266, 'then_line_no': 266, 'if_indent': 16, 'end_if_line_no': 268, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 267, 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_line_no': 270, 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_line_no': 281, 'then_line_no': 281, 'if_indent': 16, 'end_if_line_no': 283, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 286}, {'indent': 20, 'line': '                    I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD,', 'line_no': 287}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => TRUNC (SYSDATE),', 'line_no': 288}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 289}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 290}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 291}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 292}, {'indent': 16, 'line': '                );', 'line_no': 293}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 295}, {'indent': 20, 'line': "                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 296}, {'indent': 45, 'line': '                                             || V_COUNTRY_CD,', 'line_no': 297}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE,', 'line_no': 298}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => NULL,', 'line_no': 299}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 300}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 301}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'INSERT'", 'line_no': 302}, {'indent': 16, 'line': '                );', 'line_no': 303}]
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_line_no': 253, 'statement_indent': 20}]
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_line_no': 267, 'statement_indent': 20}]
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,502 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 6
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_line_no': 282, 'assignment_indent': 20}]
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 7
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 285}
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 285
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 293
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 16
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 294}
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,503 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 294
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 303
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 308}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 309}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 310}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 311}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'CE',", 'line_no': 312}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 313}, {'indent': 16, 'line': '                );', 'line_no': 314}, {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}, {'indent': 20, 'line': '                    I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 316}, {'indent': 20, 'line': '                    I_VALID_FROM_DATE => NULL,', 'line_no': 317}, {'indent': 20, 'line': '                    I_VALID_TO_DATE => TRUNC (SYSDATE),', 'line_no': 318}, {'indent': 20, 'line': '                    I_CHANGE_USER => V_USERID,', 'line_no': 319}, {'indent': 20, 'line': "                    I_MAPPING_TYPE => 'JU',", 'line_no': 320}, {'indent': 20, 'line': "                    I_ACTION_TYPE => 'UPDATE'", 'line_no': 321}, {'indent': 16, 'line': '                );', 'line_no': 322}]
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 307}
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 307
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 314
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 8
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 315}
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 315
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 322
2025-08-28 06:26:51,504 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 59
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}, {'indent': 16, 'line': '                :NEW.COMPANY_CD,', 'line_no': 334}, {'indent': 16, 'line': '                V_LEGAL_COMPANY_CD,', 'line_no': 335}, {'indent': 16, 'line': '                :NEW.OFFICIAL_NAME,', 'line_no': 336}, {'indent': 16, 'line': '                V_USERID);', 'line_no': 337}]
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (', 'line_no': 333}
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME (
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 333
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 337
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( :NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID);
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME ( :NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID);
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_line_no': 339, 'statement_indent': 16}]
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);', 'line_no': 346}]
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);', 'line_no': 346}
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 346
2025-08-28 06:26:51,505 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 346
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20110, V_TRIGGER_NAME);
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);', 'line_no': 348}]
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);', 'line_no': 348}
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 348
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 348
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20111, V_TRIGGER_NAME);
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);', 'line_no': 350}]
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);', 'line_no': 350}
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 350
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 350
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20114, V_TRIGGER_NAME);
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');", 'line_no': 352}]
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');", 'line_no': 352}
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20122, 'PLEASE INSERT : REP. CODE ASSIGNM. VALID FROM DATE');
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 352
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 352
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20122, 'Please insert : Rep. Code Assignm. Valid from Date');
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');", 'line_no': 354}]
2025-08-28 06:26:51,506 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');", 'line_no': 354}
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20123, 'A COMPANY CANNOT BE IN CBC/GBE SCOPE IF THE RU THAT REPORTS IT IS NOT IN CBC SCOPE');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 354
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 354
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20123, 'A company cannot be in CBC/GBE scope if the RU that reports it is not in CBC scope');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');", 'line_no': 356}]
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');", 'line_no': 356}
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20124, 'THE CBC/GBE SCOPE MUST BE SET TO NO BEFORE DEACTIVATING THE COMPANY');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 356
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 356
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20124, 'The CBC/GBE Scope must be set to No before deactivating the company');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');", 'line_no': 358}]
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');", 'line_no': 358}
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20124, 'NO PHYSICAL ADDRESS FOUND. PLEASE INSERT THE ADDRESS BEFORE SETTING THE CBC/GBE SCOPE TO YES');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 358
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 358
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20124, 'No Physical Address found. Please insert the address before setting the CBC/GBE Scope to Yes');
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: '", 'line_no': 360}, {'indent': 42, 'line': '                                          || V_COMPANY_CODES_LIST);', 'line_no': 361}]
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: '", 'line_no': 360}
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20125, 'THE COMPANY CANNOT BE INVALIDATED BECAUSE IS STILL USED AS LEGAL COMPANY FOR THE FOLLOWING COMPANIES: '
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 360
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 361
2025-08-28 06:26:51,507 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || V_COMPANY_CODES_LIST);
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20125, 'The Company cannot be invalidated because is still used as Legal Company for the following companies: ' || V_COMPANY_CODES_LIST);
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': '        RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD', 'line_no': 363}, {'indent': 42, 'line': "                                          || ' is not a valid Legal Company Code');", 'line_no': 364}]
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': '        RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD', 'line_no': 363}
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 363
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 364
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD || ' is not a valid Legal Company Code');
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20126, V_LEGAL_COMPANY_CD || ' is not a valid Legal Company Code');
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');", 'line_no': 366}]
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');", 'line_no': 366}
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20127, 'AN ASSOCIATE ENTITY CANNOT BE IN CBC/GBE SCOPE!');
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 366
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 366
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20127, 'An Associate Entity cannot be in CBC/GBE Scope!');
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');", 'line_no': 368}]
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');", 'line_no': 368}
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR ( -20127, 'PLEASE FILL IN REP. CODE ASSIGNM. VALID TO DATE FIELD BEFORE INVALIDATING THE COMPANY');
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 368
2025-08-28 06:26:51,508 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 368
2025-08-28 06:26:51,509 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR ( -20127, 'Please fill in Rep. Code Assignm. Valid to Date field before invalidating the company');
2025-08-28 06:26:51,509 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,509 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.058318138122558594 seconds
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,509 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 9 vars, 1 consts, 11 excs, 19 comments
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - Analysis statistics: 9 vars, 1 consts, 11 excs, 19 comments
2025-08-28 06:26:51,509 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\yyy_analysis.json
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\yyy_analysis.json
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger yyy.sql ===
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - âœ“ Created yyy_analysis.json
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - === Processing file 8/8: zzz.sql ===
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - Source path: files/oracle\zzz.sql
2025-08-28 06:26:51,511 - root - DEBUG - [common.py:105] - Output path: files/format_json\zzz_analysis.json
2025-08-28 06:26:51,512 - root - DEBUG - [common.py:105] - === SQL to JSON processing for trigger zzz.sql ===
2025-08-28 06:26:51,512 - root - DEBUG - [common.py:105] - Successfully read 13280 characters from files/oracle\zzz.sql
2025-08-28 06:26:51,512 - root - DEBUG - [common.py:105] - Creating OracleTriggerAnalyzer instance...
2025-08-28 06:26:51,512 - root - DEBUG - [common.py:105] - Initializing OracleTriggerAnalyzer with 13280 characters of SQL
2025-08-28 06:26:51,512 - root - DEBUG - [OracleTriggerAnalyzer.py:91] - structured lines conversion 0 lines processed
2025-08-28 06:26:51,512 - root - DEBUG - [OracleTriggerAnalyzer.py:94] - SQL section parsing
2025-08-28 06:26:51,512 - root - DEBUG - [OracleTriggerAnalyzer.py:300] - structured lines conversion
2025-08-28 06:26:51,513 - root - DEBUG - [common.py:105] - Converting SQL content to structured lines
2025-08-28 06:26:51,513 - root - DEBUG - [common.py:105] - Structured lines conversion complete: 253 total, 58 with semicolons, 21 empty lines skipped
2025-08-28 06:26:51,513 - root - DEBUG - [OracleTriggerAnalyzer.py:302] - structured lines conversion
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:239] - Block comment stripping complete: 0 comments extracted, 253 lines cleaned
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:306] - Removed block comments from main section
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:283] - Inline comment stripping complete: 17 comments extracted, 236 lines cleaned
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:310] - Removed inline comments from main section
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:322] - Found DECLARE at line 1
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:326] - Found BEGIN at line 14
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:336] - DECLARE section: lines 1-13
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:364] - Starting declaration parsing
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_TRIGGER_NAME
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: CNTR
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_UPD
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_CTRY_CHG
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_NOT_ALLOWED_TO_INVALIDATE
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_USERID
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: TEST_ERR
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COUNTRY_CD
2025-08-28 06:26:51,514 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_COMPANY_TYPE_CD
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:440] - Processed exception: ERR_INS_LEGAL_ADDR
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:408] - Processed variable: V_VALID_FROM
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1569] - Starting top-level BEGIN blocks parsing
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - WHEN ERR_INS THEN
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'ERR_UPD', 'when_line_no': 253, 'when_indent': 4, 'then_line_no': 253, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '", 'line_no': 254}, {'indent': 41, 'line': '                                         ||:OLD.ADDRESS_TYPE_CD', 'line_no': 255}, {'indent': 41, 'line': "                                         ||' New address type: '", 'line_no': 256}, {'indent': 41, 'line': '                                         ||:NEW.ADDRESS_TYPE_CD);', 'line_no': 257}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS', 'when_line_no': 258, 'when_indent': 4, 'then_line_no': 259, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 260}]}, {'type': 'exception_handler', 'exception_name': 'ERR_CTRY_CHG', 'when_line_no': 261, 'when_indent': 4, 'then_line_no': 261, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 262}]}, {'type': 'exception_handler', 'exception_name': 'TEST_ERR', 'when_line_no': 263, 'when_indent': 4, 'then_line_no': 263, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: '", 'line_no': 264}, {'indent': 41, 'line': '                                         ||:NEW.COMPANY_CD', 'line_no': 265}, {'indent': 41, 'line': "                                         ||' Old:'", 'line_no': 266}, {'indent': 41, 'line': '                                         ||:OLD.COMPANY_CD', 'line_no': 267}, {'indent': 41, 'line': "                                         ||'Count: '", 'line_no': 268}, {'indent': 41, 'line': '                                         ||CNTR);', 'line_no': 269}]}, {'type': 'exception_handler', 'exception_name': 'ERR_INS_LEGAL_ADDR', 'when_line_no': 270, 'when_indent': 4, 'then_line_no': 270, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 271}]}, {'type': 'exception_handler', 'exception_name': 'ERR_NOT_ALLOWED_TO_INVALIDATE', 'when_line_no': 272, 'when_indent': 4, 'then_line_no': 272, 'exception_statements': [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 273}]}]
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1621] - Begin line: {'indent': 4, 'line': '    BEGIN', 'line_no': 15} 0
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1631] - Exception line: {'indent': 4, 'line': '    EXCEPTION', 'line_no': 17} 2
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1640] - End line: {'indent': 4, 'line': '    END;', 'line_no': 20} 5
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1780] - exception_handler: [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}]
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}], 'exception_line_no': 17, 'end_line_no': 20}
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    CNTR := 0;', 'line_no': 22}
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    SELECT', 'line_no': 23}
2025-08-28 06:26:51,515 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        COUNT (*) INTO CNTR', 'line_no': 24}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    FROM', 'line_no': 25}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        CFG_V_COMPANY_ADDRESSES', 'line_no': 26}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    WHERE', 'line_no': 27}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'line_no': 28}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'line_no': 29}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF INSERTING THEN', 'line_no': 30}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 30
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 30 i: 34
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 31}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}, {'indent': 8, 'line': '        END IF;', 'line_no': 33}]
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 31}, {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}, {'indent': 8, 'line': '        END IF;', 'line_no': 33}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        IF CNTR > 0 THEN', 'line_no': 31}
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 31
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 31 i: 33
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}]
2025-08-28 06:26:51,516 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF INSERTING OR UPDATING THEN', 'line_no': 36}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 36
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 36 i: 243
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 174
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'indent': 8, 'line': "        IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN", 'line_no': 43}, {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}, {'indent': 8, 'line': '        END IF;', 'line_no': 45}, {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN", 'line_no': 47}, {'indent': 12, 'line': '            IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}, {'indent': 8, 'line': '        END IF;', 'line_no': 196}, {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN", 'line_no': 198}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}, {'indent': 8, 'line': '        END IF;', 'line_no': 242}]
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'indent': 8, 'line': "        IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN", 'line_no': 43}, {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}, {'indent': 8, 'line': '        END IF;', 'line_no': 45}, {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN", 'line_no': 47}, {'indent': 12, 'line': '            IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}, {'indent': 8, 'line': '        END IF;', 'line_no': 196}, {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN", 'line_no': 198}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}, {'indent': 8, 'line': '        END IF;', 'line_no': 242}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        SELECT', 'line_no': 37}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        FROM', 'line_no': 39}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}
2025-08-28 06:26:51,517 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': '        WHERE', 'line_no': 41}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') THEN", 'line_no': 43}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 43
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 43 i: 45
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}]
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') THEN", 'line_no': 47}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 47
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 47 i: 196
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 122
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}]
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'indent': 12, 'line': '            IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 48}, {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}, {'indent': 12, 'line': '            END IF;', 'line_no': 50}, {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 52}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}, {'indent': 12, 'line': '            ELSE', 'line_no': 73}, {'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}, {'indent': 12, 'line': '            END IF;', 'line_no': 195}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 48}
2025-08-28 06:26:51,518 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 48
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 48 i: 50
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}]
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 52}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 52
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 52 i: 195
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 117
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 76, 195
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}, {'indent': 16, 'line': '                ELSE', 'line_no': 173}, {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}, {'indent': 16, 'line': '                END IF;', 'line_no': 194}]}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}
2025-08-28 06:26:51,519 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 72}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                IF NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID THEN', 'line_no': 76}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 76
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 76 i: 194
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 96
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 176, 194
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}, {'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}, {'indent': 20, 'line': '                    END IF;', 'line_no': 172}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}
2025-08-28 06:26:51,520 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 99}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    SELECT', 'line_no': 105}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    FROM', 'line_no': 107}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    WHERE', 'line_no': 109}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    IF :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 THEN", 'line_no': 114}
2025-08-28 06:26:51,521 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 114
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 114 i: 172
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 47
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}]
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}, {'indent': 24, 'line': '                        ELSE', 'line_no': 130}, {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}, {'indent': 24, 'line': '                        END IF;', 'line_no': 134}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}, {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}, {'indent': 24, 'line': '                        END IF;', 'line_no': 171}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        SELECT', 'line_no': 118}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        FROM', 'line_no': 120}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        WHERE', 'line_no': 122}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        IF TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' THEN", 'line_no': 126}
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 126
2025-08-28 06:26:51,522 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 126 i: 134
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 5
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 133, 134
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}
2025-08-28 06:26:51,523 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        );', 'line_no': 145}
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        IF V_COMPANY_TYPE_CD = 'L' THEN", 'line_no': 148}
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 148
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 148 i: 171
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 24
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}]
2025-08-28 06:26:51,524 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}, {'indent': 32, 'line': '                                SELECT', 'line_no': 150}, {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}, {'indent': 32, 'line': '                                FROM', 'line_no': 152}, {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}, {'indent': 32, 'line': '                                WHERE', 'line_no': 154}, {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}, {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}, {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}, {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}, {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}, {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}, {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}, {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}, {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}, {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}, {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}, {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}, {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}, {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}, {'indent': 32, 'line': '                                );', 'line_no': 169}, {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            FOR V_REC IN (', 'line_no': 149}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                SELECT', 'line_no': 150}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    COMPANY_CD', 'line_no': 151}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                FROM', 'line_no': 152}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    CFG_V_COMPANIES', 'line_no': 153}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                WHERE', 'line_no': 154}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    LEGAL_COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 155}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND VALID_IND = 'Y'", 'line_no': 156}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND CBC_GBE_SCOPE = 'Y'", 'line_no': 157}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    AND COMPANY_TYPE_CD IN ('O', 'V')", 'line_no': 158}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            ) LOOP', 'line_no': 159}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 160}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_COMPANY_CD => V_REC.COMPANY_CD,', 'line_no': 161}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 162}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 61, 'line': '                                                             || V_COUNTRY_CD,', 'line_no': 163}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 164}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_VALID_TO_DATE => NULL,', 'line_no': 165}
2025-08-28 06:26:51,525 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': '                                    I_CHANGE_USER => V_USERID,', 'line_no': 166}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_MAPPING_TYPE => 'JU',", 'line_no': 167}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 36, 'line': "                                    I_ACTION_TYPE => 'INSERT'", 'line_no': 168}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 32, 'line': '                                );', 'line_no': 169}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 28, 'line': '                            END LOOP;', 'line_no': 170}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    );', 'line_no': 193}
2025-08-28 06:26:51,526 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') THEN", 'line_no': 198}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 198
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 198 i: 242
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 41
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}]
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 199}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}, {'indent': 12, 'line': '            ELSE', 'line_no': 220}, {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}, {'indent': 12, 'line': '            END IF;', 'line_no': 241}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            IF CNTR = 0 THEN', 'line_no': 199}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 199
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 199 i: 241
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 39
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1330] - else_statements: 223, 241
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}
2025-08-28 06:26:51,527 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 219}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}
2025-08-28 06:26:51,528 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 16, 'line': '                );', 'line_no': 240}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 4, 'line': '    IF DELETING THEN', 'line_no': 245}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 245
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 245 i: 251
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 6
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN", 'line_no': 246}, {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}, {'indent': 8, 'line': '        END IF;', 'line_no': 248}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': ' DELETING ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN", 'line_no': 246}, {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}, {'indent': 8, 'line': '        END IF;', 'line_no': 248}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        IF NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') THEN", 'line_no': 246}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1198] - if_indent: 246
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1204] - if_i: 246 i: 248
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1205] - if_elses working_lines lenght: 3
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1335] - else_i: -1 elif_i: -1 then_statements: [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}]
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1338] - elif_else_statements: {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '", 'line_no': 254}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': '                                         ||:OLD.ADDRESS_TYPE_CD', 'line_no': 255}
2025-08-28 06:26:51,529 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': "                                         ||' New address type: '", 'line_no': 256}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': '                                         ||:NEW.ADDRESS_TYPE_CD);', 'line_no': 257}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 260}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 262}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: '", 'line_no': 264}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': '                                         ||:NEW.COMPANY_CD', 'line_no': 265}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': "                                         ||' Old:'", 'line_no': 266}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': '                                         ||:OLD.COMPANY_CD', 'line_no': 267}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': "                                         ||'Count: '", 'line_no': 268}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 41, 'line': '                                         ||CNTR);', 'line_no': 269}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 271}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1194] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 273}
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1083] - for_i: 149 i: 149
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:1178] - for_loop_statement: {'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []} 149 159
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]}], 'exception_line_no': 17, 'end_line_no': 20}, {'indent': 4, 'line': '    CNTR := 0;', 'line_no': 22}, {'indent': 4, 'line': '    SELECT', 'line_no': 23}, {'indent': 8, 'line': '        COUNT (*) INTO CNTR', 'line_no': 24}, {'indent': 4, 'line': '    FROM', 'line_no': 25}, {'indent': 8, 'line': '        CFG_V_COMPANY_ADDRESSES', 'line_no': 26}, {'indent': 4, 'line': '    WHERE', 'line_no': 27}, {'indent': 8, 'line': '        COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'line_no': 28}, {'indent': 8, 'line': '        AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'line_no': 29}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' DELETING ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,530 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        V_USERID := TXO_UTIL.GET_USERID;', 'line_no': 16}]
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         V_USERID := TXO_UTIL.GET_USERID; || 16 || 8
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 16 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 16 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            V_USERID := USER;', 'line_no': 19}]
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             V_USERID := USER; || 19 || 12
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 19 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 19 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     CNTR := 0; || 22 || 4
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 22 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 22 || 
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 22, 'assignment_indent': 4}
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:     SELECT || 23 || 4
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 23 || select_statement
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 29 || select_statement
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,531 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_INS;', 'line_no': 32}]
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_INS; || 32 || 12
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 32 || raise_statement
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 32 || raise_statement
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,532 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': '        SELECT', 'line_no': 37}, {'indent': 12, 'line': '            COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD', 'line_no': 38}, {'indent': 8, 'line': '        FROM', 'line_no': 39}, {'indent': 12, 'line': '            CFG_V_COMPANIES', 'line_no': 40}, {'indent': 8, 'line': '        WHERE', 'line_no': 41}, {'indent': 12, 'line': '            COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'line_no': 42}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         SELECT || 37 || 8
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 37 || select_statement
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 42 || select_statement
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_INS_LEGAL_ADDR;', 'line_no': 44}]
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_INS_LEGAL_ADDR; || 44 || 12
2025-08-28 06:26:51,533 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 44 || raise_statement
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 44 || raise_statement
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}]
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                RAISE ERR_CTRY_CHG;', 'line_no': 49}]
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 RAISE ERR_CTRY_CHG; || 49 || 16
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 49 || raise_statement
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 49 || raise_statement
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}]
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 55 || 16
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,534 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 56 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 57 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 58 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 59 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 60 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 61 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 62 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 63 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 64 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 65 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 66 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 67 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 68 || 20
2025-08-28 06:26:51,535 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 69 || 20
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 70 || 20
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'INSERT' || 71 || 20
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 72 || 16
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'indent': 20, 'line': '                    CNTR := 0;', 'line_no': 102}, {'indent': 20, 'line': '                    SELECT', 'line_no': 105}, {'indent': 24, 'line': '                        COUNT(*) INTO CNTR', 'line_no': 106}, {'indent': 20, 'line': '                    FROM', 'line_no': 107}, {'indent': 24, 'line': '                        CFG_V_COMPANIES', 'line_no': 108}, {'indent': 20, 'line': '                    WHERE', 'line_no': 109}, {'indent': 24, 'line': '                        COMPANY_CD = :NEW.COMPANY_CD', 'line_no': 110}, {'indent': 24, 'line': "                        AND VALID_IND = 'Y'", 'line_no': 111}, {'indent': 24, 'line': "                        AND CBC_GBE_SCOPE = 'Y'", 'line_no': 112}, {'indent': 24, 'line': "                        AND COMPANY_TYPE_CD IN ('B', 'L');", 'line_no': 113}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 82 || 20
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COMPANY_CD => :NEW.COMPANY_CD, || 83 || 24
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 84 || 24
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 85 || 24
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,536 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_STREET => :NEW.STREET, || 86 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_HOUSE_NO => :NEW.HOUSE_NO, || 87 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_BUILDING => :NEW.BUILDING, || 88 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 89 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ZIP_CODE => :NEW.ZIP_CODE, || 90 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_CITY=> :NEW.CITY, || 91 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 92 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COUNTRY_ID => :NEW.COUNTRY_ID, || 93 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LATITUDE => :NEW.LATITUDE, || 94 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LONGITUDE => :NEW.LONGITUDE, || 95 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 96 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_VALID_FROM => :NEW.VALID_FROM, || 97 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ACTION_TYPE => 'CTRY_CHANGE' || 98 || 24
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     ); || 99 || 20
2025-08-28 06:26:51,537 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 18
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     CNTR := 0; || 102 || 20
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 102 || 
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 102 || 
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 19
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     SELECT || 105 || 20
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 105 || select_statement
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 113 || select_statement
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 28
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 24, 'line': '                        SELECT', 'line_no': 118}, {'indent': 28, 'line': '                            COUNTRY_CD INTO V_COUNTRY_CD', 'line_no': 119}, {'indent': 24, 'line': '                        FROM', 'line_no': 120}, {'indent': 28, 'line': '                            MDM_V_COUNTRIES', 'line_no': 121}, {'indent': 24, 'line': '                        WHERE', 'line_no': 122}, {'indent': 28, 'line': '                            COUNTRY_ID = :NEW.COUNTRY_ID;', 'line_no': 123}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}], 'if_elses': [], 'else_statements': [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         SELECT || 118 || 24
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:800] - stmt start: 118 || select_statement
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:809] - stmt end: 123 || select_statement
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'line_no': 129}]
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy'); || 129 || 28
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 129 || 
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 129 || 
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 28, 'line': "                            V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'line_no': 133}]
2025-08-28 06:26:51,538 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             V_VALID_FROM := TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy'); || 133 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:964] - stmt start: 133 || 
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:966] - stmt end: 133 || 
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:1053] - assignment_statement: {'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( || 136 || 24
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_COMPANY_CD => :NEW.COMPANY_CD, || 137 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_REPORTING_ENTITY_CD => 'J-' || 138 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                                      || V_COUNTRY_CD, || 139 || 53
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_VALID_FROM_DATE => V_VALID_FROM, || 140 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_VALID_TO_DATE => NULL, || 141 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_CHANGE_USER => V_USERID, || 142 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_MAPPING_TYPE => 'JU', || 143 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                             I_ACTION_TYPE => 'INSERT' || 144 || 28
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         ); || 145 || 24
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}]
2025-08-28 06:26:51,539 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 176 || 20
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COMPANY_CD => :NEW.COMPANY_CD, || 177 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 178 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 179 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_STREET => :NEW.STREET, || 180 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_HOUSE_NO => :NEW.HOUSE_NO, || 181 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_BUILDING => :NEW.BUILDING, || 182 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 183 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ZIP_CODE => :NEW.ZIP_CODE, || 184 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_CITY=> :NEW.CITY, || 185 || 24
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,540 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 186 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_COUNTRY_ID => :NEW.COUNTRY_ID, || 187 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LATITUDE => :NEW.LATITUDE, || 188 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_LONGITUDE => :NEW.LONGITUDE, || 189 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 190 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_VALID_FROM => :NEW.VALID_FROM, || 191 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                         P_ACTION_TYPE => 'UPDATE' || 192 || 24
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     ); || 193 || 20
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}]
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}]
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 202 || 16
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 203 || 20
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 204 || 20
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,541 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 205 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 206 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 207 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 208 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 209 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 210 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 211 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 212 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 213 || 20
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,542 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 214 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 215 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 216 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 217 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'INSERT' || 218 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 219 || 16
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( || 223 || 16
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COMPANY_CD => :NEW.COMPANY_CD, || 224 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, || 225 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, || 226 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_STREET => :NEW.STREET, || 227 || 20
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,543 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_HOUSE_NO => :NEW.HOUSE_NO, || 228 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 6
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_BUILDING => :NEW.BUILDING, || 229 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 7
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, || 230 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 8
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ZIP_CODE => :NEW.ZIP_CODE, || 231 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 9
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_CITY=> :NEW.CITY, || 232 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 10
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_DISTRICT_NAME => :NEW.DISTRICT_NAME, || 233 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_COUNTRY_ID => :NEW.COUNTRY_ID, || 234 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 12
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LATITUDE => :NEW.LATITUDE, || 235 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 13
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_LONGITUDE => :NEW.LONGITUDE, || 236 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 14
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, || 237 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 15
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_VALID_FROM => :NEW.VALID_FROM, || 238 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 16
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                     P_ACTION_TYPE => 'UPDATE' || 239 || 20
2025-08-28 06:26:51,544 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 17
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                 ); || 240 || 16
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 11
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 12, 'line': '            RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'line_no': 247}]
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:             RAISE ERR_NOT_ALLOWED_TO_INVALIDATE; || 247 || 12
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:860] - stmt start: 247 || raise_statement
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:862] - stmt end: 247 || raise_statement
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,545 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'); || 250 || 8
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: []
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '", 'line_no': 254}, {'indent': 41, 'line': '                                         ||:OLD.ADDRESS_TYPE_CD', 'line_no': 255}, {'indent': 41, 'line': "                                         ||' New address type: '", 'line_no': 256}, {'indent': 41, 'line': '                                         ||:NEW.ADDRESS_TYPE_CD);', 'line_no': 257}]
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' || 254 || 8
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||:OLD.ADDRESS_TYPE_CD || 255 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||' New address type: ' || 256 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||:NEW.ADDRESS_TYPE_CD); || 257 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 260}]
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.'); || 260 || 8
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 262}]
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.'); || 262 || 8
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: '", 'line_no': 264}, {'indent': 41, 'line': '                                         ||:NEW.COMPANY_CD', 'line_no': 265}, {'indent': 41, 'line': "                                         ||' Old:'", 'line_no': 266}, {'indent': 41, 'line': '                                         ||:OLD.COMPANY_CD', 'line_no': 267}, {'indent': 41, 'line': "                                         ||'Count: '", 'line_no': 268}, {'indent': 41, 'line': '                                         ||CNTR);', 'line_no': 269}]
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'New: ' || 264 || 8
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 1
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||:NEW.COMPANY_CD || 265 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 2
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||' Old:' || 266 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 3
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||:OLD.COMPANY_CD || 267 || 41
2025-08-28 06:26:51,546 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 4
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||'Count: ' || 268 || 41
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 5
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:                                          ||CNTR); || 269 || 41
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 271}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company'); || 271 || 8
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:791] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 273}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:793] - i: 0
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:796] - item:         RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address'); || 273 || 8
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'begin_end', 'begin_line_no': 15, 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_line_no': 18, 'when_indent': 8, 'then_line_no': 18, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}]}], 'exception_line_no': 17, 'end_line_no': 20}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 22, 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_line_no': 23, 'statement_indent': 4}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_line_no': 30, 'then_line_no': 30, 'if_indent': 4, 'end_if_line_no': 34, 'then_statements': [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_line_no': 36, 'then_line_no': 36, 'if_indent': 4, 'end_if_line_no': 243, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' DELETING ', 'type': 'if_else', 'if_line_no': 245, 'then_line_no': 245, 'if_indent': 4, 'end_if_line_no': 251, 'then_statements': [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_line_no': 16, 'assignment_indent': 8}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_line_no': 19, 'assignment_indent': 12}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_line_no': 31, 'then_line_no': 31, 'if_indent': 8, 'end_if_line_no': 33, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,547 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_line_no': 32, 'statement_indent': 12}]
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 4
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_line_no': 37, 'statement_indent': 8}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_line_no': 43, 'then_line_no': 43, 'if_indent': 8, 'end_if_line_no': 45, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 47, 'then_line_no': 47, 'if_indent': 8, 'end_if_line_no': 196, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_line_no': 198, 'then_line_no': 198, 'if_indent': 8, 'end_if_line_no': 242, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_line_no': 44, 'statement_indent': 12}]
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 48, 'then_line_no': 48, 'if_indent': 12, 'end_if_line_no': 50, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 52, 'then_line_no': 52, 'if_indent': 12, 'end_if_line_no': 195, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]}]
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_line_no': 49, 'statement_indent': 16}]
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,548 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 56}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 57}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 58}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 59}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 60}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 61}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 62}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 63}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 64}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 65}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 66}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 67}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 68}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 69}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 70}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 71}, {'indent': 16, 'line': '                );', 'line_no': 72}]
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 55}
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 55
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 72
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_line_no': 76, 'then_line_no': 76, 'if_indent': 16, 'end_if_line_no': 194, 'then_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]}]
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 83}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 84}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 85}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 86}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 87}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 88}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 89}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 90}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 91}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 92}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 93}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 94}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 95}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 96}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 97}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'CTRY_CHANGE'", 'line_no': 98}, {'indent': 20, 'line': '                    );', 'line_no': 99}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_line_no': 102, 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_line_no': 105, 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_line_no': 114, 'then_line_no': 114, 'if_indent': 20, 'end_if_line_no': 172, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 82}
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 82
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 99
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );
2025-08-28 06:26:51,549 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE' );
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 18
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 19
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 20
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_line_no': 118, 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_line_no': 126, 'then_line_no': 126, 'if_indent': 24, 'end_if_line_no': 134, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]}, {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}, {'indent': 28, 'line': '                            I_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 137}, {'indent': 28, 'line': "                            I_REPORTING_ENTITY_CD => 'J-'", 'line_no': 138}, {'indent': 53, 'line': '                                                     || V_COUNTRY_CD,', 'line_no': 139}, {'indent': 28, 'line': '                            I_VALID_FROM_DATE => V_VALID_FROM,', 'line_no': 140}, {'indent': 28, 'line': '                            I_VALID_TO_DATE => NULL,', 'line_no': 141}, {'indent': 28, 'line': '                            I_CHANGE_USER => V_USERID,', 'line_no': 142}, {'indent': 28, 'line': "                            I_MAPPING_TYPE => 'JU',", 'line_no': 143}, {'indent': 28, 'line': "                            I_ACTION_TYPE => 'INSERT'", 'line_no': 144}, {'indent': 24, 'line': '                        );', 'line_no': 145}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_line_no': 148, 'then_line_no': 148, 'if_indent': 24, 'end_if_line_no': 171, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_line_no': 129, 'assignment_indent': 28}]
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_line_no': 133, 'assignment_indent': 28}]
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 2
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 24, 'line': '                        MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (', 'line_no': 136}
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU (
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 136
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 145
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU ( I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 12
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_line_no': 149, 'for_indent': 28, 'end_for_line_no': 170, 'loop_variable': 'V_REC', 'for_statements': []}]
2025-08-28 06:26:51,550 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}, {'indent': 24, 'line': '                        P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 177}, {'indent': 24, 'line': '                        P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 178}, {'indent': 24, 'line': '                        P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 179}, {'indent': 24, 'line': '                        P_STREET => :NEW.STREET,', 'line_no': 180}, {'indent': 24, 'line': '                        P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 181}, {'indent': 24, 'line': '                        P_BUILDING => :NEW.BUILDING,', 'line_no': 182}, {'indent': 24, 'line': '                        P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 183}, {'indent': 24, 'line': '                        P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 184}, {'indent': 24, 'line': '                        P_CITY=> :NEW.CITY,', 'line_no': 185}, {'indent': 24, 'line': '                        P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 186}, {'indent': 24, 'line': '                        P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 187}, {'indent': 24, 'line': '                        P_LATITUDE => :NEW.LATITUDE,', 'line_no': 188}, {'indent': 24, 'line': '                        P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 189}, {'indent': 24, 'line': '                        P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 190}, {'indent': 24, 'line': '                        P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 191}, {'indent': 24, 'line': "                        P_ACTION_TYPE => 'UPDATE'", 'line_no': 192}, {'indent': 20, 'line': '                    );', 'line_no': 193}]
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 20, 'line': '                    MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 176}
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 176
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 193
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 3
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_line_no': 199, 'then_line_no': 199, 'if_indent': 12, 'end_if_line_no': 241, 'then_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}], 'if_elses': [], 'else_statements': [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]}]
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 203}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 204}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 205}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 206}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 207}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 208}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 209}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 210}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 211}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 212}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 213}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 214}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 215}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 216}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 217}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'INSERT'", 'line_no': 218}, {'indent': 16, 'line': '                );', 'line_no': 219}]
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 202}
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,551 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 202
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 219
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT' );
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}, {'indent': 20, 'line': '                    P_COMPANY_CD => :NEW.COMPANY_CD,', 'line_no': 224}, {'indent': 20, 'line': '                    P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD,', 'line_no': 225}, {'indent': 20, 'line': '                    P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME,', 'line_no': 226}, {'indent': 20, 'line': '                    P_STREET => :NEW.STREET,', 'line_no': 227}, {'indent': 20, 'line': '                    P_HOUSE_NO => :NEW.HOUSE_NO,', 'line_no': 228}, {'indent': 20, 'line': '                    P_BUILDING => :NEW.BUILDING,', 'line_no': 229}, {'indent': 20, 'line': '                    P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO,', 'line_no': 230}, {'indent': 20, 'line': '                    P_ZIP_CODE => :NEW.ZIP_CODE,', 'line_no': 231}, {'indent': 20, 'line': '                    P_CITY=> :NEW.CITY,', 'line_no': 232}, {'indent': 20, 'line': '                    P_DISTRICT_NAME => :NEW.DISTRICT_NAME,', 'line_no': 233}, {'indent': 20, 'line': '                    P_COUNTRY_ID => :NEW.COUNTRY_ID,', 'line_no': 234}, {'indent': 20, 'line': '                    P_LATITUDE => :NEW.LATITUDE,', 'line_no': 235}, {'indent': 20, 'line': '                    P_LONGITUDE => :NEW.LONGITUDE,', 'line_no': 236}, {'indent': 20, 'line': '                    P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK,', 'line_no': 237}, {'indent': 20, 'line': '                    P_VALID_FROM => :NEW.VALID_FROM,', 'line_no': 238}, {'indent': 20, 'line': "                    P_ACTION_TYPE => 'UPDATE'", 'line_no': 239}, {'indent': 16, 'line': '                );', 'line_no': 240}]
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 16, 'line': '                MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(', 'line_no': 223}
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 223
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 240
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,552 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS( P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE' );
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 5
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_line_no': 246, 'then_line_no': 246, 'if_indent': 8, 'end_if_line_no': 248, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}]
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_line_no': 247, 'statement_indent': 12}]
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 1
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');", 'line_no': 250}
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');
2025-08-28 06:26:51,553 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 250
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 250
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS(P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE');
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: []
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '", 'line_no': 254}, {'indent': 41, 'line': '                                         ||:OLD.ADDRESS_TYPE_CD', 'line_no': 255}, {'indent': 41, 'line': "                                         ||' New address type: '", 'line_no': 256}, {'indent': 41, 'line': '                                         ||:NEW.ADDRESS_TYPE_CD);', 'line_no': 257}]
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: '", 'line_no': 254}
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20111, 'THE ADDRESS CANNOT BE UPDATED BECAUSE THE ADDRESS TYPE IS DIFFERENT. OLD ADDRESS TYPE: '
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 254
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 257
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' ||:OLD.ADDRESS_TYPE_CD ||' New address type: ' ||:NEW.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20111, 'The address cannot be updated because the Address type is different. Old address type: ' ||:OLD.ADDRESS_TYPE_CD ||' New address type: ' ||:NEW.ADDRESS_TYPE_CD);
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 260}]
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');", 'line_no': 260}
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20112, 'AN ADDRESS ALREADY EXISTS FOR THIS COMPANY AND ADDRESS TYPE. TO MODIFY THE EXISTING ADDRESS, PLEASE USE THE UPDATE BUTTON.');
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 260
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 260
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20112, 'An address already exists for this Company and Address type. To modify the existing address, please use the Update button.');
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 262}]
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');", 'line_no': 262}
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'THE COMPANY COUNTRY MODIFIED BUT NOT THE VALID FROM DATE. PLEASE UPDATE ALSO THE VALID FROM DATE.');
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 262
2025-08-28 06:26:51,554 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 262
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'The company country modified but not the Valid From Date. Please update also the Valid From Date.');
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: '", 'line_no': 264}, {'indent': 41, 'line': '                                         ||:NEW.COMPANY_CD', 'line_no': 265}, {'indent': 41, 'line': "                                         ||' Old:'", 'line_no': 266}, {'indent': 41, 'line': '                                         ||:OLD.COMPANY_CD', 'line_no': 267}, {'indent': 41, 'line': "                                         ||'Count: '", 'line_no': 268}, {'indent': 41, 'line': '                                         ||CNTR);', 'line_no': 269}]
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'New: '", 'line_no': 264}
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'NEW: '
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 264
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:674] - function calling end: 269
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:2116] - RAISE_APPLICATION_ERROR (-20113, 'New: ' ||:NEW.COMPANY_CD ||' Old:' ||:OLD.COMPANY_CD ||'Count: ' ||CNTR);
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'New: ' ||:NEW.COMPANY_CD ||' Old:' ||:OLD.COMPANY_CD ||'Count: ' ||CNTR);
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 271}]
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');", 'line_no': 271}
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'THE LEGAL ADDRESS CANNOT BE INSERTED FOR THIS TYPE OF COMPANY');
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 271
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 271
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'The legal address cannot be inserted for this type of company');
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:647] - working_lines: [{'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 273}]
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:651] - i: 0
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:654] - item: {'indent': 8, 'line': "        RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');", 'line_no': 273}
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:663] - item: RAISE_APPLICATION_ERROR (-20113, 'IT IS NOT ALLOWED TO INVALIDATE/DELETE THIS TYPE OF ADDRESS');
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:664] - function calling start: 273
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:666] - function calling end: 273
2025-08-28 06:26:51,555 - root - DEBUG - [OracleTriggerAnalyzer.py:1798] - combined_line: RAISE_APPLICATION_ERROR (-20113, 'It is not allowed to invalidate/delete this type of address');
2025-08-28 06:26:51,556 - root - DEBUG - [OracleTriggerAnalyzer.py:96] - SQL section parsing
2025-08-28 06:26:51,556 - root - DEBUG - [OracleTriggerAnalyzer.py:99] - OracleTriggerAnalyzer initialization 0.043666839599609375 seconds
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - OracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - Generating JSON analysis...
2025-08-28 06:26:51,556 - root - DEBUG - [OracleTriggerAnalyzer.py:2209] - JSON conversion complete: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - JSON analysis generated successfully
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - Generated JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - Analysis statistics: 6 vars, 0 consts, 6 excs, 17 comments
2025-08-28 06:26:51,556 - root - DEBUG - [common.py:105] - Writing analysis JSON to: files/format_json\zzz_analysis.json
2025-08-28 06:26:51,558 - root - DEBUG - [common.py:105] - Successfully wrote analysis JSON to files/format_json\zzz_analysis.json
2025-08-28 06:26:51,558 - root - DEBUG - [common.py:105] - === SQL to JSON processing complete for trigger zzz.sql ===
2025-08-28 06:26:51,558 - root - DEBUG - [common.py:105] - âœ“ Created zzz_analysis.json
2025-08-28 06:26:51,558 - root - INFO - [common.py:110] - === File processing complete ===
2025-08-28 06:26:51,558 - root - INFO - [common.py:110] - Successfully processed: 8 files
2025-08-28 06:26:51,558 - root - INFO - [common.py:110] - === Oracle triggers to JSON conversion complete ===
2025-08-28 06:26:51,558 - root - DEBUG - [common.py:105] - Phase 1 complete: Oracle SQL files converted to JSON analysis structure
2025-08-28 06:26:51,558 - root - INFO - [common.py:110] - âœ“ JSON conversion complete! (Duration: 0.34 seconds)
2025-08-28 06:26:51,559 - root - DEBUG - [common.py:105] - Step 1 completed in 0.34 seconds
2025-08-28 06:26:51,559 - root - INFO - [common.py:110] - Step 2: Converting JSON analysis back to formatted SQL...
2025-08-28 06:26:51,559 - root - DEBUG - [common.py:105] - Starting Step 2: JSON analysis â†’ formatted Oracle SQL
2025-08-28 06:26:51,559 - root - INFO - [common.py:110] - === Starting JSON analysis to formatted Oracle SQL conversion ===
2025-08-28 06:26:51,559 - root - INFO - [common.py:110] - === Starting file processing ===
2025-08-28 06:26:51,559 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-08-28 06:26:51,560 - root - INFO - [common.py:110] - Target directory: 'files/format_sql'
2025-08-28 06:26:51,560 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-08-28 06:26:51,560 - root - INFO - [common.py:110] - Output suffix: '.sql'
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - Directory already exists: files/format_sql
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - Found 8 files in source directory
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - === Processing file 1/8: trigger1_analysis.json ===
2025-08-28 06:26:51,560 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger1_analysis.sql
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger1_analysis.json ===
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-08-28 06:26:51,561 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - JSON contains 188 total statements
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,561 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,561 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Analysis contains 29 variables, 2 constants, 18 exceptions
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 29 variables
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:199] - Rendering 2 constants
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 18 exceptions
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Generated 50 lines of declarations
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,562 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 19 statements in main block
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,562 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: begin_end
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 1 statements in main block
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 1 exception handlers
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,563 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,564 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,565 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,566 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,567 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: begin_end
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 1 statements in main block
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 1 exception handlers
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,568 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'RAISE INVALID_MOLECULE_ID;...'
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 18 exception handlers
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,568 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,569 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Generated 257 lines in main execution block
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Main block rendering took 0.007s
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Final SQL contains 313 lines, 19749 characters
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Oracle SQL generation: 313 lines generated in 0.008s
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - Rendered SQL length: 19749 characters
2025-08-28 06:26:51,569 - root - DEBUG - [common.py:105] - SQL rendering took: 0.008 seconds
2025-08-28 06:26:51,570 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger1_analysis.sql
2025-08-28 06:26:51,570 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger1_analysis.sql
2025-08-28 06:26:51,570 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger1_analysis.json ===
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - âœ“ Created trigger1_analysis.sql
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - === Processing file 2/8: trigger2_analysis.json ===
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger2_analysis.sql
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger2_analysis.json ===
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-08-28 06:26:51,571 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,571 - root - DEBUG - [common.py:105] - JSON contains 69 total statements
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 7 exceptions
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 6 variables
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 7 exceptions
2025-08-28 06:26:51,572 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Generated 14 lines of declarations
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,572 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 5 statements in main block
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,573 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,574 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-08-28 06:26:51,574 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'UPDATE THEME_MOLECULE_MAP TMM ...'
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,575 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'INSERT INTO THEME_MOLECULE_MAP...'
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 5 exception handlers
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,575 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,576 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Generated 101 lines in main execution block
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Main block rendering took 0.003s
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Final SQL contains 121 lines, 8276 characters
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Oracle SQL generation: 121 lines generated in 0.004s
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Rendered SQL length: 8276 characters
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - SQL rendering took: 0.004 seconds
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger2_analysis.sql
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger2_analysis.sql
2025-08-28 06:26:51,576 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger2_analysis.json ===
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - âœ“ Created trigger2_analysis.sql
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - === Processing file 3/8: trigger3_analysis.json ===
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger3_analysis.sql
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger3_analysis.json ===
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-08-28 06:26:51,577 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - JSON contains 52 total statements
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,577 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,577 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,577 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 6 variables
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 6 exceptions
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Generated 13 lines of declarations
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,578 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 6 statements in main block
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: begin_end
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 1 statements in main block
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 1 exception handlers
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,578 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (TO_CHAR(:NEW.VALID_FROM, ...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  (V_COMPANY_TYPE_CD = 'L') ...'
2025-08-28 06:26:51,579 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: for_loop
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-08-28 06:26:51,579 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 6 exception handlers
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,580 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Generated 76 lines in main execution block
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Final SQL contains 95 lines, 7445 characters
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Oracle SQL generation: 95 lines generated in 0.003s
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - Rendered SQL length: 7445 characters
2025-08-28 06:26:51,580 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger3_analysis.sql
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger3_analysis.sql
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger3_analysis.json ===
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - âœ“ Created trigger3_analysis.sql
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - === Processing file 4/8: trigger4_analysis.json ===
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger4_analysis.sql
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger4_analysis.json ===
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-08-28 06:26:51,581 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,581 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - JSON contains 9 total statements
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 6 variables
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Generated 7 lines of declarations
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,582 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 6 statements in main block
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,582 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: 
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - WARNING - [FORMATOracleTriggerAnalyzer.py:584] - Unknown statement type: unknown
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: return_statement
2025-08-28 06:26:51,583 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - Generated 12 lines in main execution block
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - Final SQL contains 25 lines, 3946 characters
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - Oracle SQL generation: 25 lines generated in 0.002s
2025-08-28 06:26:51,583 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Rendered SQL length: 3946 characters
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - SQL rendering took: 0.002 seconds
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger4_analysis.sql
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger4_analysis.sql
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger4_analysis.json ===
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - âœ“ Created trigger4_analysis.sql
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - === Processing file 5/8: trigger5_analysis.json ===
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger5_analysis.sql
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger5_analysis.json ===
2025-08-28 06:26:51,584 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-08-28 06:26:51,585 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - JSON contains 12 total statements
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Analysis contains 2 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 2 variables
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Generated 3 lines of declarations
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,585 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 4 statements in main block
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,585 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - WARNING - [FORMATOracleTriggerAnalyzer.py:279] - Found string statement instead of dict: CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( ...
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: return_statement
2025-08-28 06:26:51,586 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - Generated 18 lines in main execution block
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - Final SQL contains 27 lines, 1255 characters
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - Oracle SQL generation: 27 lines generated in 0.001s
2025-08-28 06:26:51,586 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Rendered SQL length: 1255 characters
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - SQL rendering took: 0.001 seconds
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger5_analysis.sql
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger5_analysis.sql
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger5_analysis.json ===
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - âœ“ Created trigger5_analysis.sql
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - === Processing file 6/8: trigger6_analysis.json ===
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger6_analysis.json
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Output path: files/format_sql\trigger6_analysis.sql
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger trigger6_analysis.json ===
2025-08-28 06:26:51,587 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger6_analysis.json
2025-08-28 06:26:51,588 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - JSON contains 23 total statements
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 4 exceptions
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 6 variables
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 4 exceptions
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Generated 11 lines of declarations
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,588 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 6 statements in main block
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,588 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: insert_statement
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 4 exception handlers
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,589 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Generated 31 lines in main execution block
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Main block rendering took 0.001s
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Final SQL contains 48 lines, 2466 characters
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Oracle SQL generation: 48 lines generated in 0.001s
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Rendered SQL length: 2466 characters
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - SQL rendering took: 0.001 seconds
2025-08-28 06:26:51,589 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\trigger6_analysis.sql
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\trigger6_analysis.sql
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger trigger6_analysis.json ===
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - âœ“ Created trigger6_analysis.sql
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - === Processing file 7/8: yyy_analysis.json ===
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - Source path: files/format_json\yyy_analysis.json
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - Output path: files/format_sql\yyy_analysis.sql
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger yyy_analysis.json ===
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\yyy_analysis.json
2025-08-28 06:26:51,590 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,590 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - JSON contains 91 total statements
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Analysis contains 9 variables, 1 constants, 11 exceptions
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 9 variables
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:199] - Rendering 1 constants
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 11 exceptions
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Generated 22 lines of declarations
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,591 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 4 statements in main block
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: begin_end
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 1 statements in main block
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 1 exception handlers
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,591 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,592 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: update_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,593 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: case_when
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: null_statement
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 11 exception handlers
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,594 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,595 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,595 - root - DEBUG - [common.py:105] - Generated 122 lines in main execution block
2025-08-28 06:26:51,595 - root - DEBUG - [common.py:105] - Main block rendering took 0.004s
2025-08-28 06:26:51,595 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,595 - root - DEBUG - [common.py:105] - Final SQL contains 150 lines, 10482 characters
2025-08-28 06:26:51,595 - root - DEBUG - [common.py:105] - Oracle SQL generation: 150 lines generated in 0.005s
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - Rendered SQL length: 10482 characters
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - SQL rendering took: 0.005 seconds
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\yyy_analysis.sql
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\yyy_analysis.sql
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger yyy_analysis.json ===
2025-08-28 06:26:51,596 - root - DEBUG - [common.py:105] - âœ“ Created yyy_analysis.sql
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - === Processing file 8/8: zzz_analysis.json ===
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Source path: files/format_json\zzz_analysis.json
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Output path: files/format_sql\zzz_analysis.sql
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - === JSON to SQL processing for trigger zzz_analysis.json ===
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\zzz_analysis.json
2025-08-28 06:26:51,597 - root - DEBUG - [main.py:359] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Validating JSON structure...
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - JSON contains 52 total statements
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - JSON validation passed
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Creating FORMATOracleTriggerAnalyzer instance...
2025-08-28 06:26:51,597 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:99] - FORMATOracleTriggerAnalyzer initialized successfully
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - FORMATOracleTriggerAnalyzer created successfully
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Rendering SQL from analysis...
2025-08-28 06:26:51,597 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:118] - Oracle SQL generation Converting JSON analysis to formatted SQL
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Analysis contains 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Adding header comments with timestamp
2025-08-28 06:26:51,597 - root - DEBUG - [common.py:105] - Starting declarations section rendering
2025-08-28 06:26:51,597 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:174] - === Rendering Oracle declarations ===
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:183] - Rendering 6 variables
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:211] - Rendering 6 exceptions
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:217] - === Oracle declarations complete ===
2025-08-28 06:26:51,598 - root - DEBUG - [common.py:105] - Generated 13 lines of declarations
2025-08-28 06:26:51,598 - root - DEBUG - [common.py:105] - Declarations rendering took 0.000s
2025-08-28 06:26:51,598 - root - DEBUG - [common.py:105] - Starting main execution block rendering
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 6 statements in main block
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: begin_end
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:235] - === Rendering main block ===
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:244] - Processing 1 statements in main block
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 1 exception handlers
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,598 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: select_statement
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'SELECT COUNTRY_CD INTO V_COUNT...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  TO_CHAR(:NEW.VALID_FROM, '...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'ELSE...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: assignment
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'V_VALID_FROM := TO_DATE(ADD_MO...'
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'MDM_UTIL_COMPANIES.MODIFYCOMPA...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'IF  V_COMPANY_TYPE_CD = 'L'  T...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: for_loop
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'FOR V_REC IN ( FOR V_REC IN ( ...'
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 7): 'END LOOP;...'
2025-08-28 06:26:51,599 - root - DEBUG - [common.py:105] - Deep nesting detected (level 6): 'END IF;...'
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,599 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: if_else
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: raise_statement
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:251] - Processing 6 exception handlers
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:289] - Rendering statement type: function_calling
2025-08-28 06:26:51,600 - utilities.FORMATOracleTriggerAnalyzer - DEBUG - [FORMATOracleTriggerAnalyzer.py:260] - === Main block complete ===
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Generated 76 lines in main execution block
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Main block rendering took 0.002s
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Adding footer comments
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Final SQL contains 95 lines, 7407 characters
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Oracle SQL generation: 95 lines generated in 0.003s
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - SQL rendering completed successfully
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - Rendered SQL length: 7407 characters
2025-08-28 06:26:51,600 - root - DEBUG - [common.py:105] - SQL rendering took: 0.003 seconds
2025-08-28 06:26:51,601 - root - DEBUG - [common.py:105] - Writing formatted SQL to: files/format_sql\zzz_analysis.sql
2025-08-28 06:26:51,601 - root - DEBUG - [common.py:105] - Successfully wrote formatted SQL to files/format_sql\zzz_analysis.sql
2025-08-28 06:26:51,601 - root - DEBUG - [common.py:105] - === JSON to SQL processing complete for trigger zzz_analysis.json ===
2025-08-28 06:26:51,601 - root - DEBUG - [common.py:105] - âœ“ Created zzz_analysis.sql
2025-08-28 06:26:51,601 - root - INFO - [common.py:110] - === File processing complete ===
2025-08-28 06:26:51,601 - root - INFO - [common.py:110] - Successfully processed: 8 files
2025-08-28 06:26:51,601 - root - INFO - [common.py:110] - === Starting comparison with original files ===
2025-08-28 06:26:51,603 - root - DEBUG - [common.py:105] - Comparison complete for trigger1.sql: 870 original, 313 generated lines
2025-08-28 06:26:51,603 - root - DEBUG - [common.py:105] - Comparison complete for trigger2.sql: 465 original, 121 generated lines
2025-08-28 06:26:51,604 - root - DEBUG - [common.py:105] - Comparison complete for trigger3.sql: 265 original, 95 generated lines
2025-08-28 06:26:51,604 - root - DEBUG - [common.py:105] - Comparison complete for trigger4.sql: 23 original, 25 generated lines
2025-08-28 06:26:51,605 - root - DEBUG - [common.py:105] - Comparison complete for trigger5.sql: 36 original, 27 generated lines
2025-08-28 06:26:51,605 - root - DEBUG - [common.py:105] - Comparison complete for trigger6.sql: 89 original, 48 generated lines
2025-08-28 06:26:51,605 - root - DEBUG - [common.py:105] - Comparison complete for yyy.sql: 369 original, 150 generated lines
2025-08-28 06:26:51,606 - root - DEBUG - [common.py:105] - Comparison complete for zzz.sql: 274 original, 95 generated lines
2025-08-28 06:26:51,606 - root - INFO - [common.py:110] - === Conversion Statistics ===
2025-08-28 06:26:51,606 - root - INFO - [common.py:110] - Total files processed: 8
2025-08-28 06:26:51,606 - root - INFO - [common.py:110] - Successful conversions: 1
2025-08-28 06:26:51,606 - root - INFO - [common.py:110] - Failed conversions: 0
2025-08-28 06:26:51,607 - root - INFO - [common.py:110] - Files with validation warnings: 7
2025-08-28 06:26:51,607 - root - INFO - [common.py:110] - === Comparison Results ===
2025-08-28 06:26:51,607 - root - WARNING - [common.py:115] - File trigger1.sql: Significant line count difference: 61.3%
2025-08-28 06:26:51,607 - root - WARNING - [common.py:115] - File trigger2.sql: Significant line count difference: 72.0%
2025-08-28 06:26:51,607 - root - WARNING - [common.py:115] - File trigger3.sql: Significant line count difference: 62.3%
2025-08-28 06:26:51,608 - root - INFO - [common.py:110] - File trigger4.sql: Conversion successful
2025-08-28 06:26:51,608 - root - WARNING - [common.py:115] - File trigger5.sql: Significant line count difference: 29.4%
2025-08-28 06:26:51,608 - root - WARNING - [common.py:115] - File trigger6.sql: Significant line count difference: 44.4%
2025-08-28 06:26:51,608 - root - WARNING - [common.py:115] - File yyy.sql: Significant line count difference: 56.0%
2025-08-28 06:26:51,608 - root - WARNING - [common.py:115] - File zzz.sql: Significant line count difference: 63.6%
2025-08-28 06:26:51,609 - root - INFO - [common.py:110] - === JSON analysis to formatted Oracle SQL conversion complete ===
2025-08-28 06:26:51,609 - root - INFO - [common.py:110] - âœ“ SQL formatting complete! (Duration: 0.05 seconds)
2025-08-28 06:26:51,609 - root - DEBUG - [common.py:105] - Step 2 completed in 0.05 seconds
2025-08-28 06:26:51,609 - root - INFO - [common.py:110] - Step 3: Cleaning JSON files...
2025-08-28 06:26:51,609 - root - DEBUG - [common.py:105] - Starting Step 3: Cleaning and optimizing JSON files
2025-08-28 06:26:51,609 - root - DEBUG - [common.py:105] - Starting JSON cleaning process in directory: files/format_json
2025-08-28 06:26:51,609 - root - DEBUG - [common.py:105] - Found 8 JSON files to clean
2025-08-28 06:26:51,610 - root - DEBUG - [common.py:105] - Processing file: trigger1_analysis.json
2025-08-28 06:26:51,611 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (49922 bytes)
2025-08-28 06:26:51,611 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,615 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger1_analysis.json
2025-08-28 06:26:51,615 - root - DEBUG - [common.py:105] - Processing file: trigger2_analysis.json
2025-08-28 06:26:51,616 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (23200 bytes)
2025-08-28 06:26:51,617 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,619 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger2_analysis.json
2025-08-28 06:26:51,619 - root - DEBUG - [common.py:105] - Processing file: trigger3_analysis.json
2025-08-28 06:26:51,620 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (20431 bytes)
2025-08-28 06:26:51,620 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,621 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger3_analysis.json
2025-08-28 06:26:51,621 - root - DEBUG - [common.py:105] - Processing file: trigger4_analysis.json
2025-08-28 06:26:51,622 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (6365 bytes)
2025-08-28 06:26:51,622 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,623 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger4_analysis.json
2025-08-28 06:26:51,623 - root - DEBUG - [common.py:105] - Processing file: trigger5_analysis.json
2025-08-28 06:26:51,624 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (3373 bytes)
2025-08-28 06:26:51,624 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,625 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger5_analysis.json
2025-08-28 06:26:51,625 - root - DEBUG - [common.py:105] - Processing file: trigger6_analysis.json
2025-08-28 06:26:51,625 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (7007 bytes)
2025-08-28 06:26:51,625 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,627 - root - DEBUG - [common.py:358] - âœ… Cleaned trigger6_analysis.json
2025-08-28 06:26:51,627 - root - DEBUG - [common.py:105] - Processing file: yyy_analysis.json
2025-08-28 06:26:51,628 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (28705 bytes)
2025-08-28 06:26:51,628 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,630 - root - DEBUG - [common.py:358] - âœ… Cleaned yyy_analysis.json
2025-08-28 06:26:51,630 - root - DEBUG - [common.py:105] - Processing file: zzz_analysis.json
2025-08-28 06:26:51,631 - root - DEBUG - [common.py:105] - Successfully loaded JSON data (20385 bytes)
2025-08-28 06:26:51,631 - root - DEBUG - [common.py:105] - Cleaned JSON data in 0.000 seconds
2025-08-28 06:26:51,633 - root - DEBUG - [common.py:358] - âœ… Cleaned zzz_analysis.json
2025-08-28 06:26:51,634 - root - INFO - [common.py:110] - JSON cleaning complete: 8 files cleaned, 0 errors
2025-08-28 06:26:51,634 - root - INFO - [common.py:110] - âœ“ JSON cleaning complete! (Duration: 0.02 seconds)
2025-08-28 06:26:51,634 - root - DEBUG - [common.py:105] - Step 3 completed in 0.02 seconds
2025-08-28 06:26:51,634 - root - INFO - [common.py:110] - Step 5: Converting JSON to PL/JSON...
2025-08-28 06:26:51,635 - root - DEBUG - [common.py:105] - Starting Step 5: JSON â†’ PostgreSQL-compatible PL/JSON
2025-08-28 06:26:51,636 - root - DEBUG - [common.py:105] - processing trigger1_analysis.json
2025-08-28 06:26:51,636 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,636 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,639 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,639 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,639 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-08-28 06:26:51,639 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,640 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,640 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,640 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,641 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,642 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,643 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,644 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,645 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,646 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,647 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,648 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,649 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,650 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,651 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,652 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,653 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,654 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,655 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,656 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,657 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,658 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,659 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,660 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,661 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,662 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,663 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,664 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,665 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,666 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,667 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,669 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,670 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,671 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,672 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,673 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,674 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,675 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,676 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,677 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,678 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,679 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,680 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,681 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,682 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,683 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,684 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,685 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,686 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,687 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,688 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,689 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,690 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,691 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,692 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,693 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,694 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,695 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,696 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,697 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,698 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,699 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,700 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,701 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,702 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,703 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,705 - root - DEBUG - [common.py:105] - Generated JSON string with 194828 characters
2025-08-28 06:26:51,705 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,705 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,705 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,708 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,708 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,708 - root - DEBUG - [common.py:105] -   - Declarations: 29 variables, 2 constants, 18 exceptions
2025-08-28 06:26:51,708 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,708 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT NVL(TXO_SECURITY.GET_USERID, USER) INTO V_USERID FROM DUAL;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_IS_ADMIN_CNT FROM TXO_USERS_ROLES_MAP WHERE ROLE_ID IN (315) AND USERID = V_USERID;', 'statement_indent': 3}, {'type': 'select_statement', 'sql_statement': 'SELECT NEW_RG_NO INTO V_NEW_RG_NO FROM ( SELECT NEW_RG_NO FROM ( SELECT ROWNUM AS NEW_RG_NO FROM DUAL CONNECT BY 1 = 1 AND ROWNUM <= 6999 ) WHERE NEW_RG_NO > 5999 MINUS SELECT TO_NUMBER(RG_NO) FROM V_THEME_MOLECULES ) WHERE ROWNUM = 1;', 'statement_indent': 3}, {'condition': " (:NEW.IN_PREP_IND = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.PORTF_PROJ_CD <> 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_PORTF_PROJ;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE IN_PREP_NOT_CLOSED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'function_calling', 'function_name': 'TXO_UTIL.SET_WARNING', 'parameters': {'parameter_type': 'positional', 'positional_params': ["'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"], 'named_params': {}, 'raw_text': "'No Molecule assigned to In-Prep Theme ' || :NEW.THEME_NO || '!'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'begin_end', 'begin_indent': 6, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT RG_NO, M.COMPARATOR_IND INTO V_MOLECULE_RG_NO, V_COMPARATOR_IND FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 9}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 9, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 12}]}]}, {'condition': ' (V_MOLECULE_RG_NO IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': " (V_COMPARATOR_IND = 'Y') ", 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE V_THEME_MOLECULES SET RG_NO = V_NEW_RG_NO WHERE MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 12}, {'type': 'assignment', 'variable_name': 'v_bonus', 'assignment_operator': ':=', 'expression': 'CASE WHEN :NEW.salary > 50000 THEN :NEW.salary * 0.1 ELSE 0 END;', 'assignment_indent': 12}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_ODG_NO', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 1, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESGRP_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 4, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_CD', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 7, 2);', 'assignment_indent': 3}, {'type': 'assignment', 'variable_name': 'V_RESLIN_DESC', 'assignment_operator': ':=', 'expression': 'SUBSTR(:NEW.RESLIN_DESC_CONCAT, 12, LENGTH(:NEW.RESLIN_DESC_CONCAT));', 'assignment_indent': 3}, {'condition': ' (:NEW.STATUS_DESC IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT STATUS_CD INTO V_STATUS_CD FROM MDM_V_THEME_STATUS WHERE STATE_DESC = :NEW.STATUS_DESC;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_STATUS_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'condition': ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT DBA_CD INTO V_DBA_CD FROM MDM_V_DISEASE_BIOLOGY_AREAS WHERE DBA_SHORT_DESC || ' - ' || DBA_DESC = :NEW.DBA_DESC_CONCAT;", 'statement_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DBA_CD', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_MOLEC_IN_LIC_PRTNR', 'assignment_operator': ':=', 'expression': 'GMD_UTIL_THEMES.GET_MOLEC_IN_LIC_PRTNR(:NEW.MOLECULE_ID);', 'assignment_indent': 3}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':NEW.TRADEMARK_NO;', 'assignment_indent': 6}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_TRADEMARK_NO', 'assignment_operator': ':=', 'expression': ':OLD.TRADEMARK_NO;', 'assignment_indent': 6}]}, {'type': 'assignment', 'variable_name': 'V_THEME_DESC_PROPOSAL', 'assignment_operator': ':=', 'expression': "GMD_UTIL_THEMES.GET_THEME_SHORT_NAME(P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => NULL, P_TRADEMARK_NO_PORTF => V_TRADEMARK_NO, P_TRUNC_DESC_LENGTH => 'N');", 'assignment_indent': 3}, {'condition': ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_PROPOSAL_TOO_LONG;', 'statement_indent': 6}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'COALESCE(:NEW.MANUAL_SHORT_DESC, V_THEME_DESC_PROPOSAL);', 'assignment_indent': 3}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': " (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_MOLECULE_ID', 'assignment_operator': ':=', 'expression': ':NEW.MOLECULE_ID;', 'assignment_indent': 6}, {'condition': " (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE PORTF_PROJ_MOL_CRE_ERR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULES_MTN( MOLECULE_DESC, VALID_IND, RG_NO, CANCER_IMMUNOTHERAPY_IND, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID ) VALUES ( NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL), 'Y', V_NEW_RG_NO, 'N', C_MOLECULE_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID );", 'statement_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT MOLECULE_ID INTO V_MOLECULE_ID FROM V_THEME_MOLECULES WHERE MOLECULE_DESC = NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) AND VALID_IND = 'Y' AND RG_NO = V_NEW_RG_NO AND CANCER_IMMUNOTHERAPY_IND = 'N' AND MOLECULE_TYPE_ID = C_MOLECULE_TYPE_ID AND PHARMACOLOGICAL_TYPE_ID = C_PHARMACOLOGICAL_TYPE_ID;", 'statement_indent': 12}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMMAP( TMMAP.THEME_NO, TMMAP.MOLECULE_ID, TMMAP.MOLECULE_SEQ_NO, TMMAP.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' LENGTH(:NEW.THEME_NO)', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': '4', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': '5', 'then_statements': [{'condition': ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_THEME_NO;', 'statement_indent': 12}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM ( SELECT THEME_NO FROM V_THEMES UNION ALL SELECT THEME_NO FROM GMD.THEMES_ARCHIVE )                  T WHERE T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_CANNOT_BE_INSERTED;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INSERTSMUSTBEOFFICIAL;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => NULL, P_MOLECULE_ID_PORTF => V_MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'N';", 'assignment_indent': 9}]}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_VALID_TO', 'assignment_operator': ':=', 'expression': "TO_DATE('09.09.9999', 'DD.MM.YYYY');", 'assignment_indent': 6}, {'type': 'assignment', 'variable_name': 'V_SHORT_NAME', 'assignment_operator': ':=', 'expression': 'NVL(:NEW.MANUAL_SHORT_DESC, SUBSTR(V_DESCRIPTION, 1, 30));', 'assignment_indent': 6}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO GMD.THEMES( THEME_NO, REGISTRAT_DATE, ODG_NO, RESGRP_CD, RESLIN_CD, THEME_DESC, SHORT_NAME, STATUS_CD, DBA_CD, IN_PREP_IND, PROD_SHORT_CD, TRADEMARK_NO, BIO_ACTIVITY, APPLICANT, CONTACT, REGISTRAR, LINE_EXT_INFO, PORTF_PROJ_CD, CO_DEV_PRTNR, TECHNOLOGY_PRTNR, OFFICIAL_IND, CO_MAR_PRTNR, VALID_TO, PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC ) VALUES ( :NEW.THEME_NO, V_D_REGISTRAT_DATE, V_ODG_NO, V_RESGRP_CD, V_RESLIN_CD, V_DESCRIPTION, V_SHORT_NAME, V_STATUS_CD, V_DBA_CD, :NEW.IN_PREP_IND, :NEW.PROD_SHORT_CD, :NEW.TRADEMARK_NO, :NEW.BIO_ACTIVITY, :NEW.APPLICANT, :NEW.CONTACT, TXO_UTIL.GET_USERID, :NEW.LINE_EXT_INFO, V_PORTF_PROJ_CD, :NEW.CO_DEV_PRTNR, :NEW.TECHNOLOGY_PRTNR, :NEW.OFFICIAL_IND, :NEW.CO_MAR_PRTNR, V_VALID_TO, :NEW.PORTF_DA_GROUP_ID, :NEW.MANUAL_SHORT_DESC );', 'statement_indent': 6}, {'condition': ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, V_MOLECULE_ID, 1, 'Y' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 3, 'condition': '(UPDATING)', 'then_statements': [{'condition': " (:OLD.IN_PREP_IND = 'N' OR (:OLD.IN_PREP_IND = 'Y' AND :NEW.IN_PREP_IND = 'N')) AND V_IS_ADMIN_CNT = 0 ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ADMIN_UPDATE_ONLY;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.THEME_NO <> :OLD.THEME_NO) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_NO_ONLY_INSERT;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': "TO_DATE(:OLD.REGISTRAT_DATE, 'dd-mm-yyyy');", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_D_REGISTRAT_DATE', 'assignment_operator': ':=', 'expression': 'SYSDATE;', 'assignment_indent': 9}]}, {'condition': " (UPPER(:NEW.PORTF_PROJ_CD) = 'Y' AND(V_STATUS_CD <> 'C' OR:NEW.IN_PREP_IND = 'Y')) UPPER(:NEW.PORTF_PROJ_CD) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': "GMD.GMD_UTIL_THEMES.GET_THEME_DESC_PORTFOLIO( P_THEME_NO_PORTF => :NEW.THEME_NO, P_MOLECULE_ID_PORTF => :NEW.MOLECULE_ID, P_PROD_SHORT_CD_PORTF => :NEW.PROD_SHORT_CD, P_ODG_NO_PORT => V_ODG_NO, P_RESGRP_CD_PORT => V_RESGRP_CD, P_RESLIN_CD_PORT => V_RESLIN_CD, P_LINE_EXT_INFO_PORT => :NEW.LINE_EXT_INFO, P_IN_LIC_PRTNR_PORTF => V_MOLEC_IN_LIC_PRTNR, P_TRADEMARK_NO_PORTF => :NEW.TRADEMARK_NO, P_SHORT_NAME_PORTF => :NEW.SHORT_NAME, P_TRUNC_DESC_LENGTH => 'N' );", 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': 'TRIM(V_DESCRIPTION);', 'assignment_indent': 9}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': "'Y';", 'assignment_indent': 9}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEMEDESCRIPTIONMANDATORY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_DESCRIPTION', 'assignment_operator': ':=', 'expression': ':NEW.THEME_DESC;', 'assignment_indent': 12}, {'type': 'assignment', 'variable_name': 'V_PORTF_PROJ_CD', 'assignment_operator': ':=', 'expression': ':NEW.PORTF_PROJ_CD;', 'assignment_indent': 12}]}]}, {'condition': ' (LENGTH(V_DESCRIPTION) > 90) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE DESCRIPTION_TOO_LONG;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(T.THEME_NO) INTO V_COUNTER FROM V_THEMES T WHERE T.THEME_DESC = V_DESCRIPTION AND T.THEME_NO <> :NEW.THEME_NO;', 'statement_indent': 6}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE THEME_DESC_NOT_UNIQUE;', 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 6}, {'condition': " (:NEW.OFFICIAL_IND = 'N') ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO AND TO_DATE(REGISTRAT_DATE, 'DD-MM-YYYY') = V_D_REGISTRAT_DATE;", 'statement_indent': 9}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT(*) INTO V_COUNTER FROM V_THEMES T WHERE TRUNC(T.REGISTRAT_DATE) = TRUNC(SYSDATE) AND T.THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}, {'condition': ' (V_COUNTER > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ONLYONEOFFICIALCHANGEPERDAY;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'V_COUNTER', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 9}, {'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEMES SET ODG_NO = V_ODG_NO, RESGRP_CD = V_RESGRP_CD, RESLIN_CD = V_RESLIN_CD, THEME_DESC = V_DESCRIPTION, SHORT_NAME = V_SHORT_NAME, STATUS_CD = V_STATUS_CD, DBA_CD = V_DBA_CD, IN_PREP_IND = :NEW.IN_PREP_IND, PROD_SHORT_CD = :NEW.PROD_SHORT_CD, TRADEMARK_NO = :NEW.TRADEMARK_NO, BIO_ACTIVITY = :NEW.BIO_ACTIVITY, APPLICANT = :NEW.APPLICANT, CONTACT = :NEW.CONTACT, LINE_EXT_INFO = :NEW.LINE_EXT_INFO, PORTF_PROJ_CD = V_PORTF_PROJ_CD, CO_DEV_PRTNR = :NEW.CO_DEV_PRTNR, TECHNOLOGY_PRTNR = :NEW.TECHNOLOGY_PRTNR, OFFICIAL_IND = :NEW.OFFICIAL_IND, CO_MAR_PRTNR = :NEW.CO_MAR_PRTNR, REGISTRAT_DATE = SYSDATE, REGISTRAR = V_USERID, PORTF_DA_GROUP_ID = :NEW.PORTF_DA_GROUP_ID, MANUAL_SHORT_DESC = :NEW.MANUAL_SHORT_DESC WHERE THEME_NO = :NEW.THEME_NO;', 'statement_indent': 9}]}, {'condition': '', 'type': 'case_when', 'case_indent': 6, 'when_clauses': [{'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_THEME_MOLECULE_MAP_MTN A( A.THEME_NO, A.MOLECULE_ID, A.MOLECULE_SEQ_NO, A.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, 1, 'Y' );", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NOT NULL', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.MOLECULE_ID = :NEW.MOLECULE_ID, A.VALID_IND = 'Y' WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}]}, {'type': 'when_statement', 'when_indent': 9, 'condition': ':OLD.MOLECULE_ID IS NOT NULL AND :NEW.MOLECULE_ID IS NULL', 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_SEC_MOL_CNT FROM MDM_V_THEME_MOLECULE_MAP_MTN A WHERE A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO > 1 AND A.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_SEC_MOL_CNT > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE SEC_MOL_LIST_NOT_EMPTY;', 'statement_indent': 15}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_THEME_MOLECULE_MAP A SET A.VALID_IND = 'N' WHERE A.MOLECULE_ID = :OLD.MOLECULE_ID AND A.THEME_NO = :NEW.THEME_NO AND A.MOLECULE_SEQ_NO = 1 AND A.VALID_IND = 'Y';", 'statement_indent': 15}]}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 12}]}]}], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT = 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 12}], 'if_elses': [], 'else_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'A', EVOLVED_THEME_NO = NULL WHERE PROPOSAL_ID = :OLD.PROPOSAL_ID;", 'statement_indent': 15}, {'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN SET PROPOSAL_STATUS_CD = 'E', EVOLVED_THEME_NO = :NEW.THEME_NO, PROPOSAL_NAME = V_SHORT_NAME, REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID;", 'statement_indent': 15}], 'if_elses': [], 'else_statements': []}]}]}, {'condition': " (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) ", 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}, {'condition': ' (V_EVOLVED_NMP_CNT > 0) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE MDM_V_NEW_MEDICINE_PROPOSALS_MTN NMP SET NMP.PROPOSAL_NAME = V_SHORT_NAME, NMP.REASON_FOR_CHANGE = '** Automatic update of proposal_name after short_name change in evolved theme **' WHERE NMP.EVOLVED_THEME_NO =:NEW.THEME_NO AND NMP.PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') ", 'type': 'if_else', 'if_indent': 3, 'then_statements': [{'condition': ' (:NEW.PROPOSAL_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO V_EVOLVED_NMP_CNT FROM MDM_V_NEW_MEDICINE_PROPOSALS_MTN WHERE PROPOSAL_ID = :NEW.PROPOSAL_ID AND PROPOSAL_NAME = V_SHORT_NAME AND PROPOSAL_STATUS_CD = 'E';", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) ', 'type': 'if_else', 'if_indent': 6, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 9, 'then_statements': [{'type': 'begin_end', 'begin_indent': 12, 'begin_end_statements': [{'type': 'select_statement', 'sql_statement': "SELECT PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID INTO V_PHARMACOLOGICAL_TYPE_ID, V_MOLECULE_TYPE_ID FROM V_THEME_MOLECULES M WHERE MOLECULE_ID = :NEW.MOLECULE_ID AND M.VALID_IND = 'Y';", 'statement_indent': 15}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'NO_DATA_FOUND', 'when_indent': 15, 'exception_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_MOLECULE_ID;', 'statement_indent': 18}]}]}], 'if_elses': [], 'else_statements': []}, {'type': 'insert_statement', 'sql_statement': "INSERT INTO MDM_V_NEW_MEDICINE_PROPOSALS_MTN ( PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, PROPOSAL_NAME, PHARMACOLOGICAL_TYPE_ID, MOLECULE_TYPE_ID, REASON_FOR_CHANGE ) VALUES ( 'E', :NEW.THEME_NO, V_SHORT_NAME, NVL(V_PHARMACOLOGICAL_TYPE_ID, C_PHARMACOLOGICAL_TYPE_ID), NVL(V_MOLECULE_TYPE_ID, C_MOLECULE_TYPE_ID), '** Automatic creation of nmp for early development themes **' );", 'statement_indent': 9}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,709 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,710 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,711 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,712 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,713 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,714 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,715 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '4'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,716 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '5'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,717 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,718 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,719 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNTER > 0)'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,720 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,721 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,722 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,723 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,724 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,725 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,726 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,727 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,728 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,729 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,730 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,731 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,732 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,733 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Processing condition for on_update: '4'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Processing condition for on_update: '5'
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,734 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,735 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,736 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,737 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNTER > 0)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,738 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,739 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,740 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,741 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,742 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'Y') '
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'Y')'
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'Y''
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD <> 'Y') '
2025-08-28 06:26:51,743 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD <> 'Y')'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD <> 'Y''
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC <> 'CLOSED' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,744 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_MOLECULE_RG_NO IS NULL) '
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Stripped condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Final modified condition: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_MOLECULE_RG_NO IS NULL)'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_MOLECULE_RG_NO IS NULL'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPARATOR_IND = 'Y') '
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPARATOR_IND = 'Y')'
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPARATOR_IND = 'Y''
2025-08-28 06:26:51,745 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.STATUS_DESC IS NOT NULL) '
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.STATUS_DESC IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.STATUS_DESC IS NOT NULL'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.DBA_DESC_CONCAT IS NOT NULL) '
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.DBA_DESC_CONCAT IS NOT NULL)'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.DBA_DESC_CONCAT IS NOT NULL'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,746 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30) '
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30)'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MANUAL_SHORT_DESC IS NULL AND LENGTH(V_THEME_DESC_PROPOSAL) > 30'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,747 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0) '
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.IN_PREP_IND = 'N' AND V_IS_ADMIN_CNT = 0'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PORTF_PROJ_CD = 'Y' AND :NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL) '
2025-08-28 06:26:51,748 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.MANUAL_SHORT_DESC, :NEW.THEME_DESC_PROPOSAL) IS NULL'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Starting condition modification: ' LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Stripped condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Final modified condition: 'LENGTH(:NEW.THEME_NO)'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '4'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Starting condition modification: '4'
2025-08-28 06:26:51,749 - root - DEBUG - [common.py:105] - Stripped condition: '4'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Final modified condition: '4'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '5'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Starting condition modification: '5'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Stripped condition: '5'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Final modified condition: '5'
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Starting condition modification: ' (SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9) '
2025-08-28 06:26:51,750 - root - DEBUG - [common.py:105] - Stripped condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Final modified condition: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'SUBSTR(:NEW.THEME_NO, 1, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 2, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 3, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 4, 1) NOT BETWEEN 0 AND 9 OR SUBSTR(:NEW.THEME_NO, 5, 1) NOT BETWEEN 0 AND 9'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.OFFICIAL_IND = 'N') '
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.OFFICIAL_IND = 'N')'
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.OFFICIAL_IND = 'N''
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,751 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'N') '
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'N')'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'N''
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0) '
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0)'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.THEME_DESC IS NULL OR LENGTH(:NEW.THEME_DESC) = 0'
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,752 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPPER(:NEW.PORTF_PROJ_CD) = 'Y') '
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Stripped condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Final modified condition: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(UPPER(:NEW.PORTF_PROJ_CD) = 'Y')'
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'UPPER(:NEW.PORTF_PROJ_CD) = 'Y''
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,753 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' (LENGTH(V_DESCRIPTION) > 90) '
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Stripped condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Final modified condition: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(LENGTH(V_DESCRIPTION) > 90)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'LENGTH(V_DESCRIPTION) > 90'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNTER > 0) '
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNTER > 0)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNTER > 0)'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNTER > 0'
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,754 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_ID IS NULL AND :NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL) '
2025-08-28 06:26:51,755 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NULL'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT = 0) '
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT = 0'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,756 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL AND :OLD.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID) '
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID)'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL AND :OLD.PROPOSAL_ID IS NOT NULL AND :NEW.PROPOSAL_ID <> :OLD.PROPOSAL_ID'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')) '
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-'))'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.PROPOSAL_ID, 0) = NVL(:OLD.PROPOSAL_ID, 0) AND NVL(:OLD.SHORT_NAME, '-') <> NVL(V_SHORT_NAME, '-')'
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,757 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_EVOLVED_NMP_CNT > 0) '
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Stripped condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Final modified condition: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_EVOLVED_NMP_CNT > 0)'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_EVOLVED_NMP_CNT > 0'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y') '
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')' â†’ '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Final modified condition: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y')'
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' AND :NEW.THEME_NO IS NOT NULL AND GMD_UTIL_THEMES.GET_THEMES_RANGE_AUTOMATIC_NMP(:NEW.THEME_NO) = 'Y''
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,758 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NOT NULL) '
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NOT NULL)'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NOT NULL'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)) '
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0))'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_ID IS NULL OR (:NEW.PROPOSAL_ID IS NOT NULL AND V_EVOLVED_NMP_CNT = 0)'
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,759 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,760 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,761 - root - DEBUG - [common.py:105] - Generated JSON string with 194828 characters
2025-08-28 06:26:51,762 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,763 - root - DEBUG - [common.py:105] - Created trigger1.json
2025-08-28 06:26:51,763 - root - DEBUG - [common.py:105] - processing trigger2_analysis.json
2025-08-28 06:26:51,763 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,763 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,765 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,765 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,766 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,767 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,768 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,769 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,770 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,771 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,772 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,773 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,774 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,775 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,776 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,777 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,778 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,779 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,780 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,781 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,782 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,783 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,784 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,785 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,786 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,787 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,788 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,789 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,790 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,791 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,792 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,793 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,794 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,795 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,796 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,797 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,798 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,799 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,800 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,801 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,802 - root - DEBUG - [common.py:105] - Generated JSON string with 74669 characters
2025-08-28 06:26:51,802 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,802 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,802 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,803 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,803 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,803 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 7 exceptions
2025-08-28 06:26:51,803 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,804 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'select_statement', 'sql_statement': 'SELECT MANUAL_SHORT_DESC INTO V_MANUAL_SHORT_DESC FROM GMD.THEMES WHERE THEME_NO = NVL(:NEW.THEME_NO, :OLD.THEME_NO);', 'statement_indent': 4}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 8}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :OLD.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':OLD.THEME_NO', 'P_MOLECULE_ID': ':OLD.MOLECULE_ID', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :OLD.THEME_NO, P_MOLECULE_ID => :OLD.MOLECULE_ID, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MAPPINGS FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 8}, {'condition': ' (:NEW.MOLECULE_ID IS NULL) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MOLEC_ID_MISSING;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD_INV_MAP;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': " (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_MAP_EXISTS;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_COUNT_T_MOL_MAP FROM V_THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID AND TMM.VALID_IND = 'N';", 'statement_indent': 12}, {'condition': ' (V_COUNT_T_MOL_MAP > 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'assignment', 'variable_name': 'INVALID_MAPPING_EXISTS', 'assignment_operator': ':=', 'expression': 'TRUE;', 'assignment_indent': 16}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1', 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 20}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}]}], 'else_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_INV_MAP;', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (UPDATING) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID IS NOT NULL) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_MAP_CHAR = :NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 20}, {'condition': ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO + 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.VALID_IND = 'Y' AND TMM.MOLECULE_SEQ_NO >= :NEW.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO < :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 24}]}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =: NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 24}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 24}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID;", 'statement_indent': 16}, {'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.MOLECULE_SEQ_NO = TMM.MOLECULE_SEQ_NO - 1 WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_SEQ_NO > :OLD.MOLECULE_SEQ_NO AND TMM.MOLECULE_SEQ_NO <= :NEW.MOLECULE_SEQ_NO AND TMM.VALID_IND = 'Y';", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': "INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR, TMM.VALID_IND ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR, 'Y' );", 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'N' WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :OLD.MOLECULE_ID AND MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO;", 'statement_indent': 16}, {'condition': ' (INVALID_MAPPING_EXISTS) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE THEME_MOLECULE_MAP TMM SET TMM.VALID_IND = 'Y', TMM.MOLECULE_SEQ_NO = :NEW.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR =:NEW.MOLECULE_MAP_CHAR WHERE TMM.THEME_NO = :NEW.THEME_NO AND TMM.MOLECULE_ID = :NEW.MOLECULE_ID;", 'statement_indent': 20}], 'if_elses': [], 'else_statements': [{'type': 'insert_statement', 'sql_statement': 'INSERT INTO THEME_MOLECULE_MAP TMM ( TMM.THEME_NO, TMM.MOLECULE_ID, TMM.MOLECULE_SEQ_NO, TMM.MOLECULE_MAP_CHAR ) VALUES ( :NEW.THEME_NO, :NEW.MOLECULE_ID, :NEW.MOLECULE_SEQ_NO, :NEW.MOLECULE_MAP_CHAR );', 'statement_indent': 20}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_THEMES.REFRESH_THEME_DESC', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_THEME_NO': ':NEW.THEME_NO', 'P_MOLECULE_ID': '0', 'P_DATE': 'SYSDATE', 'P_MANUAL_SHORT_DESC': 'V_MANUAL_SHORT_DESC'}, 'raw_text': 'P_THEME_NO => :NEW.THEME_NO, P_MOLECULE_ID => 0, P_DATE => SYSDATE, P_MANUAL_SHORT_DESC => V_MANUAL_SHORT_DESC'}}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO V_SEQ_NO_DUPLICATE_CNT FROM ( SELECT MOLECULE_SEQ_NO FROM THEME_MOLECULE_MAP TMM WHERE TMM.THEME_NO = :NEW.THEME_NO AND VALID_IND = 'Y' GROUP BY MOLECULE_SEQ_NO HAVING COUNT (*) > 1 );", 'statement_indent': 4}, {'condition': ' (V_SEQ_NO_DUPLICATE_CNT > 0) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INV_MOL_SEQUENCE;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,804 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,805 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,806 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,807 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,808 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,809 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,810 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,811 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,812 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,813 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,814 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,815 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,816 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,817 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,818 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,819 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,820 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,821 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,822 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,823 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,824 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,825 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NULL) '
2025-08-28 06:26:51,826 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NULL)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NULL'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS) '
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,827 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS)'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_SEQ_NO > V_COUNT_T_MAPPINGS'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')) '
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1'))'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> NVL (:OLD.MOLECULE_ID, '-1')'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,828 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COUNT_T_MOL_MAP > 0) '
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COUNT_T_MOL_MAP > 0)'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COUNT_T_MOL_MAP > 0'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,829 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO = V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,830 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Starting condition modification: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.MOLECULE_SEQ_NO < V_COUNT_T_MAPPINGS + 1'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Starting condition modification: ' (UPDATING) '
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Stripped condition: '(UPDATING)'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '(UPDATING)' â†’ '()'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,831 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID IS NOT NULL) '
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID IS NOT NULL)'
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID IS NOT NULL'
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,832 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR) '
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR)'
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO AND :NEW.MOLECULE_MAP_CHAR <> :OLD.MOLECULE_MAP_CHAR'
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,833 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID = :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Stripped condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,834 - root - DEBUG - [common.py:105] - Final modified condition: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':OLD.MOLECULE_SEQ_NO < :NEW.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO) '
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO)'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.MOLECULE_ID <> :OLD.MOLECULE_ID AND :NEW.MOLECULE_SEQ_NO <> :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,835 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO '
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.MOLECULE_ID <> :OLD.MOLECULE_ID) AND :NEW.MOLECULE_SEQ_NO = :OLD.MOLECULE_SEQ_NO'
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,836 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INVALID_MAPPING_EXISTS) '
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Stripped condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Final modified condition: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(INVALID_MAPPING_EXISTS)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'INVALID_MAPPING_EXISTS'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_SEQ_NO_DUPLICATE_CNT > 0) '
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Stripped condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Final modified condition: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_SEQ_NO_DUPLICATE_CNT > 0)'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_SEQ_NO_DUPLICATE_CNT > 0'
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,837 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,838 - root - DEBUG - [common.py:105] - Generated JSON string with 74669 characters
2025-08-28 06:26:51,838 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,838 - root - DEBUG - [common.py:105] - Created trigger2.json
2025-08-28 06:26:51,839 - root - DEBUG - [common.py:105] - processing trigger3_analysis.json
2025-08-28 06:26:51,839 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,839 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,840 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,840 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,840 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:51,840 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,840 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,840 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,841 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,842 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,843 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,844 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,845 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,846 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,847 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,848 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,849 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,850 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,851 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,852 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,853 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,854 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,855 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,856 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,857 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,858 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,859 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,860 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,861 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - Generated JSON string with 83585 characters
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,862 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,864 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' (CNTR > 0) ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING OR UPDATING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " (V_COMPANY_TYPE_CD = 'L') ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' (CNTR = 0) ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' (DELETING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,864 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR > 0)'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( OR )'
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,865 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,866 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,867 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,868 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,869 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(CNTR = 0)'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,870 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,871 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR > 0)'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( OR )'
2025-08-28 06:26:51,872 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,873 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,874 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,875 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,876 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(CNTR = 0)'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,877 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR > 0) '
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR > 0)'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR > 0)'
2025-08-28 06:26:51,878 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR > 0)'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR > 0'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING OR UPDATING) '
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING OR UPDATING)'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING OR UPDATING)' â†’ '( OR UPDATING)'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': '( OR UPDATING)' â†’ '( OR )'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Final modified condition: '( OR )'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( OR )'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' OR '
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')) '
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L'))'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,879 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')) '
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L'))'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-08-28 06:26:51,880 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID) '
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0) '
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0)'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Starting condition modification: ' (TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01') '
2025-08-28 06:26:51,881 - root - DEBUG - [common.py:105] - Stripped condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Final modified condition: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Starting condition modification: ' (V_COMPANY_TYPE_CD = 'L') '
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Stripped condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Final modified condition: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(V_COMPANY_TYPE_CD = 'L')'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')) '
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L'))'
2025-08-28 06:26:51,882 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Starting condition modification: ' (CNTR = 0) '
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Stripped condition: '(CNTR = 0)'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Final modified condition: '(CNTR = 0)'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(CNTR = 0)'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'CNTR = 0'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Starting condition modification: ' (DELETING) '
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Stripped condition: '(DELETING)'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': '(DELETING)' â†’ '()'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Starting condition modification: ' (NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')) '
2025-08-28 06:26:51,883 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P'))'
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Removed outer parentheses: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,884 - root - DEBUG - [common.py:105] - Generated JSON string with 83585 characters
2025-08-28 06:26:51,885 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,885 - root - DEBUG - [common.py:105] - Created trigger3.json
2025-08-28 06:26:51,885 - root - DEBUG - [common.py:105] - processing trigger4_analysis.json
2025-08-28 06:26:51,885 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,886 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );'}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,886 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,887 - root - DEBUG - [common.py:105] - Generated JSON string with 18812 characters
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,888 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'condition': " TG_OP = 'INSERT' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'I';", 'assignment_indent': 8}], 'if_elses': [{'type': 'elif_statement', 'elif_indent': 4, 'condition': "TG_OP = 'UPDATE'", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ACTION', 'assignment_operator': ':=', 'expression': "'U';", 'assignment_indent': 8}]}], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'COL_NAMES', 'assignment_operator': ':=', 'expression': "ARRAY[ 'exploratory_theme_no', 'proposal_id', 'proposal_name', 'proposal_status_cd', 'evolved_theme_no', 'global_change_id', 'reason_for_change', 'ins_date', 'ins_user', 'upd_date', 'upd_user', 'molecule_type_id', 'pharmacological_type_id', 'firewall_id', 'mrhub_load_job_id', 'mrhub_load_date', 'mrhub_source_system_id' ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_NEW_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN TO_CHAR(NEW.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN NEW.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'COL_OLD_VALUES', 'assignment_operator': ':=', 'expression': "ARRAY[ CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EXPLORATORY_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_NAME::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PROPOSAL_STATUS_CD::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.EVOLVED_THEME_NO::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.GLOBAL_CHANGE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.REASON_FOR_CHANGE::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.INS_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.INS_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.UPD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.UPD_USER::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MOLECULE_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.PHARMACOLOGICAL_TYPE_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.FIREWALL_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_LOAD_JOB_ID::TEXT ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN TO_CHAR(OLD.MRHUB_LOAD_DATE, 'YYYY-MM-DD HH24:MI:SS') ELSE NULL END, CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN OLD.MRHUB_SOURCE_SYSTEM_ID::TEXT ELSE NULL END ];", 'assignment_indent': 4}, {'indent': 4, 'line': '    PERFORM MDMTOOL."mdmt_util_history$write_history"( V_ACTION, V_TABLE_NAME, V_SCHEMA_NAME, COL_NAMES, COL_NEW_VALUES, COL_OLD_VALUES );'}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,888 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'INSERT' '
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'INSERT''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Removed keyword 'INSERT': 'TG_OP = 'INSERT'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,889 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - Generated JSON string with 18812 characters
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - Created trigger4.json
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - processing trigger5_analysis.json
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,890 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,891 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT )"], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,891 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,892 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,893 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,894 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,895 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,896 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,897 - root - DEBUG - [common.py:105] - Generated JSON string with 11051 characters
2025-08-28 06:26:51,897 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,897 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,897 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] -   - Declarations: 2 variables, 0 constants, 0 exceptions
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,898 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'COALESCE(NEW.UPD_USER, OLD.UPD_USER);', 'assignment_indent': 4}, {'type': 'assignment', 'variable_name': 'V_TRG_UPD_DATE_STR', 'assignment_operator': ':=', 'expression': "TO_CHAR(COALESCE(NEW.UPD_DATE, OLD.UPD_DATE), 'YYYY-MM-DD');", 'assignment_indent': 4}, {'condition': " TG_OP = 'UPDATE' ", 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': '', 'type': 'case_when', 'case_indent': 12, 'when_clauses': [{'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.PROD_FAM_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}, {'type': 'when_statement', 'when_indent': 16, 'condition': "NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')", 'then_statements': [{'type': 'update_statement', 'sql_statement': 'UPDATE GMD.THEME_MOLECULES SET MOLECULE_DESC = NEW.ACT_SUBSTANCE_NAME WHERE PRODUCT_FAMILY_CD = NEW.PRODUCT_FAMILY_CD;', 'statement_indent': 20}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 20}]}, "CALL GMD.GMD_UTIL_THEMES$UPD_THEME_DESC_JOB_PROC( P_PRODUCT_FAMILY_CD => NEW.PRODUCT_FAMILY_CD::TEXT, P_REGISTRAR => V_USERID::TEXT, P_TRG_TABLE => 'PRODUCT_FAMILIES'::TEXT, P_TRG_UPD_DATE => V_TRG_UPD_DATE_STR::TEXT )"], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'type': 'return_statement', 'sql_statement': 'RETURN NULL;', 'statement_indent': 4}]
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TG_OP = '''
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,898 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,899 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TG_OP = '''
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,900 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,901 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Starting condition modification: ' TG_OP = 'UPDATE' '
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Stripped condition: 'TG_OP = 'UPDATE''
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATE': 'TG_OP = 'UPDATE'' â†’ 'TG_OP = '''
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Final modified condition: 'TG_OP = '''
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TG_OP = '''
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Starting condition modification: ' COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X') '
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Stripped condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,902 - root - DEBUG - [common.py:105] - Final modified condition: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'COALESCE (OLD.PROD_FAM_NAME_STATUS_CD, 'X') <> COALESCE (NEW.PROD_FAM_NAME_STATUS_CD, 'X') OR OLD.PROD_FAM_NAME <> NEW.PROD_FAM_NAME OR COALESCE(OLD.ACT_SUBSTANCE_NAME, 'X') <> COALESCE(NEW.ACT_SUBSTANCE_NAME, 'X')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('T', 'R')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,903 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Starting condition modification: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Stripped condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Final modified condition: 'NEW.PROD_FAM_NAME_STATUS_CD IN ('G', 'I')'
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - Generated JSON string with 11051 characters
2025-08-28 06:26:51,904 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,905 - root - DEBUG - [common.py:105] - Created trigger5.json
2025-08-28 06:26:51,905 - root - DEBUG - [common.py:105] - processing trigger6_analysis.json
2025-08-28 06:26:51,905 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,905 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,906 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,906 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,907 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,908 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,909 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,910 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,911 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,912 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,913 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,914 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,915 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - Generated JSON string with 24662 characters
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 4 exceptions
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,916 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': ':NEW.EVOLVED_THEME_NO;', 'assignment_indent': 4}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_TO_EVOLVED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_NO_UPDATE_EVOLVED_TO_TERMINATED;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_EVOLVED_THEME_NO', 'assignment_operator': ':=', 'expression': 'NULL;', 'assignment_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE V_EXPLORATORY_THEMENO_NOT_NULL;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' (INSERTING) ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_PROPOSAL_ID', 'assignment_operator': ':=', 'expression': 'PREDMD.SEQ_NMP_PROPOSAL_ID.NEXTVAL;', 'assignment_indent': 8}, {'type': 'insert_statement', 'sql_statement': 'INSERT INTO V_NEW_MEDICINE_PROPOSALS( PROPOSAL_ID, EXPLORATORY_THEME_NO, PROPOSAL_NAME, PROPOSAL_STATUS_CD, EVOLVED_THEME_NO, MOLECULE_TYPE_ID, PHARMACOLOGICAL_TYPE_ID, FIREWALL_ID ) VALUES ( V_PROPOSAL_ID, :NEW.EXPLORATORY_THEME_NO, :NEW.PROPOSAL_NAME, :NEW.PROPOSAL_STATUS_CD, :NEW.EVOLVED_THEME_NO, :NEW.MOLECULE_TYPE_ID, :NEW.PHARMACOLOGICAL_TYPE_ID, :NEW.FIREWALL_ID );', 'statement_indent': 8}, {'condition': ' :NEW.PARTNER_ID IS NOT NULL ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_LOAD_NPM_PARTNER_DATA.LOAD_NPM_PARTNER_DATA', 'parameters': {'parameter_type': 'positional', 'positional_params': ['V_PROPOSAL_ID', ':NEW.PARTNER_ID'], 'named_params': {}, 'raw_text': 'V_PROPOSAL_ID, :NEW.PARTNER_ID'}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,916 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,917 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,918 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,919 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,920 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,921 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME) '
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME)'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED AND(:NEW.EVOLVED_THEME_NO IS NULL OR :NEW.EVOLVED_THEME_NO = :OLD.EVOLVED_THEME_NO) AND :NEW.MOLECULE_TYPE_ID = :OLD.MOLECULE_TYPE_ID AND :NEW.PHARMACOLOGICAL_TYPE_ID = :OLD.PHARMACOLOGICAL_TYPE_ID AND :NEW.PROPOSAL_NAME = :OLD.PROPOSAL_NAME'
2025-08-28 06:26:51,922 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED) '
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_TERMINATED AND :OLD.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_EVOLVED'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.PROPOSAL_STATUS_CD = C_PROPOSAL_STATUS_ACTIVE AND :OLD.EVOLVED_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,923 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL) '
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL)'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.EXPLORATORY_THEME_NO IS NULL AND :OLD.EXPLORATORY_THEME_NO IS NOT NULL'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Starting condition modification: ' (INSERTING) '
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Stripped condition: '(INSERTING)'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': '(INSERTING)' â†’ '()'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Cleaned up parentheses: '()' â†’ ''
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.PARTNER_ID IS NOT NULL '
2025-08-28 06:26:51,924 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.PARTNER_ID IS NOT NULL'
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - Generated JSON string with 24662 characters
2025-08-28 06:26:51,925 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,926 - root - DEBUG - [common.py:105] - Created trigger6.json
2025-08-28 06:26:51,927 - root - DEBUG - [common.py:105] - processing yyy_analysis.json
2025-08-28 06:26:51,927 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,927 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,929 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,929 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,929 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-08-28 06:26:51,929 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,930 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,930 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,931 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,932 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,933 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,934 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,935 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,936 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,937 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,938 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,939 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,940 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,941 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,942 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,943 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,944 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,945 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,946 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,947 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,948 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,949 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,950 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,951 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,952 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,953 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,954 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,955 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,956 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,957 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,958 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,959 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,960 - root - DEBUG - [common.py:105] - Generated JSON string with 114806 characters
2025-08-28 06:26:51,960 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,960 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,960 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] -   - Declarations: 9 variables, 1 constants, 11 exceptions
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,962 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'condition': ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_UPD;', 'statement_indent': 8}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD;', 'statement_indent': 8}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.COMPANY_CD;', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_LEGAL_COMPANY_CD', 'assignment_operator': ':=', 'expression': ':NEW.LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 8}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_TYPE_CD IN ( 'L') AND VALID_IND = 'Y' AND COMPANY_CD = V_LEGAL_COMPANY_CD;", 'statement_indent': 8}, {'condition': " CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE INVALID_LEGAL_COMP;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANY', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_COMPANY_TYPE_CD': ':NEW.COMPANY_TYPE_CD', 'I_MULTISEL_COMPANY_PURPOSE': ':NEW.MULTISEL_COMPANY_PURPOSE', 'I_LEGAL_COMPANY_CD': 'V_LEGAL_COMPANY_CD', 'I_OFFICIAL_NAME': ':NEW.OFFICIAL_NAME', 'I_SHORT_NAME': ':NEW.SHORT_NAME', 'I_DISCLOSURE_NAME': ':NEW.DISCLOSURE_NAME', 'I_FUNCTIONAL_CURRENCY_CD': ':NEW.FUNCTIONAL_CURRENCY_CD', 'I_STATUTORY_CURRENCY_CD': ':NEW.STATUTORY_CURRENCY_CD', 'I_URL': ':NEW.URL', 'I_PHONEBOOK_URL': ':NEW.PHONEBOOK_URL', 'I_EMERGENCY_PHONE_NO': ':NEW.EMERGENCY_PHONE_NO', 'I_GENERAL_PHONE_NO': ':NEW.GENERAL_PHONE_NO', 'I_GENERAL_FAX_NO': ':NEW.GENERAL_FAX_NO', 'I_ANNUAL_REPORT_IND': ':NEW.ANNUAL_REPORT_IND', 'I_FATCA_CD': ':NEW.FATCA_CD', 'I_PHARMA_NUMBER_RANGE': ':NEW.PHARMA_NUMBER_RANGE', 'I_LIQUIDATION_DATE': ':NEW.LIQUIDATION_DATE', 'I_SAPINST_NO': ':NEW.SAPINST_NO', 'I_SAP_COMPANY_CODE_NO': ':NEW.SAP_COMPANY_CODE_NO', 'I_SAP_GO_LIVE_DATE': ':NEW.SAP_GO_LIVE_DATE', 'I_SAP_GROUP_CODE': ':NEW.SAP_GROUP_CODE', 'I_SAP_LOCAL_COA': ':NEW.SAP_LOCAL_COA', 'I_SAP_CONTROLLING_AREA': ':NEW.SAP_CONTROLLING_AREA', 'I_TOP_SYSTEM_IND': ':NEW.TOP_SYSTEM_IND', 'I_TOP_GO_LIVE_DATE': ':NEW.TOP_GO_LIVE_DATE', 'I_TOP_REMARKS': ':NEW.TOP_REMARKS', 'I_LEGAL_REMARKS': ':NEW.LEGAL_REMARKS', 'I_REMARKS': ':NEW.REMARKS', 'I_LOCAL_STATUTORY_ACC': ':NEW.LOCAL_STATUTORY_ACC', 'I_ICFR_COMPANY_LAYER': ':NEW.ICFR_COMPANY_LAYER', 'I_TRADING_PARTNER': ':NEW.TRADING_PARTNER', 'I_S4_ENTITY_ID': ':NEW.S4_ENTITY_ID', 'I_RCA_DISPLAY_FLAG': ':NEW.RCA_DISPLAY_FLAG', 'I_CBC_GBE_SCOPE': ':NEW.CBC_GBE_SCOPE', 'I_WEB_DISPLAY_IND': ':NEW.WEB_DISPLAY_IND', 'I_HEADCOUNT_IND': ':NEW.HEADCOUNT_IND', 'I_VALID_IND': ':NEW.VALID_IND', 'I_CORE_REMARKS': ':NEW.CORE_REMARKS', 'I_REVIEW_USERID': ':NEW.REVIEW_USERID', 'I_REVIEW_EXP_DATE': ':NEW.REVIEW_EXP_DATE', 'I_REQUESTER_USERID': ':NEW.REQUESTER_USERID', 'I_REQUEST_DATE': ':NEW.REQUEST_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_COMPANY_TYPE_CD => :NEW.COMPANY_TYPE_CD, I_MULTISEL_COMPANY_PURPOSE => :NEW.MULTISEL_COMPANY_PURPOSE, I_LEGAL_COMPANY_CD => V_LEGAL_COMPANY_CD, I_OFFICIAL_NAME => :NEW.OFFICIAL_NAME, I_SHORT_NAME => :NEW.SHORT_NAME, I_DISCLOSURE_NAME => :NEW.DISCLOSURE_NAME, I_FUNCTIONAL_CURRENCY_CD => :NEW.FUNCTIONAL_CURRENCY_CD, I_STATUTORY_CURRENCY_CD => :NEW.STATUTORY_CURRENCY_CD, I_URL => :NEW.URL, I_PHONEBOOK_URL => :NEW.PHONEBOOK_URL, I_EMERGENCY_PHONE_NO => :NEW.EMERGENCY_PHONE_NO, I_GENERAL_PHONE_NO => :NEW.GENERAL_PHONE_NO, I_GENERAL_FAX_NO => :NEW.GENERAL_FAX_NO, I_ANNUAL_REPORT_IND => :NEW.ANNUAL_REPORT_IND, I_FATCA_CD => :NEW.FATCA_CD, I_PHARMA_NUMBER_RANGE => :NEW.PHARMA_NUMBER_RANGE, I_LIQUIDATION_DATE => :NEW.LIQUIDATION_DATE, I_SAPINST_NO => :NEW.SAPINST_NO, I_SAP_COMPANY_CODE_NO => :NEW.SAP_COMPANY_CODE_NO, I_SAP_GO_LIVE_DATE => :NEW.SAP_GO_LIVE_DATE, I_SAP_GROUP_CODE => :NEW.SAP_GROUP_CODE, I_SAP_LOCAL_COA => :NEW.SAP_LOCAL_COA, I_SAP_CONTROLLING_AREA => :NEW.SAP_CONTROLLING_AREA, I_TOP_SYSTEM_IND => :NEW.TOP_SYSTEM_IND, I_TOP_GO_LIVE_DATE => :NEW.TOP_GO_LIVE_DATE, I_TOP_REMARKS => :NEW.TOP_REMARKS, I_LEGAL_REMARKS => :NEW.LEGAL_REMARKS, I_REMARKS => :NEW.REMARKS, I_LOCAL_STATUTORY_ACC => :NEW.LOCAL_STATUTORY_ACC, I_ICFR_COMPANY_LAYER => :NEW.ICFR_COMPANY_LAYER, I_TRADING_PARTNER => :NEW.TRADING_PARTNER, I_S4_ENTITY_ID => :NEW.S4_ENTITY_ID, I_RCA_DISPLAY_FLAG => :NEW.RCA_DISPLAY_FLAG, I_CBC_GBE_SCOPE => :NEW.CBC_GBE_SCOPE , I_WEB_DISPLAY_IND => :NEW.WEB_DISPLAY_IND, I_HEADCOUNT_IND => :NEW.HEADCOUNT_IND, I_VALID_IND => :NEW.VALID_IND, I_CORE_REMARKS => :NEW.CORE_REMARKS, I_REVIEW_USERID => :NEW.REVIEW_USERID, I_REVIEW_EXP_DATE => :NEW.REVIEW_EXP_DATE, I_REQUESTER_USERID => :NEW.REQUESTER_USERID, I_REQUEST_DATE => :NEW.REQUEST_DATE, I_CHANGE_USER => V_USERID'}}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)", 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': ':NEW.REPORTING_ENTITY_CD;', 'assignment_indent': 16}, {'condition': '', 'type': 'case_when', 'case_indent': 16, 'when_clauses': [{'type': 'when_statement', 'when_indent': 20, 'condition': '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)', 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_VALID_FROM_DATE;', 'statement_indent': 24}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 24}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_MFR', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': ':NEW.REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': ':NEW.VALID_FROM_DATE', 'I_VALID_TO_DATE': ':NEW.VALID_TO_DATE', 'I_CHANGE_USER': 'V_USERID'}, 'raw_text': 'I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => :NEW.REPORTING_ENTITY_CD, I_VALID_FROM_DATE => :NEW.VALID_FROM_DATE, I_VALID_TO_DATE => :NEW.VALID_TO_DATE, I_CHANGE_USER => V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}, {'condition': " NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 12}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 12}, {'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': "SELECT LISTAGG(DISTINCT COMPANY_CD, ', ') WITHIN GROUP (ORDER BY COMPANY_CD) INTO V_COMPANY_CODES_LIST FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND COMPANY_CD <> :NEW.COMPANY_CD AND VALID_IND = 'Y';", 'statement_indent': 16}, {'type': 'raise_statement', 'sql_statement': 'RAISE CPY_IN_USE;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'type': 'update_statement', 'sql_statement': 'UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'update_statement', 'sql_statement': "UPDATE CFG.CFG_COMPANY_ADDRESSES SET VALID_TO = TRUNC ( SYSDATE ) - 1 WHERE COMPANY_CD = :NEW.COMPANY_CD AND ADDRESS_TYPE_CD NOT IN ('P', 'RES', 'L', 'INC') AND ( VALID_TO > TRUNC(SYSDATE) OR VALID_TO IS NULL);", 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_SCOPE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CPY_STILL_IN_MFR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_ASSOC_ENT_NOT_ALLOWED_FOR_CBC;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'NVL (:NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'assignment_indent': 12}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_REPORTING_ENTITY_CD', 'assignment_operator': ':=', 'expression': 'V_LEGAL_COMPANY_CD;', 'assignment_indent': 12}]}, {'condition': " V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': " (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT CBC_FLAG INTO V_REP_CBC_FLAG FROM CFG_V_REPORTING_ENTITIES WHERE REPORTING_ENTITY_CD = V_LEGAL_COMPANY_CD;', 'statement_indent': 16}, {'condition': " NVL (V_REP_CBC_FLAG, 'N') = 'N' ", 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE RU_NOT_IN_CBC_SCOPE;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 16}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT (*) INTO CNTR FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NO_ADR;', 'statement_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'select_statement', 'sql_statement': "SELECT VALID_FROM, COUNTRY_CD INTO V_ADDR_VALID_FROM_DATE, V_COUNTRY_CD FROM CFG.CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = V_REPORTING_ENTITY_CD AND ADDRESS_TYPE_CD = 'RES';", 'statement_indent': 16}, {'condition': ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_ADDR_VALID_FROM_DATE', 'assignment_operator': ':=', 'expression': 'TRUNC(SYSDATE);', 'assignment_indent': 20}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': 'V_REPORTING_ENTITY_CD', 'I_VALID_FROM_DATE': 'TRUNC (SYSDATE)', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => V_REPORTING_ENTITY_CD, I_VALID_FROM_DATE => TRUNC (SYSDATE), I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'INSERT'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_ADDR_VALID_FROM_DATE', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_ADDR_VALID_FROM_DATE, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': []}, {'condition': " :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' ", 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'CE'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'CE', I_ACTION_TYPE => 'UPDATE'"}}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_VALID_FROM_DATE': 'NULL', 'I_VALID_TO_DATE': 'TRUNC (SYSDATE)', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_VALID_FROM_DATE => NULL, I_VALID_TO_DATE => TRUNC (SYSDATE), I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'UPDATE'"}}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': '', 'type': 'case_when', 'case_indent': 8, 'when_clauses': [{'type': 'when_statement', 'when_indent': 12, 'condition': "(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL", 'then_statements': [{'type': 'function_calling', 'function_name': 'MDMAPPL.MDM_UTIL_COMPANIES.MODIFYCOMPANYNAME', 'parameters': {'parameter_type': 'positional', 'positional_params': [':NEW.COMPANY_CD', 'V_LEGAL_COMPANY_CD', ':NEW.OFFICIAL_NAME', 'V_USERID'], 'named_params': {}, 'raw_text': ':NEW.COMPANY_CD, V_LEGAL_COMPANY_CD, :NEW.OFFICIAL_NAME, V_USERID'}}]}], 'else_statements': [{'type': 'null_statement', 'sql_statement': 'NULL;', 'statement_indent': 16}]}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,962 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,963 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,964 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,965 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,966 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,967 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,968 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,969 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,970 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Processing condition for on_insert: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,971 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,972 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,973 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,974 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Processing condition for on_update: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,975 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,976 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,977 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,978 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,979 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,980 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Processing condition for on_update: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Starting condition modification: ' UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD '
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Stripped condition: 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': 'UPDATING AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' AND :OLD.COMPANY_CD != :NEW.COMPANY_CD' â†’ ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_CD != :NEW.COMPANY_CD'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,981 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,982 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL '
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD IN ('L', 'A') AND :NEW.LEGAL_COMPANY_CD IS NULL'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD)) '
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0 AND (NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) NOT IN ('D', 'A', 'L') OR (:NEW.COMPANY_TYPE_CD = 'D' AND :NEW.CBC_GBE_SCOPE = 'Y' AND V_LEGAL_COMPANY_CD <> :NEW.COMPANY_CD))'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,983 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Starting condition modification: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (:OLD.REPORTING_ENTITY_CD, '-') != NVL (:NEW.REPORTING_ENTITY_CD, '-') OR NVL (TO_DATE (:OLD.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_FROM_DATE, 'DD-MM-YYYY'), SYSDATE + 100) OR NVL (TO_DATE (:OLD.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100) != NVL (TO_DATE (:NEW.VALID_TO_DATE, 'DD-MM-YYYY'), SYSDATE + 100)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Removed outer parentheses: ' :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Starting condition modification: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Stripped condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Final modified condition: '( :NEW.VALID_FROM_DATE IS NULL OR :NEW.VALID_FROM_DATE IS NULL)'
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y' '
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.VALID_IND, 'Y') = 'N' AND NVL(:OLD.VALID_IND, 'N') = 'Y''
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,984 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' :OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Stripped condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Final modified condition: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':OLD.COMPANY_TYPE_CD IN ('L', 'B') AND :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N' '
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'Y' AND :NEW.VALID_IND = 'N''
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,985 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL '
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.VALID_IND = 'N' AND NVL(:NEW.REPORTING_ENTITY_CD, :OLD.REPORTING_ENTITY_CD) IS NOT NULL AND NVL(:NEW.VALID_TO_DATE, :OLD.VALID_TO_DATE) IS NULL'
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y' '
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.COMPANY_TYPE_CD = 'A' AND :NEW.CBC_GBE_SCOPE = 'Y''
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B' '
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,986 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.COMPANY_TYPE_CD, :OLD.COMPANY_TYPE_CD) = 'L' OR NVL(:NEW.COMPANY_TYPE_CD, :NEW.COMPANY_TYPE_CD) = 'B''
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D' '
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Stripped condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Final modified condition: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_REPORTING_ENTITY_CD IS NOT NULL OR :NEW.COMPANY_TYPE_CD = 'D''
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' (:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)) '
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Stripped condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Final modified condition: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(:NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD))'
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Removed outer parentheses: ':NEW.CBC_GBE_SCOPE = 'Y' AND NVL (:OLD.CBC_GBE_SCOPE, 'N') = 'N') OR (NVL(:NEW.CBC_GBE_SCOPE, :OLD.CBC_GBE_SCOPE) = 'Y' AND V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL (V_REP_CBC_FLAG, 'N') = 'N' '
2025-08-28 06:26:51,987 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL (V_REP_CBC_FLAG, 'N') = 'N''
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD) '
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Stripped condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Final modified condition: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_LEGAL_COMPANY_CD <> NVL(:OLD.LEGAL_COMPANY_CD, :NEW.LEGAL_COMPANY_CD)'
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,988 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y' '
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.CBC_GBE_SCOPE = 'N' AND NVL (:OLD.CBC_GBE_SCOPE, 'Y') = 'Y''
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Processing condition for on_delete: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Starting condition modification: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Stripped condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Final modified condition: '(NVL (:OLD.OFFICIAL_NAME, '-') != NVL (:NEW.OFFICIAL_NAME, '-')) AND :OLD.OFFICIAL_NAME IS NOT NULL'
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:51,989 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:51,990 - root - DEBUG - [common.py:105] - Generated JSON string with 114806 characters
2025-08-28 06:26:51,990 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:51,991 - root - DEBUG - [common.py:105] - Created yyy.json
2025-08-28 06:26:51,991 - root - DEBUG - [common.py:105] - processing zzz_analysis.json
2025-08-28 06:26:51,991 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:51,991 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:51,992 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:51,992 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:51,992 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:51,992 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:51,993 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' DELETING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,993 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,994 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,995 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,996 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,997 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,998 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:51,999 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,000 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,001 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,002 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:52,003 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,004 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:52,005 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,006 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:52,007 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,008 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:52,009 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:52,010 - root - DEBUG - [common.py:105] - Generated JSON string with 83459 characters
2025-08-28 06:26:52,011 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:52,011 - root - DEBUG - [common.py:105] - === Starting to_sql() conversion process ===
2025-08-28 06:26:52,011 - root - DEBUG - [common.py:105] - Creating deep copies of JSON data for each operation type
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - JSON data structure:
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] -   - Main blocks: 4 items
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] -   - Declarations: 6 variables, 0 constants, 6 exceptions
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - === Processing INSERT operations ===
2025-08-28 06:26:52,012 - root - DEBUG - [JSONTOPLJSON.py:347] - after_parse_on_insert: [{'type': 'begin_end', 'begin_indent': 4, 'begin_end_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'TXO_UTIL.GET_USERID;', 'assignment_indent': 8}], 'exception_handlers': [{'type': 'exception_handler', 'exception_name': 'OTHERS', 'when_indent': 8, 'exception_statements': [{'type': 'assignment', 'variable_name': 'V_USERID', 'assignment_operator': ':=', 'expression': 'USER;', 'assignment_indent': 12}]}]}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 4}, {'type': 'select_statement', 'sql_statement': 'SELECT COUNT (*) INTO CNTR FROM CFG_V_COMPANY_ADDRESSES WHERE COMPANY_CD = NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD) AND ADDRESS_TYPE_CD = NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD);', 'statement_indent': 4}, {'condition': ' INSERTING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': ' CNTR > 0 ', 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' INSERTING OR UPDATING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COMPANY_TYPE_CD INTO V_COMPANY_TYPE_CD FROM CFG_V_COMPANIES WHERE COMPANY_CD = NVL ( :NEW.COMPANY_CD, :OLD.COMPANY_CD);', 'statement_indent': 8}, {'condition': " V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_INS_LEGAL_ADDR;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_CTRY_CHG;', 'statement_indent': 16}], 'if_elses': [], 'else_statements': []}, {'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'condition': ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID ', 'type': 'if_else', 'if_indent': 16, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'CTRY_CHANGE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'CTRY_CHANGE'"}}, {'type': 'assignment', 'variable_name': 'CNTR', 'assignment_operator': ':=', 'expression': '0;', 'assignment_indent': 20}, {'type': 'select_statement', 'sql_statement': "SELECT COUNT(*) INTO CNTR FROM CFG_V_COMPANIES WHERE COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('B', 'L');", 'statement_indent': 20}, {'condition': " :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 ", 'type': 'if_else', 'if_indent': 20, 'then_statements': [{'type': 'select_statement', 'sql_statement': 'SELECT COUNTRY_CD INTO V_COUNTRY_CD FROM MDM_V_COUNTRIES WHERE COUNTRY_ID = :NEW.COUNTRY_ID;', 'statement_indent': 24}, {'condition': " TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 10), 'dd.mm.yyyy');", 'assignment_indent': 28}], 'if_elses': [], 'else_statements': [{'type': 'assignment', 'variable_name': 'V_VALID_FROM', 'assignment_operator': ':=', 'expression': "TO_DATE(ADD_MONTHS(TRUNC(:NEW.VALID_FROM, 'yyyy'), 22), 'dd.mm.yyyy');", 'assignment_indent': 28}]}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_COMPANIES.MODIFYCOMPANYMAPPING_CE_JU', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'I_COMPANY_CD': ':NEW.COMPANY_CD', 'I_REPORTING_ENTITY_CD': "'J-' || V_COUNTRY_CD", 'I_VALID_FROM_DATE': 'V_VALID_FROM', 'I_VALID_TO_DATE': 'NULL', 'I_CHANGE_USER': 'V_USERID', 'I_MAPPING_TYPE': "'JU'", 'I_ACTION_TYPE': "'INSERT'"}, 'raw_text': "I_COMPANY_CD => :NEW.COMPANY_CD, I_REPORTING_ENTITY_CD => 'J-' || V_COUNTRY_CD, I_VALID_FROM_DATE => V_VALID_FROM, I_VALID_TO_DATE => NULL, I_CHANGE_USER => V_USERID, I_MAPPING_TYPE => 'JU', I_ACTION_TYPE => 'INSERT'"}}, {'condition': " V_COMPANY_TYPE_CD = 'L' ", 'type': 'if_else', 'if_indent': 24, 'then_statements': [{'for_expression': "( FOR V_REC IN ( SELECT COMPANY_CD FROM CFG_V_COMPANIES WHERE LEGAL_COMPANY_CD = :NEW.COMPANY_CD AND VALID_IND = 'Y' AND CBC_GBE_SCOPE = 'Y' AND COMPANY_TYPE_CD IN ('O', 'V') )", 'type': 'for_loop', 'for_indent': 28, 'loop_variable': 'V_REC', 'for_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}]}], 'if_elses': [], 'else_statements': []}, {'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'condition': ' CNTR = 0 ', 'type': 'if_else', 'if_indent': 12, 'then_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'INSERT'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'INSERT'"}}], 'if_elses': [], 'else_statements': [{'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': ':NEW.COMPANY_CD', 'P_ADDRESS_TYPE_CD': ':NEW.ADDRESS_TYPE_CD', 'P_ADDITIONAL_NAME': ':NEW.ADDITIONAL_NAME', 'P_STREET': ':NEW.STREET', 'P_HOUSE_NO': ':NEW.HOUSE_NO', 'P_BUILDING': ':NEW.BUILDING', 'P_ADDITIONAL_INFO': ':NEW.ADDITIONAL_INFO', 'P_ZIP_CODE': ':NEW.ZIP_CODE', 'P_CITY': ':NEW.CITY', 'P_DISTRICT_NAME': ':NEW.DISTRICT_NAME', 'P_COUNTRY_ID': ':NEW.COUNTRY_ID', 'P_LATITUDE': ':NEW.LATITUDE', 'P_LONGITUDE': ':NEW.LONGITUDE', 'P_ADDRESS_REMARK': ':NEW.ADDRESS_REMARK', 'P_VALID_FROM': ':NEW.VALID_FROM', 'P_ACTION_TYPE': "'UPDATE'"}, 'raw_text': "P_COMPANY_CD => :NEW.COMPANY_CD, P_ADDRESS_TYPE_CD => :NEW.ADDRESS_TYPE_CD, P_ADDITIONAL_NAME => :NEW.ADDITIONAL_NAME, P_STREET => :NEW.STREET, P_HOUSE_NO => :NEW.HOUSE_NO, P_BUILDING => :NEW.BUILDING, P_ADDITIONAL_INFO => :NEW.ADDITIONAL_INFO, P_ZIP_CODE => :NEW.ZIP_CODE, P_CITY=> :NEW.CITY, P_DISTRICT_NAME => :NEW.DISTRICT_NAME, P_COUNTRY_ID => :NEW.COUNTRY_ID, P_LATITUDE => :NEW.LATITUDE, P_LONGITUDE => :NEW.LONGITUDE, P_ADDRESS_REMARK => :NEW.ADDRESS_REMARK, P_VALID_FROM => :NEW.VALID_FROM, P_ACTION_TYPE => 'UPDATE'"}}]}], 'if_elses': [], 'else_statements': []}], 'if_elses': [], 'else_statements': []}, {'condition': ' DELETING ', 'type': 'if_else', 'if_indent': 4, 'then_statements': [{'condition': " NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') ", 'type': 'if_else', 'if_indent': 8, 'then_statements': [{'type': 'raise_statement', 'sql_statement': 'RAISE ERR_NOT_ALLOWED_TO_INVALIDATE;', 'statement_indent': 12}], 'if_elses': [], 'else_statements': []}, {'type': 'function_calling', 'function_name': 'MDM_UTIL_ADDRESSES.MODIFY_COMPANY_ADDRESS', 'parameters': {'parameter_type': 'named', 'positional_params': [], 'named_params': {'P_COMPANY_CD': 'NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD)', 'P_ADDRESS_TYPE_CD': 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD)', 'P_ACTION_TYPE': "'DELETE'"}, 'raw_text': "P_COMPANY_CD => NVL(:NEW.COMPANY_CD, :OLD.COMPANY_CD), P_ADDRESS_TYPE_CD => NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD), P_ACTION_TYPE => 'DELETE'"}}], 'if_elses': [], 'else_statements': []}]
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,012 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR > 0'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,013 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,014 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,015 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Processing condition for on_insert: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:52,016 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,017 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'CNTR = 0'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'TRUE'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Processing condition for on_insert: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,018 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - === Processing UPDATE operations ===
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR > 0'
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,019 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,020 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,021 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Processing condition for on_update: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,022 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'CNTR = 0'
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,023 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'TRUE'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Processing condition for on_update: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - === Processing DELETE operations ===
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING '
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING' â†’ ''
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,024 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR > 0 '
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR > 0'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR > 0'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR > 0'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Starting condition modification: ' INSERTING OR UPDATING '
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Stripped condition: 'INSERTING OR UPDATING'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Removed keyword 'INSERTING': 'INSERTING OR UPDATING' â†’ ' OR UPDATING'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Removed keyword 'UPDATING': ' OR UPDATING' â†’ ' OR '
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Removed leading/trailing operators: ' OR ' â†’ ''
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L') '
2025-08-28 06:26:52,025 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_COMPANY_TYPE_CD NOT IN ('L', 'A') AND NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L') '
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ( 'P', 'L')'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) = NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,026 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID '
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:OLD.VALID_FROM, TRUNC(SYSDATE)) <> NVL(:NEW.VALID_FROM, TRUNC(SYSDATE)) AND :OLD.COUNTRY_ID <> :NEW.COUNTRY_ID'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Starting condition modification: ' :NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0 '
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Stripped condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Final modified condition: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Processing condition for on_delete: ':NEW.ADDRESS_TYPE_CD = 'P' AND CNTR > 0'
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,027 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01' '
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Stripped condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Final modified condition: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TO_CHAR(:NEW.VALID_FROM, 'dd.mm') = '01.01''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' V_COMPANY_TYPE_CD = 'L' '
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Stripped condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Final modified condition: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'V_COMPANY_TYPE_CD = 'L''
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L') '
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) NOT IN ( 'P', 'L')'
2025-08-28 06:26:52,028 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Starting condition modification: ' CNTR = 0 '
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Stripped condition: 'CNTR = 0'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Final modified condition: 'CNTR = 0'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'CNTR = 0'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Starting condition modification: ' DELETING '
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Stripped condition: 'DELETING'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Removed keyword 'DELETING': 'DELETING' â†’ ''
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Condition is empty after processing, returning 'TRUE'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'TRUE'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Starting condition modification: ' NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P') '
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Stripped condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Final modified condition: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,029 - root - DEBUG - [common.py:105] - Processing condition for on_delete: 'NVL(:NEW.ADDRESS_TYPE_CD, :OLD.ADDRESS_TYPE_CD) IN ('L', 'P')'
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - Operation keywords found in condition:
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] -   - INSERT keywords: False
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] -   - UPDATE keywords: False
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] -   - DELETE keywords: False
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - KEEP: Condition doesn't contain any operation keywords
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - Building final converted structure
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - Converting to JSON string
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - Generated JSON string with 83459 characters
2025-08-28 06:26:52,030 - root - DEBUG - [common.py:105] - === to_sql() conversion complete ===
2025-08-28 06:26:52,031 - root - DEBUG - [common.py:105] - Created zzz.json
2025-08-28 06:26:52,031 - root - INFO - [common.py:110] - âœ“ PL/JSON conversion complete! (Duration: 0.40 seconds)
2025-08-28 06:26:52,031 - root - DEBUG - [common.py:105] - Step 5 completed in 0.40 seconds
2025-08-28 06:26:52,031 - root - INFO - [common.py:110] - Step 6: Converting PL/JSON to PostgreSQL format...
2025-08-28 06:26:52,031 - root - DEBUG - [common.py:105] - Starting Step 6: PL/JSON â†’ PostgreSQL format JSON
2025-08-28 06:26:52,032 - root - INFO - [common.py:110] - === Starting PL/JSON to PostgreSQL format conversion ===
2025-08-28 06:26:52,032 - root - INFO - [common.py:110] - === Starting file processing ===
2025-08-28 06:26:52,032 - root - INFO - [common.py:110] - Source directory: 'files/format_pl_json'
2025-08-28 06:26:52,032 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-08-28 06:26:52,032 - root - INFO - [common.py:110] - File pattern: '.json'
2025-08-28 06:26:52,033 - root - INFO - [common.py:110] - Output suffix: '_postgresql.json'
2025-08-28 06:26:52,033 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-08-28 06:26:52,033 - root - DEBUG - [common.py:105] - Created directory: files/format_plsql
2025-08-28 06:26:52,033 - root - DEBUG - [common.py:105] - Found 8 files in source directory
2025-08-28 06:26:52,033 - root - DEBUG - [common.py:105] - Files matching pattern '.json': ['trigger1.json', 'trigger2.json', 'trigger3.json', 'trigger4.json', 'trigger5.json', 'trigger6.json', 'yyy.json', 'zzz.json']
2025-08-28 06:26:52,033 - root - DEBUG - [common.py:105] - === Processing file 1/8: trigger1.json ===
2025-08-28 06:26:52,034 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger1.json
2025-08-28 06:26:52,034 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_postgresql.json
2025-08-28 06:26:52,034 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger1.json ===
2025-08-28 06:26:52,034 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger1.json
2025-08-28 06:26:52,035 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,036 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,036 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,474 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,475 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,482 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,483 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,483 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,483 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,485 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,485 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,485 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,498 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,498 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,510 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,510 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,510 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,510 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,511 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,511 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,512 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,526 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,526 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,537 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,537 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,537 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,537 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,538 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,538 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,539 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,539 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger1_postgresql.json
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger1_postgresql.json
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger1.json ===
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - âœ“ Created trigger1_postgresql.json
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - === Processing file 2/8: trigger2.json ===
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger2.json
2025-08-28 06:26:52,543 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_postgresql.json
2025-08-28 06:26:52,544 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger2.json ===
2025-08-28 06:26:52,544 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger2.json
2025-08-28 06:26:52,544 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,544 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,544 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,557 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,557 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,565 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,566 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,566 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,566 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,567 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,567 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,567 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,579 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,580 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,589 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,589 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,589 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,589 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,589 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,590 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,590 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,601 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,601 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,611 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,611 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,611 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,611 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,612 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,612 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,612 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,612 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger2_postgresql.json
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger2_postgresql.json
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger2.json ===
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - âœ“ Created trigger2_postgresql.json
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - === Processing file 3/8: trigger3.json ===
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger3.json
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_postgresql.json
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger3.json ===
2025-08-28 06:26:52,615 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger3.json
2025-08-28 06:26:52,616 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,616 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,616 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,628 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,629 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,639 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,639 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,639 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,639 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,639 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,640 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,640 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,652 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,652 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,661 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,661 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,661 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,661 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,662 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,662 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,662 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,673 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,674 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,683 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,683 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,683 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,684 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,684 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,684 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,684 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,684 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger3_postgresql.json
2025-08-28 06:26:52,686 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger3_postgresql.json
2025-08-28 06:26:52,686 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger3.json ===
2025-08-28 06:26:52,686 - root - DEBUG - [common.py:105] - âœ“ Created trigger3_postgresql.json
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - === Processing file 4/8: trigger4.json ===
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger4.json
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_postgresql.json
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger4.json ===
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger4.json
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,687 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,706 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,706 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,719 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,720 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,734 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,734 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,744 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,744 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,744 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,744 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,744 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,744 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,745 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,761 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,761 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,778 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,779 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,779 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,779 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,779 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,779 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,780 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,780 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger4_postgresql.json
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger4_postgresql.json
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger4.json ===
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - âœ“ Created trigger4_postgresql.json
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - === Processing file 5/8: trigger5.json ===
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger5.json
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_postgresql.json
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger5.json ===
2025-08-28 06:26:52,781 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger5.json
2025-08-28 06:26:52,782 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,782 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,782 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,799 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,799 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,814 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,815 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,815 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,815 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,815 - root - ERROR - [common.py:120] - Failed to generate PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,815 - root - ERROR - [common.py:120] - Failed to convert complex structure to PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,815 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,835 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,835 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,852 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,852 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,852 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,852 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,852 - root - ERROR - [common.py:120] - Failed to generate PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,853 - root - ERROR - [common.py:120] - Failed to convert complex structure to PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,854 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,869 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,869 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,882 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,882 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,882 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,883 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,883 - root - ERROR - [common.py:120] - Failed to generate PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,883 - root - ERROR - [common.py:120] - Failed to convert complex structure to PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:52,884 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,884 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger5_postgresql.json
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger5_postgresql.json
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger5.json ===
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - âœ“ Created trigger5_postgresql.json
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - === Processing file 6/8: trigger6.json ===
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\trigger6.json
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger6_postgresql.json
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger trigger6.json ===
2025-08-28 06:26:52,886 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\trigger6.json
2025-08-28 06:26:52,887 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,887 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,887 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,901 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,901 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,912 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,912 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,913 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,913 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,913 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,913 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,913 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,927 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,927 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,940 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,940 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,940 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,940 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,940 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,940 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,941 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,955 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,955 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,969 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,969 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,969 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,969 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:52,969 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:52,969 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:52,970 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:52,970 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\trigger6_postgresql.json
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\trigger6_postgresql.json
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger trigger6.json ===
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - âœ“ Created trigger6_postgresql.json
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - === Processing file 7/8: yyy.json ===
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\yyy.json
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\yyy_postgresql.json
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger yyy.json ===
2025-08-28 06:26:52,971 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\yyy.json
2025-08-28 06:26:52,973 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:52,973 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:52,973 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:52,989 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:52,989 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:52,998 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:52,998 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:52,999 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:52,999 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,000 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,000 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,000 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:53,012 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,012 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,022 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,022 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,023 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:53,023 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,024 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,024 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,024 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:53,038 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,038 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,048 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,048 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,048 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:53,048 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,049 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,049 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,049 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:53,049 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\yyy_postgresql.json
2025-08-28 06:26:53,051 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\yyy_postgresql.json
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger yyy.json ===
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - âœ“ Created yyy_postgresql.json
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - === Processing file 8/8: zzz.json ===
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - Source path: files/format_pl_json\zzz.json
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\zzz_postgresql.json
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - === Converting PL/JSON to PostgreSQL format for trigger zzz.json ===
2025-08-28 06:26:53,052 - root - DEBUG - [common.py:105] - Reading PL/JSON file: files/format_pl_json\zzz.json
2025-08-28 06:26:53,053 - root - DEBUG - [common.py:105] - Successfully loaded PL/JSON data with keys: ['on_insert', 'on_update', 'on_delete']
2025-08-28 06:26:53,053 - root - DEBUG - [common.py:105] - Converting to PostgreSQL format...
2025-08-28 06:26:53,053 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:53,067 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,067 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,078 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,078 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,078 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:53,078 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,079 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,079 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,079 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:53,114 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,114 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,124 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,124 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,124 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:53,125 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,125 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,125 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,125 - root - DEBUG - [common.py:105] - Converting complex structure to PostgreSQL SQL
2025-08-28 06:26:53,139 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,139 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,149 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,149 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,149 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 2 keys
2025-08-28 06:26:53,149 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,149 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,149 - root - DEBUG - [common.py:105] - Successfully converted complex structure to PostgreSQL SQL
2025-08-28 06:26:53,150 - root - DEBUG - [common.py:105] - PostgreSQL format conversion completed
2025-08-28 06:26:53,150 - root - DEBUG - [common.py:105] - Writing PostgreSQL format to: files/format_plsql\zzz_postgresql.json
2025-08-28 06:26:53,151 - root - DEBUG - [common.py:105] - Successfully wrote PostgreSQL format to files/format_plsql\zzz_postgresql.json
2025-08-28 06:26:53,151 - root - DEBUG - [common.py:105] - === PL/JSON to PostgreSQL format conversion complete for trigger zzz.json ===
2025-08-28 06:26:53,151 - root - DEBUG - [common.py:105] - âœ“ Created zzz_postgresql.json
2025-08-28 06:26:53,151 - root - INFO - [common.py:110] - === File processing complete ===
2025-08-28 06:26:53,152 - root - INFO - [common.py:110] - Successfully processed: 8 files
2025-08-28 06:26:53,152 - root - INFO - [common.py:110] - === PL/JSON to PostgreSQL format conversion complete ===
2025-08-28 06:26:53,152 - root - INFO - [common.py:110] - âœ“ PostgreSQL format conversion complete! (Duration: 1.12 seconds)
2025-08-28 06:26:53,153 - root - DEBUG - [common.py:105] - Step 6 completed in 1.12 seconds
2025-08-28 06:26:53,153 - root - INFO - [common.py:110] - Step 7: Converting JSON analysis directly to PostgreSQL SQL...
2025-08-28 06:26:53,153 - root - DEBUG - [common.py:105] - Starting Step 7: JSON analysis â†’ PostgreSQL SQL
2025-08-28 06:26:53,153 - root - INFO - [common.py:110] - === Starting JSON analysis to PostgreSQL SQL conversion ===
2025-08-28 06:26:53,153 - root - INFO - [common.py:110] - === Starting file processing ===
2025-08-28 06:26:53,153 - root - INFO - [common.py:110] - Source directory: 'files/format_json'
2025-08-28 06:26:53,154 - root - INFO - [common.py:110] - Target directory: 'files/format_plsql'
2025-08-28 06:26:53,154 - root - INFO - [common.py:110] - File pattern: '_analysis.json'
2025-08-28 06:26:53,154 - root - INFO - [common.py:110] - Output suffix: '_postgresql.sql'
2025-08-28 06:26:53,154 - root - DEBUG - [common.py:105] - Ensuring target directory exists...
2025-08-28 06:26:53,154 - root - DEBUG - [common.py:105] - Directory already exists: files/format_plsql
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - Found 8 files in source directory
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - Files matching pattern '_analysis.json': ['trigger1_analysis.json', 'trigger2_analysis.json', 'trigger3_analysis.json', 'trigger4_analysis.json', 'trigger5_analysis.json', 'trigger6_analysis.json', 'yyy_analysis.json', 'zzz_analysis.json']
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - === Processing file 1/8: trigger1_analysis.json ===
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger1_analysis.json
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger1_analysis_postgresql.sql
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger1_analysis.json ===
2025-08-28 06:26:53,155 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger1_analysis.json
2025-08-28 06:26:53,156 - root - DEBUG - [main.py:926] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:53,156 - root - DEBUG - [common.py:105] - Creating FORMATPostsqlTriggerAnalyzer instance...
2025-08-28 06:26:53,173 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,173 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,183 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,184 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,184 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 6 keys
2025-08-28 06:26:53,184 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer created successfully
2025-08-28 06:26:53,184 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-08-28 06:26:53,184 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,186 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,186 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-08-28 06:26:53,186 - root - DEBUG - [common.py:105] - Rendered SQL length: 20327 characters
2025-08-28 06:26:53,186 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger1_analysis_postgresql.sql
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger1_analysis_postgresql.sql
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger1_analysis.json ===
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - âœ“ Created trigger1_analysis_postgresql.sql
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - === Processing file 2/8: trigger2_analysis.json ===
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger2_analysis.json
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger2_analysis_postgresql.sql
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger2_analysis.json ===
2025-08-28 06:26:53,187 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger2_analysis.json
2025-08-28 06:26:53,188 - root - DEBUG - [main.py:926] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:53,188 - root - DEBUG - [common.py:105] - Creating FORMATPostsqlTriggerAnalyzer instance...
2025-08-28 06:26:53,201 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,201 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,211 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,211 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,211 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 6 keys
2025-08-28 06:26:53,211 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer created successfully
2025-08-28 06:26:53,211 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-08-28 06:26:53,211 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,212 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,212 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-08-28 06:26:53,212 - root - DEBUG - [common.py:105] - Rendered SQL length: 8741 characters
2025-08-28 06:26:53,212 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger2_analysis_postgresql.sql
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger2_analysis_postgresql.sql
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger2_analysis.json ===
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - âœ“ Created trigger2_analysis_postgresql.sql
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - === Processing file 3/8: trigger3_analysis.json ===
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger3_analysis.json
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger3_analysis_postgresql.sql
2025-08-28 06:26:53,213 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger3_analysis.json ===
2025-08-28 06:26:53,214 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger3_analysis.json
2025-08-28 06:26:53,214 - root - DEBUG - [main.py:926] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:53,214 - root - DEBUG - [common.py:105] - Creating FORMATPostsqlTriggerAnalyzer instance...
2025-08-28 06:26:53,230 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,230 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,240 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,240 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,240 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 6 keys
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer created successfully
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - Rendered SQL length: 7821 characters
2025-08-28 06:26:53,241 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger3_analysis_postgresql.sql
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger3_analysis_postgresql.sql
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger3_analysis.json ===
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - âœ“ Created trigger3_analysis_postgresql.sql
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - === Processing file 4/8: trigger4_analysis.json ===
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger4_analysis.json
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger4_analysis_postgresql.sql
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger4_analysis.json ===
2025-08-28 06:26:53,242 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger4_analysis.json
2025-08-28 06:26:53,243 - root - DEBUG - [main.py:926] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:53,243 - root - DEBUG - [common.py:105] - Creating FORMATPostsqlTriggerAnalyzer instance...
2025-08-28 06:26:53,255 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,255 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,266 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 6 keys
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer created successfully
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - PostgreSQL SQL generation completed successfully
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - PostgreSQL SQL rendering completed successfully
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - Rendered SQL length: 4148 characters
2025-08-28 06:26:53,267 - root - DEBUG - [common.py:105] - Writing formatted PostgreSQL SQL to: files/format_plsql\trigger4_analysis_postgresql.sql
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - Successfully wrote formatted PostgreSQL SQL to files/format_plsql\trigger4_analysis_postgresql.sql
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing complete for trigger trigger4_analysis.json ===
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - âœ“ Created trigger4_analysis_postgresql.sql
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - === Processing file 5/8: trigger5_analysis.json ===
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - Source path: files/format_json\trigger5_analysis.json
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - Output path: files/format_plsql\trigger5_analysis_postgresql.sql
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - === JSON to PostgreSQL SQL processing for trigger trigger5_analysis.json ===
2025-08-28 06:26:53,268 - root - DEBUG - [common.py:105] - Reading JSON analysis file: files/format_json\trigger5_analysis.json
2025-08-28 06:26:53,269 - root - DEBUG - [main.py:926] - Successfully loaded analysis JSON with keys: ['declarations', 'main', 'sql_comments', 'rest_strings', 'conversion_stats', 'metadata']
2025-08-28 06:26:53,269 - root - DEBUG - [common.py:105] - Creating FORMATPostsqlTriggerAnalyzer instance...
2025-08-28 06:26:53,284 - root - WARNING - [common.py:115] - Failed to load function mappings from Excel: 'oracle_function'
2025-08-28 06:26:53,284 - root - DEBUG - [common.py:105] - Using default function mappings
2025-08-28 06:26:53,295 - root - WARNING - [common.py:115] - Failed to load type mappings from Excel: 'oracle_type'
2025-08-28 06:26:53,295 - root - DEBUG - [common.py:105] - Using default type mappings
2025-08-28 06:26:53,295 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer initialized with 6 keys
2025-08-28 06:26:53,295 - root - DEBUG - [common.py:105] - FORMATPostsqlTriggerAnalyzer created successfully
2025-08-28 06:26:53,296 - root - DEBUG - [common.py:105] - Rendering PostgreSQL SQL from analysis...
2025-08-28 06:26:53,296 - root - DEBUG - [common.py:105] - Starting PostgreSQL SQL generation
2025-08-28 06:26:53,296 - root - ERROR - [common.py:120] - Failed to generate PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:53,296 - root - ERROR - [common.py:120] - Failed to render PostgreSQL SQL: 'str' object has no attribute 'get'
2025-08-28 06:26:53,296 - root - ERROR - [common.py:120] - Failed to process trigger5_analysis.json: 'str' object has no attribute 'get'
2025-08-28 06:26:53,296 - root - CRITICAL - [common.py:125] - Fatal error during conversion: 'str' object has no attribute 'get'
2025-08-28 06:26:53,297 - root - CRITICAL - [common.py:125] - Process failed after 2.08 seconds
2025-08-28 06:26:53,297 - root - DEBUG - [common.py:105] - Fatal error details: AttributeError: 'str' object has no attribute 'get'
2025-08-28 06:26:53,300 - root - DEBUG - [common.py:105] - Error traceback: Traceback (most recent call last):
  File "D:\DELOITTE\ORACALE_to_json\main.py", line 1356, in main
    convert_json_analysis_to_postgresql_sql()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\DELOITTE\ORACALE_to_json\main.py", line 999, in convert_json_analysis_to_postgresql_sql
    process_files(
    ~~~~~~~~~~~~~^
        source_dir=FORMAT_JSON_DIR,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ...<3 lines>...
        processor_func=json_to_pl_sql_processor,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\DELOITTE\ORACALE_to_json\main.py", line 182, in process_files
    processor_func(src_path, out_path, file_name)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\main.py", line 950, in json_to_pl_sql_processor
    sql_content: str = analyzer.to_sql()
                       ~~~~~~~~~~~~~~~^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 564, in to_sql
    main_section = self._render_main_section()
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 547, in _render_main_section
    return self._render_begin_end(main, 0)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 501, in _render_begin_end
    lines.append(self._render_statement(stmt, indent_level + 1))
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 338, in _render_statement
    return self._render_if_else(statement, indent_level)
           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 386, in _render_if_else
    lines.append(self._render_statement(stmt, indent_level + 1))
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 338, in _render_statement
    return self._render_if_else(statement, indent_level)
           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 386, in _render_if_else
    lines.append(self._render_statement(stmt, indent_level + 1))
                 ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\DELOITTE\ORACALE_to_json\utilities\FORMATPostsqlTriggerAnalyzer.py", line 274, in _render_statement
    statement_type = statement.get('type', '')
                     ^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'get'

